import axios from "axios";

export class TranscriptionService {
  async getUKTranscription(word) {
    try {
      console.log(`üîç Searching UK transcription for: "${word}"`);

      const response = await axios.get(
        `https://api.dictionaryapi.dev/api/v2/entries/en/${encodeURIComponent(
          word.toLowerCase()
        )}`,
        { timeout: 5000 }
      );

      if (response.data && response.data[0]) {
        const wordData = response.data[0];

        // –ò—â–µ–º UK —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é
        if (wordData.phonetics) {
          const ukPhonetic = wordData.phonetics.find(
            (p) => p.audio && p.audio.includes("/uk/")
          );
          if (ukPhonetic && ukPhonetic.text) {
            console.log(`‚úÖ UK transcription found: ${ukPhonetic.text}`);
            return ukPhonetic.text;
          }

          // –õ—é–±–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –µ—Å–ª–∏ UK –Ω–µ—Ç
          const anyPhonetic = wordData.phonetics.find((p) => p.text);
          if (anyPhonetic) {
            console.log(
              `‚úÖ Using available transcription: ${anyPhonetic.text}`
            );
            return anyPhonetic.text;
          }
        }

        // –û–±—â–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è
        if (wordData.phonetic) {
          console.log(`‚úÖ Using phonetic: ${wordData.phonetic}`);
          return wordData.phonetic;
        }
      }

      console.log("‚ùå No transcription found");
      return "";
    } catch (error) {
      if (error.response?.status === 404) {
        console.log("‚ùå Word not found in dictionary");
      } else {
        console.error("‚ùå Dictionary API error:", error.message);
      }
      return "";
    }
  }
}
