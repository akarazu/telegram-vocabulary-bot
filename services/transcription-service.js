export class BackupDictionaryService {
    async getTranscription(word) {
        try {
            console.log(`üîç Backup: Searching for "${word}"`);
            
            const encodedWord = encodeURIComponent(word);
            
            const response = await axios.get(
                `https://api.dictionaryapi.dev/api/v2/entries/en/${encodedWord}`,
                { timeout: 5000 }
            );

            const result = this.extractTranscriptionAndAudio(response.data, word);
            
            // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —á–µ—Ä–µ–∑ –æ—Å–Ω–æ–≤–Ω–æ–π API, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫
            if (!result.audioUrl) {
                console.log('üîÑ Backup: Trying alternative audio source...');
                const alternativeAudio = await this.getAlternativeAudio(word);
                if (alternativeAudio) {
                    result.audioUrl = alternativeAudio;
                }
            }
            
            return result;
            
        } catch (error) {
            console.error('Backup API error:', error.message);
            
            // Fallback: –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            try {
                console.log('üîÑ Backup: Fallback to alternative audio source...');
                const alternativeAudio = await this.getAlternativeAudio(word);
                return {
                    transcription: '',
                    audioUrl: alternativeAudio || ''
                };
            } catch (fallbackError) {
                return { transcription: '', audioUrl: '' };
            }
        }
    }

    extractTranscriptionAndAudio(data, originalWord) {
        if (!Array.isArray(data) || data.length === 0) {
            console.log('‚ùå Backup: No data found');
            return { transcription: '', audioUrl: '' };
        }

        console.log(`üîç Backup: Found ${data.length} entry/entries`);

        let transcription = '';
        let audioUrl = '';

        for (const entry of data) {
            // –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            console.log('üîç Backup entry structure:', {
                word: entry.word,
                phonetic: entry.phonetic,
                phonetics: entry.phonetics ? entry.phonetics.length : 0
            });

            // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–æ–ª—è
            if (entry.phonetic) {
                transcription = entry.phonetic;
                console.log(`‚úÖ Backup: Found transcription from phonetic: ${transcription}`);
            }

            // –ò—â–µ–º –∞—É–¥–∏–æ –≤ phonetics
            if (entry.phonetics && Array.isArray(entry.phonetics)) {
                for (const phonetic of entry.phonetics) {
                    console.log('üîç Backup phonetic:', phonetic);
                    
                    if (phonetic.audio && phonetic.audio.trim()) {
                        // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è UK –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è
                        if (phonetic.audio.includes('-uk.') || phonetic.text) {
                            audioUrl = phonetic.audio;
                            // –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë
                            if (phonetic.text && !transcription) {
                                transcription = phonetic.text;
                            }
                            console.log(`‚úÖ Backup: Found audio: ${audioUrl}`);
                            break;
                        }
                    }
                }
            }

            // –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –∏ –∞—É–¥–∏–æ, –≤—ã—Ö–æ–¥–∏–º
            if (transcription && audioUrl) break;
        }

        console.log(`üìä Backup final results: transcription="${transcription}", audioUrl="${audioUrl ? 'found' : 'not found'}"`);
        
        return {
            transcription: transcription || '',
            audioUrl: audioUrl || ''
        };
    }

    // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ Google TTS
    async getAlternativeAudio(word) {
        try {
            // –ü—Ä–æ—Å—Ç–æ–π fallback —á–µ—Ä–µ–∑ Google Text-to-Speech
            const encodedWord = encodeURIComponent(word);
            const audioUrl = `https://translate.google.com/translate_tts?ie=UTF-8&q=${encodedWord}&tl=en-gb&client=tw-ob`;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ URL –≤–∞–ª–∏–¥–Ω—ã–π
            const response = await axios.head(audioUrl, { timeout: 3000 });
            if (response.status === 200) {
                console.log(`‚úÖ Alternative audio found for: ${word}`);
                return audioUrl;
            }
        } catch (error) {
            console.log('‚ùå Alternative audio not available');
        }
        return '';
    }
}
