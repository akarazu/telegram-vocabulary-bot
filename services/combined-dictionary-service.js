import axios from 'axios';

export class CombinedDictionaryService {
    constructor() {
        this.useYandex = !!process.env.YANDEX_DICTIONARY_API_KEY;
    }

    async getWordData(word) {
        console.log(`üîç [CombinedService] Getting data for: "${word}"`);
        
        const result = {
            word: word,
            transcription: '',
            audioUrl: '',
            meanings: [],
            translations: []
        };

        // ‚úÖ –Ø–Ω–¥–µ–∫—Å –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
        let yandexData = null;
        if (this.useYandex) {
            try {
                yandexData = await this.getYandexData(word);
                if (yandexData.translations.length > 0) {
                    result.translations = yandexData.translations;
                    result.transcription = yandexData.transcription;
                    console.log(`‚úÖ [CombinedService] Yandex found ${result.translations.length} translations`);
                }
            } catch (error) {
                console.log('‚ùå [CombinedService] Yandex failed:', error.message);
            }
        }

        // ‚úÖ Free Dictionary –¥–ª—è –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π
        let freeDictData = null;
        try {
            freeDictData = await this.getFreeDictionaryData(word);
            if (freeDictData.meanings.length > 0) {
                result.meanings = freeDictData.meanings;
                result.audioUrl = freeDictData.audioUrl;
                
                // ‚úÖ –ï—Å–ª–∏ –Ø–Ω–¥–µ–∫—Å –Ω–µ –¥–∞–ª —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é, –±–µ—Ä–µ–º –∏–∑ FreeDictionary
                if (!result.transcription && freeDictData.transcription) {
                    result.transcription = freeDictData.transcription;
                }
                
                console.log(`‚úÖ [CombinedService] FreeDictionary found ${result.meanings.length} meanings`);
            }
        } catch (error) {
            console.log('‚ùå [CombinedService] FreeDictionary failed:', error.message);
        }

        // ‚úÖ –°–û–ü–û–°–¢–ê–í–õ–Ø–ï–ú –ü–ï–†–ï–í–û–î–´ YANDEX –° –ó–ù–ê–ß–ï–ù–ò–Ø–ú–ò FREEDICTIONARY
        if (result.translations.length > 0 && result.meanings.length > 0) {
            this.matchYandexTranslationsWithFreeDictMeanings(result);
        } else if (result.meanings.length > 0 && result.translations.length === 0) {
            // ‚úÖ –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ –∑–Ω–∞—á–µ–Ω–∏—è FreeDict, —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã
            this.createTranslationsForFreeDictMeanings(result);
        }

        // ‚úÖ Fallback –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏
        if (result.meanings.length === 0 && result.translations.length === 0) {
            return this.getBasicFallback(word);
        }

        console.log(`üéØ [CombinedService] Final result: ${result.translations.length} translations, ${result.meanings.length} meanings`);
        return result;
    }

    async getYandexData(word) {
        try {
            console.log(`üîç [CombinedService] Making Yandex request for: "${word}"`);
            
            const response = await axios.get('https://dictionary.yandex.net/api/v1/dicservice.json/lookup', {
                params: {
                    key: process.env.YANDEX_DICTIONARY_API_KEY,
                    lang: 'en-ru',
                    text: word,
                    ui: 'ru'
                },
                timeout: 10000
            });

            return this.processYandexResponse(response.data, word);
            
        } catch (error) {
            throw new Error(`Yandex: ${error.message}`);
        }
    }

    processYandexResponse(data, word) {
        const result = {
            word: word,
            transcription: '',
            translations: []
        };

        if (!data.def || data.def.length === 0) {
            return result;
        }

        // ‚úÖ –¢–†–ê–ù–°–ö–†–ò–ü–¶–ò–Ø –∏–∑ –Ø–Ω–¥–µ–∫—Å
        if (data.def[0].ts) {
            result.transcription = `/${data.def[0].ts}/`;
        }

        // ‚úÖ –ò–ó–í–õ–ï–ö–ê–ï–ú –ü–ï–†–ï–í–û–î–´ –∏–∑ –Ø–Ω–¥–µ–∫—Å
        data.def.forEach((definition, defIndex) => {
            if (definition.tr && Array.isArray(definition.tr)) {
                definition.tr.forEach((translation, transIndex) => {
                    if (translation.text && this.isRussianText(translation.text)) {
                        const russianTranslation = translation.text.trim();
                        
                        if (!result.translations.includes(russianTranslation)) {
                            result.translations.push(russianTranslation);
                        }
                    }
                });
            }
        });

        console.log(`üéØ [CombinedService] Yandex: ${result.translations.length} translations`);
        return result;
    }

    async getFreeDictionaryData(word) {
        try {
            console.log(`üîç [CombinedService] Making FreeDictionary request for: "${word}"`);
            
            const response = await axios.get(
                `https://api.dictionaryapi.dev/api/v2/entries/en/${encodeURIComponent(word)}`,
                { timeout: 10000 }
            );

            return this.processFreeDictionaryResponse(response.data, word);
            
        } catch (error) {
            throw new Error(`FreeDictionary: ${error.message}`);
        }
    }

    processFreeDictionaryResponse(data, word) {
        const result = {
            word: word,
            transcription: '',
            audioUrl: `https://translate.google.com/translate_tts?ie=UTF-8&q=${encodeURIComponent(word)}&tl=en-gb&client=tw-ob`,
            meanings: []
        };

        if (!Array.isArray(data) || data.length === 0) {
            return result;
        }

        const entry = data[0];
        
        // ‚úÖ –¢–†–ê–ù–°–ö–†–ò–ü–¶–ò–Ø –∏–∑ FreeDictionary
        if (entry.phonetic) {
            result.transcription = `/${entry.phonetic}/`;
        }

        // ‚úÖ –ê–£–î–ò–û –∏–∑ FreeDictionary
        if (entry.phonetics && entry.phonetics.length > 0) {
            const audioPhonetic = entry.phonetics.find(p => p.audio && p.audio.length > 0);
            if (audioPhonetic && audioPhonetic.audio) {
                result.audioUrl = audioPhonetic.audio;
            }
        }

        let meaningId = 0;
        
        // ‚úÖ –û–ë–†–ê–ë–ê–¢–´–í–ê–ï–ú –ö–ê–ñ–î–£–Æ –ß–ê–°–¢–¨ –†–ï–ß–ò –ò –û–ü–†–ï–î–ï–õ–ï–ù–ò–Ø
        entry.meanings.forEach((meaning, meaningIndex) => {
            const partOfSpeech = meaning.partOfSpeech;
            
            meaning.definitions.forEach((definition, defIndex) => {
                meaningId++;
                
                // ‚úÖ –°–û–ó–î–ê–ï–ú –ó–ù–ê–ß–ï–ù–ò–ï –° –ê–ù–ì–õ–ò–ô–°–ö–ò–ú –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï–ú
                const detailedMeaning = {
                    id: `fd_${meaningId}`,
                    englishDefinition: definition.definition,
                    englishWord: word,
                    partOfSpeech: partOfSpeech,
                    example: definition.example || '',
                    translation: '', // –±—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –ø—Ä–∏ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏
                    source: 'FreeDictionary'
                };
                
                result.meanings.push(detailedMeaning);
            });
        });

        console.log(`üéØ [CombinedService] FreeDictionary: ${result.meanings.length} english meanings`);
        return result;
    }

    matchYandexTranslationsWithFreeDictMeanings(result) {
        console.log(`üîÑ [CombinedService] Matching ${result.translations.length} Yandex translations with ${result.meanings.length} FreeDict meanings`);
        
        let matchedCount = 0;
        
        // ‚úÖ –ü–†–û–°–¢–û–ï –°–û–ü–û–°–¢–ê–í–õ–ï–ù–ò–ï: –Ω–∞–∑–Ω–∞—á–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã –Ø–Ω–¥–µ–∫—Å –∑–Ω–∞—á–µ–Ω–∏—è–º FreeDict –ø–æ –ø–æ—Ä—è–¥–∫—É
        result.meanings.forEach((meaning, index) => {
            if (index < result.translations.length) {
                meaning.translation = result.translations[index];
                matchedCount++;
            } else {
                // –ï—Å–ª–∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –º–µ–Ω—å—à–µ —á–µ–º –∑–Ω–∞—á–µ–Ω–∏–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥
                meaning.translation = result.translations[0];
            }
        });
        
        console.log(`‚úÖ [CombinedService] Matched ${matchedCount} meanings with translations`);
    }

    createTranslationsForFreeDictMeanings(result) {
        console.log(`üîÑ [CombinedService] Creating translations for FreeDict meanings`);
        
        // ‚úÖ –°–û–ó–î–ê–ï–ú –ü–†–û–°–¢–´–ï –ü–ï–†–ï–í–û–î–´ –î–õ–Ø –ó–ù–ê–ß–ï–ù–ò–ô FREEDICT
        const baseTranslations = ['–æ—Å–Ω–æ–≤–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ', '–≥–ª–∞–≤–Ω—ã–π —Å–º—ã—Å–ª', '–∫–ª—é—á–µ–≤–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ', '–≤–∞–∂–Ω—ã–π –∞—Å–ø–µ–∫—Ç'];
        
        result.meanings.forEach((meaning, index) => {
            const translationIndex = index % baseTranslations.length;
            meaning.translation = baseTranslations[translationIndex];
        });
        
        // ‚úÖ –°–û–ó–î–ê–ï–ú –°–ü–ò–°–û–ö –ü–ï–†–ï–í–û–î–û–í
        result.translations = result.meanings.map(m => m.translation).filter((value, index, self) => 
            self.indexOf(value) === index
        );
        
        console.log(`‚úÖ [CombinedService] Created ${result.translations.length} translations`);
    }

    isRussianText(text) {
        return /[–∞-—è–ê-–Ø]/.test(text);
    }

    getBasicFallback(word) {
        return {
            word: word,
            transcription: `/${word}/`,
            audioUrl: `https://translate.google.com/translate_tts?ie=UTF-8&q=${encodeURIComponent(word)}&tl=en-gb&client=tw-ob`,
            meanings: [{
                id: 'fallback',
                translation: '–æ—Å–Ω–æ–≤–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ',
                englishDefinition: `basic definition of ${word}`,
                englishWord: word,
                partOfSpeech: 'noun',
                example: '',
                source: 'fallback'
            }],
            translations: ['–æ—Å–Ω–æ–≤–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ']
        };
    }
}
