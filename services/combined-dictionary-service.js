import axios from 'axios';

export class CombinedDictionaryService {
    constructor() {
        this.useYandex = !!process.env.YANDEX_DICTIONARY_API_KEY;
    }

    async getWordData(word) {
        console.log(`üîç [CombinedService] Getting data for: "${word}"`);
        
        const result = {
            word: word,
            transcription: '',
            audioUrl: '',
            meanings: [],
            translations: []
        };

        // ‚úÖ –Ø–Ω–¥–µ–∫—Å –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
        let yandexData = null;
        if (this.useYandex) {
            try {
                yandexData = await this.getYandexData(word);
                if (yandexData.translations.length > 0) {
                    result.translations = yandexData.translations;
                    result.transcription = yandexData.transcription;
                    console.log(`‚úÖ [CombinedService] Yandex found ${result.translations.length} translations`);
                    
                    // ‚úÖ –°–†–ê–ó–£ –°–û–ó–î–ê–ï–ú –ó–ù–ê–ß–ï–ù–ò–Ø –ò–ó YANDEX (–ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ)
                    this.createMeaningsFromYandex(result, yandexData);
                }
            } catch (error) {
                console.log('‚ùå [CombinedService] Yandex failed:', error.message);
            }
        }

        // ‚úÖ Free Dictionary –¥–ª—è –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π (–µ—Å–ª–∏ –Ø–Ω–¥–µ–∫—Å –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª)
        if (result.meanings.length === 0) {
            try {
                const freeDictData = await this.getFreeDictionaryData(word);
                if (freeDictData.meanings.length > 0) {
                    result.meanings = freeDictData.meanings;
                    result.audioUrl = freeDictData.audioUrl;
                    console.log(`‚úÖ [CombinedService] FreeDictionary found ${result.meanings.length} meanings`);
                    
                    // ‚úÖ –°–û–ó–î–ê–ï–ú –ü–ï–†–ï–í–û–î–´ –î–õ–Ø –ó–ù–ê–ß–ï–ù–ò–ô FREEDICT
                    this.createTranslationsForFreeDict(result);
                }
            } catch (error) {
                console.log('‚ùå [CombinedService] FreeDictionary failed:', error.message);
            }
        }

        // ‚úÖ Fallback –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏
        if (result.meanings.length === 0) {
            console.log('‚ö†Ô∏è [CombinedService] No data found, creating basic meanings');
            this.createBasicMeanings(result, word);
        }

        console.log(`üéØ [CombinedService] Final: ${result.translations.length} translations, ${result.meanings.length} meanings`);
        
        // ‚úÖ –í–ê–ñ–ù–û: –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –∫–∞–∂–¥—ã–π –ø–µ—Ä–µ–≤–æ–¥ –∏–º–µ–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        this.ensureTranslationMeaningMatch(result);
        
        return result;
    }

    async getYandexData(word) {
        try {
            const response = await axios.get('https://dictionary.yandex.net/api/v1/dicservice.json/lookup', {
                params: {
                    key: process.env.YANDEX_DICTIONARY_API_KEY,
                    lang: 'en-ru',
                    text: word,
                    ui: 'ru'
                },
                timeout: 10000
            });

            return this.processYandexResponse(response.data, word);
            
        } catch (error) {
            throw new Error(`Yandex: ${error.message}`);
        }
    }

    processYandexResponse(data, word) {
        const result = {
            word: word,
            transcription: '',
            translations: [],
            yandexMeanings: []
        };

        if (!data.def || data.def.length === 0) {
            return result;
        }

        // ‚úÖ –¢–†–ê–ù–°–ö–†–ò–ü–¶–ò–Ø –∏–∑ –Ø–Ω–¥–µ–∫—Å
        if (data.def[0].ts) {
            result.transcription = `/${data.def[0].ts}/`;
        }

        // ‚úÖ –ò–ó–í–õ–ï–ö–ê–ï–ú –ü–ï–†–ï–í–û–î–´ –∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–Ω–∞—á–µ–Ω–∏–π
        data.def.forEach((definition, defIndex) => {
            if (definition.tr && Array.isArray(definition.tr)) {
                definition.tr.forEach((translation, transIndex) => {
                    if (translation.text && this.isRussianText(translation.text)) {
                        const russianTranslation = translation.text.trim();
                        
                        if (!result.translations.includes(russianTranslation)) {
                            result.translations.push(russianTranslation);
                        }

                        // ‚úÖ –°–û–•–†–ê–ù–Ø–ï–ú –î–ê–ù–ù–´–ï –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π
                        result.yandexMeanings.push({
                            translation: russianTranslation, // —Ä—É—Å—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥
                            pos: translation.pos || definition.pos,
                            syn: translation.syn ? translation.syn.map(s => s.text) : [],
                            mean: translation.mean ? translation.mean.map(m => m.text) : [],
                            definition: definition // –∏—Å—Ö–æ–¥–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
                        });
                    }
                });
            }
        });

        return result;
    }

    createMeaningsFromYandex(result, yandexData) {
        if (!yandexData || !yandexData.yandexMeanings || yandexData.yandexMeanings.length === 0) {
            return;
        }

        console.log(`üîÑ [CombinedService] Creating meanings from Yandex`);
        
        // ‚úÖ –°–û–ó–î–ê–ï–ú –ó–ù–ê–ß–ï–ù–ò–Ø - –ö–ê–ñ–î–û–ú–£ –ü–ï–†–ï–í–û–î–£ –°–û–û–¢–í–ï–¢–°–¢–í–£–ï–¢ –°–í–û–ï –ó–ù–ê–ß–ï–ù–ò–ï
        yandexData.yandexMeanings.forEach((yandexMeaning, index) => {
            const englishDefinition = this.generateAccurateEnglishDefinition(result.word, yandexMeaning);
            
            const detailedMeaning = {
                id: `yd_${index}`,
                translation: yandexMeaning.translation, // —Ä—É—Å—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥
                englishDefinition: englishDefinition,   // –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                englishWord: result.word,
                partOfSpeech: this.translatePOS(yandexMeaning.pos) || 'unknown',
                example: '',
                source: 'Yandex'
            };
            
            result.meanings.push(detailedMeaning);
        });

        console.log(`‚úÖ [CombinedService] Created ${result.meanings.length} meanings from Yandex`);
    }

    generateAccurateEnglishDefinition(word, yandexMeaning) {
        // ‚úÖ –°–û–ó–î–ê–ï–ú –¢–û–ß–ù–û–ï –ê–ù–ì–õ–ò–ô–°–ö–û–ï –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ù–ê –û–°–ù–û–í–ï –ü–ï–†–ï–í–û–î–ê
        
        const translation = yandexMeaning.translation.toLowerCase();
        
        // ‚úÖ –°–ü–ï–¶–ò–§–ò–ß–ù–´–ï –û–ü–†–ï–î–ï–õ–ï–ù–ò–Ø –î–õ–Ø –†–ê–ó–ù–´–• –ü–ï–†–ï–í–û–î–û–í
        const definitionMap = {
            // –î–ª—è —Å–ª–æ–≤–∞ "ship"
            '–∫–æ—Ä–∞–±–ª—å': `a large watercraft for sea transport`,
            '—Å—É–¥–Ω–æ': `a vessel for navigation on water`,
            '–æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å': `to send or transport by ship`,
            '–æ—Ç–≥—Ä—É–∂–∞—Ç—å': `to load and send goods for transport`,
            '–æ—Ç–≥—Ä—É–∂–∞—Ç—å—Å—è': `to be loaded onto a ship for transport`,
            '—Å—É–¥–æ–≤–æ–π': `relating to or belonging to a ship`,
            
            // –î–ª—è —Å–ª–æ–≤–∞ "run"  
            '–±–µ–∂–∞—Ç—å': `to move quickly using one's legs`,
            '—É–ø—Ä–∞–≤–ª—è—Ç—å': `to operate or be in charge of`,
            '—Ä–∞–±–æ—Ç–∞—Ç—å': `to function or operate`,
            '–∑–∞–ø—É—Å–∫–∞—Ç—å': `to start or initiate operation`,
            '—Ç–µ—á—å': `to flow in a stream`,
            
            // –û–±—â–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
            '—Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–µ': `${word} (noun)`,
            '–≥–ª–∞–≥–æ–ª': `to ${word} (verb)`,
            '–ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω–æ–µ': `${word} (adjective)`
        };

        // ‚úÖ –ò—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
        for (const [key, definition] of Object.entries(definitionMap)) {
            if (translation.includes(key)) {
                return definition;
            }
        }

        // ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –æ—Ç—Ç–µ–Ω–∫–∏ –∑–Ω–∞—á–µ–Ω–∏–π –∏–∑ –Ø–Ω–¥–µ–∫—Å
        if (yandexMeaning.mean && yandexMeaning.mean.length > 0) {
            return `${word} (${yandexMeaning.mean.join(', ')})`;
        }

        // ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–Ω–æ–Ω–∏–º—ã
        if (yandexMeaning.syn && yandexMeaning.syn.length > 0) {
            return `${word} ‚Üí ${yandexMeaning.syn.join(', ')}`;
        }

        // ‚úÖ –ë–∞–∑–æ–≤–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
        return `${word} - ${yandexMeaning.translation}`;
    }

    translatePOS(englishPOS) {
        const posMap = {
            'noun': '—Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–µ',
            'verb': '–≥–ª–∞–≥–æ–ª',
            'adjective': '–ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω–æ–µ',
            'adverb': '–Ω–∞—Ä–µ—á–∏–µ',
            'pronoun': '–º–µ—Å—Ç–æ–∏–º–µ–Ω–∏–µ',
            'preposition': '–ø—Ä–µ–¥–ª–æ–≥',
            'conjunction': '—Å–æ—é–∑',
            'interjection': '–º–µ–∂–¥–æ–º–µ—Ç–∏–µ'
        };
        return posMap[englishPOS] || englishPOS;
    }

    async getFreeDictionaryData(word) {
        try {
            const response = await axios.get(
                `https://api.dictionaryapi.dev/api/v2/entries/en/${encodeURIComponent(word)}`,
                { timeout: 5000 }
            );

            return this.processFreeDictionaryResponse(response.data, word);
            
        } catch (error) {
            throw new Error(`FreeDictionary: ${error.message}`);
        }
    }

    processFreeDictionaryResponse(data, word) {
        const result = {
            word: word,
            transcription: '',
            audioUrl: `https://translate.google.com/translate_tts?ie=UTF-8&q=${encodeURIComponent(word)}&tl=en-gb&client=tw-ob`,
            meanings: []
        };

        if (!Array.isArray(data) || data.length === 0) {
            return result;
        }

        const entry = data[0];
        
        if (entry.phonetic) {
            result.transcription = `/${entry.phonetic}/`;
        }

        if (entry.phonetics && entry.phonetics.length > 0) {
            const audioPhonetic = entry.phonetics.find(p => p.audio && p.audio.length > 0);
            if (audioPhonetic && audioPhonetic.audio) {
                result.audioUrl = audioPhonetic.audio;
            }
        }

        let meaningId = 0;
        
        if (entry.meanings && Array.isArray(entry.meanings)) {
            entry.meanings.forEach((meaning, meaningIndex) => {
                const partOfSpeech = meaning.partOfSpeech || 'unknown';
                
                if (meaning.definitions && Array.isArray(meaning.definitions)) {
                    meaning.definitions.forEach((definition, defIndex) => {
                        meaningId++;
                        
                        if (definition.definition) {
                            const detailedMeaning = {
                                id: `fd_${meaningId}`,
                                englishDefinition: definition.definition,
                                englishWord: word,
                                partOfSpeech: partOfSpeech,
                                example: definition.example || '',
                                translation: '', // –±—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –ø–æ–∑–∂–µ
                                source: 'FreeDictionary'
                            };
                            
                            result.meanings.push(detailedMeaning);
                        }
                    });
                }
            });
        }

        return result;
    }

    createTranslationsForFreeDict(result) {
        console.log(`üîÑ [CombinedService] Creating translations for FreeDict meanings`);
        
        // ‚úÖ –°–û–ó–î–ê–ï–ú –ü–ï–†–ï–í–û–î–´ –î–õ–Ø –ö–ê–ñ–î–û–ì–û –ó–ù–ê–ß–ï–ù–ò–Ø FREEDICT
        const baseTranslations = ['–æ—Å–Ω–æ–≤–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ', '–∫–ª—é—á–µ–≤–æ–π —Å–º—ã—Å–ª', '–≤–∞–∂–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ', '–≥–ª–∞–≤–Ω—ã–π –∞—Å–ø–µ–∫—Ç'];
        
        result.meanings.forEach((meaning, index) => {
            const translationIndex = index % baseTranslations.length;
            meaning.translation = baseTranslations[translationIndex];
        });

        // ‚úÖ –û–ë–ù–û–í–õ–Ø–ï–ú –°–ü–ò–°–û–ö –ü–ï–†–ï–í–û–î–û–í
        result.translations = result.meanings.map(m => m.translation).filter((value, index, self) => 
            self.indexOf(value) === index
        );
    }

    createBasicMeanings(result, word) {
        console.log(`üîÑ [CombinedService] Creating basic meanings`);
        
        const basicMeanings = [
            { translation: '–æ—Å–Ω–æ–≤–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ', english: 'primary meaning' },
            { translation: '–∫–ª—é—á–µ–≤–æ–π —Å–º—ã—Å–ª', english: 'key significance' },
            { translation: '–≤–∞–∂–Ω—ã–π –∞—Å–ø–µ–∫—Ç', english: 'important aspect' }
        ];
        
        basicMeanings.forEach((meaning, index) => {
            result.meanings.push({
                id: `basic_${index}`,
                translation: meaning.translation,
                englishDefinition: `${word} - ${meaning.english}`,
                englishWord: word,
                partOfSpeech: 'noun',
                example: '',
                source: 'basic'
            });
            
            if (!result.translations.includes(meaning.translation)) {
                result.translations.push(meaning.translation);
            }
        });
    }

    ensureTranslationMeaningMatch(result) {
        console.log(`üîÑ [CombinedService] Ensuring translation-meaning match`);
        
        // ‚úÖ –£–ë–ï–ñ–î–ê–ï–ú–°–Ø, –ß–¢–û –ö–ê–ñ–î–û–ú–£ –ü–ï–†–ï–í–û–î–£ –°–û–û–¢–í–ï–¢–°–¢–í–£–ï–¢ –ó–ù–ê–ß–ï–ù–ò–ï
        const usedTranslations = new Set();
        
        result.meanings.forEach(meaning => {
            usedTranslations.add(meaning.translation);
        });

        // ‚úÖ –î–û–ë–ê–í–õ–Ø–ï–ú –û–¢–°–£–¢–°–¢–í–£–Æ–©–ò–ï –ó–ù–ê–ß–ï–ù–ò–Ø –î–õ–Ø –ü–ï–†–ï–í–û–î–û–í
        result.translations.forEach(translation => {
            if (!usedTranslations.has(translation)) {
                console.log(`‚ö†Ô∏è [CombinedService] Adding missing meaning for translation: "${translation}"`);
                
                result.meanings.push({
                    id: `missing_${result.meanings.length}`,
                    translation: translation,
                    englishDefinition: `${result.word} - ${translation}`,
                    englishWord: result.word,
                    partOfSpeech: 'unknown',
                    example: '',
                    source: 'auto'
                });
            }
        });

        // ‚úÖ –£–î–ê–õ–Ø–ï–ú –î–£–ë–õ–ò–ö–ê–¢–´ –ü–ï–†–ï–í–û–î–û–í
        result.translations = [...new Set(result.translations)];
    }

    isRussianText(text) {
        return /[–∞-—è–ê-–Ø]/.test(text);
    }
}
