import axios from 'axios';

class CambridgeDictionaryService {
    constructor() {
        this.baseUrl = 'https://dictionary.cambridge.org/dictionary/english';
    }

    async getWordData(word) {
        try {
            console.log(`üîç [Cambridge] –ü–æ–∏—Å–∫ —Å–ª–æ–≤–∞: "${word}"`);
            
            const response = await axios.get(`${this.baseUrl}/${encodeURIComponent(word.toLowerCase())}`, {
                headers: {
                    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
                    'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
                    'Accept-Language': 'en-US,en;q=0.5',
                    'Accept-Encoding': 'gzip, deflate, br',
                    'Connection': 'keep-alive',
                },
                timeout: 15000,
            });

            return this.parseCambridgeHTML(response.data, word);
            
        } catch (error) {
            console.error(`‚ùå [Cambridge] –û—à–∏–±–∫–∞:`, error.message);
            return { word, meanings: [] };
        }
    }

    parseCambridgeHTML(html, word) {
        const result = {
            word: word,
            meanings: []
        };

        console.log(`üìñ [Cambridge] –ü–∞—Ä—Å–∏–Ω–≥ HTML –¥–ª—è: "${word}"`);

        try {
            // üîß –û–°–ù–û–í–ù–û–ô –ü–ê–†–°–ò–ù–ì - –∏—â–µ–º –±–ª–æ–∫–∏ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è–º–∏
            const definitionBlocks = html.match(/<div class="def-block ddef_block[^>]*>[\s\S]*?<\/div><\/div>/g);
            
            if (definitionBlocks) {
                console.log(`üéØ –ù–∞–π–¥–µ–Ω–æ –±–ª–æ–∫–æ–≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π: ${definitionBlocks.length}`);
                
                definitionBlocks.forEach((block, blockIndex) => {
                    this.parseDefinitionBlock(block, word, blockIndex, result);
                });
            }

            // üîß –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–´–ô –ü–ê–†–°–ò–ù–ì - –µ—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –±–ª–æ–∫–∏
            if (result.meanings.length === 0) {
                console.log('üîß –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥...');
                this.alternativeParse(html, word, result);
            }

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞:', error);
        }

        console.log(`‚úÖ [Cambridge] –ù–∞–π–¥–µ–Ω–æ ${result.meanings.length} –ø–µ—Ä–µ–≤–æ–¥–æ–≤`);
        
        // –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        result.meanings.forEach((meaning, index) => {
            console.log(`   ${index + 1}. "${meaning.translation}" - ${meaning.englishDefinition.substring(0, 50)}...`);
        });
        
        return result;
    }

    parseDefinitionBlock(block, word, blockIndex, result) {
        try {
            // üîç –ò–©–ï–ú –ü–ï–†–ï–í–û–î (—Ä—É—Å—Å–∫–∏–π)
            const translationMatch = block.match(/<span class="trans dtrans dtrans-se[^>]*>([^<]+)<\/span>/);
            if (!translationMatch) {
                console.log(`   ‚ùå –í –±–ª–æ–∫–µ ${blockIndex} –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–µ—Ä–µ–≤–æ–¥`);
                return;
            }

            const translation = translationMatch[1].trim();
            console.log(`   ‚úÖ –ù–∞–π–¥–µ–Ω –ø–µ—Ä–µ–≤–æ–¥: "${translation}"`);

            // üîç –ò–©–ï–ú –ê–ù–ì–õ–ò–ô–°–ö–û–ï –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï
            const definitionMatch = block.match(/<div class="def ddef_d db">([^<]+)<\/div>/);
            const englishDefinition = definitionMatch ? definitionMatch[1].trim() : `Definition for ${word}`;

            // üîç –ò–©–ï–ú –ß–ê–°–¢–¨ –†–ï–ß–ò
            const posMatch = block.match(/<span class="pos dpos">([^<]+)<\/span>/);
            const partOfSpeech = posMatch ? this.translatePOS(posMatch[1].trim()) : 'unknown';

            // üîç –ò–©–ï–ú –ü–†–ò–ú–ï–†–´
            const examples = [];
            const exampleMatches = block.match(/<span class="eg deg">([^<]+)<\/span>/g);
            if (exampleMatches) {
                exampleMatches.forEach(exampleMatch => {
                    const exampleText = exampleMatch.replace(/<[^>]+>/g, '').trim();
                    if (exampleText) {
                        examples.push({
                            english: exampleText,
                            russian: ''
                        });
                    }
                });
            }

            // üîç –ò–©–ï–ú –£–†–û–í–ï–ù–¨ –°–õ–û–í–ê (A1, B2, etc)
            const levelMatch = block.match(/<span class="epp-xref dxref[^>]*>([^<]+)<\/span>/);
            const level = levelMatch ? levelMatch[1].trim() : '';

            const meaning = {
                id: `cam_${blockIndex}_${Date.now()}`,
                translation: translation,
                englishDefinition: englishDefinition,
                englishWord: word,
                partOfSpeech: partOfSpeech,
                examples: examples,
                synonyms: [],
                level: level,
                source: 'Cambridge Dictionary'
            };

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º
            const isDuplicate = result.meanings.some(m => 
                m.translation === meaning.translation && 
                m.englishDefinition === meaning.englishDefinition
            );

            if (!isDuplicate) {
                result.meanings.push(meaning);
                console.log(`   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ: "${translation}"`);
            } else {
                console.log(`   ‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω –¥—É–±–ª–∏–∫–∞—Ç: "${translation}"`);
            }

        } catch (error) {
            console.error(`   ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –±–ª–æ–∫–∞ ${blockIndex}:`, error.message);
        }
    }

    alternativeParse(html, word, result) {
        try {
            // üîß –ü–†–û–°–¢–û–ô –ü–û–ò–°–ö –ü–û –†–ï–ì–£–õ–Ø–†–ù–´–ú –í–´–†–ê–ñ–ï–ù–ò–Ø–ú
            console.log('üîß –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ –ø–µ—Ä–µ–≤–æ–¥–æ–≤...');
            
            // –ò—â–µ–º –≤—Å–µ —Ä—É—Å—Å–∫–∏–µ –ø–µ—Ä–µ–≤–æ–¥—ã
            const allTranslations = html.match(/<span[^>]*lang="ru"[^>]*>([^<]+)<\/span>/g) || 
                                   html.match(/<span[^>]*class="[^"]*trans[^"]*"[^>]*>([^<]+)<\/span>/g);
            
            if (allTranslations) {
                allTranslations.forEach((match, index) => {
                    const translation = match.replace(/<[^>]+>/g, '').trim();
                    
                    // –§–∏–ª—å—Ç—Ä—É–µ–º –º—É—Å–æ—Ä
                    if (translation && 
                        translation.length > 2 && 
                        !translation.includes('{') && 
                        !translation.includes('}') &&
                        !translation.includes('Cambridge') &&
                        /[–∞-—è–ê-–Ø]/.test(translation)) {
                        
                        const meaning = {
                            id: `alt_${index}_${Date.now()}`,
                            translation: translation,
                            englishDefinition: `Alternative definition for ${word}`,
                            englishWord: word,
                            partOfSpeech: 'unknown',
                            examples: [],
                            synonyms: [],
                            source: 'Cambridge Dictionary (Alt)'
                        };
                        
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
                        if (!result.meanings.some(m => m.translation === translation)) {
                            result.meanings.push(meaning);
                            console.log(`   ‚úÖ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥: "${translation}"`);
                        }
                    }
                });
            }

            // üîß –ü–û–ò–°–ö –í JSON-LD —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
            const jsonLdMatch = html.match(/<script type="application\/ld\+json">([\s\S]*?)<\/script>/);
            if (jsonLdMatch) {
                try {
                    const jsonData = JSON.parse(jsonLdMatch[1]);
                    this.parseJsonLd(jsonData, word, result);
                } catch (jsonError) {
                    console.log('   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON-LD');
                }
            }

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞:', error);
        }
    }

    parseJsonLd(jsonData, word, result) {
        try {
            if (jsonData.description) {
                const meaning = {
                    id: `json_${Date.now()}`,
                    translation: this.generateTranslationFromDefinition(jsonData.description),
                    englishDefinition: jsonData.description,
                    englishWord: word,
                    partOfSpeech: 'unknown',
                    examples: [],
                    synonyms: [],
                    source: 'Cambridge Dictionary (JSON)'
                };
                
                if (!result.meanings.some(m => m.translation === meaning.translation)) {
                    result.meanings.push(meaning);
                    console.log(`   ‚úÖ JSON –ø–µ—Ä–µ–≤–æ–¥: "${meaning.translation}"`);
                }
            }
        } catch (error) {
            console.log('   ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON-LD');
        }
    }

    generateTranslationFromDefinition(definition) {
        const def = definition.toLowerCase();
        
        if (def.includes('enjoy') && def.includes('pleasure')) return '–ø–æ–ª—É—á–∞—Ç—å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ';
        if (def.includes('person who') || def.includes('someone who')) return '—á–µ–ª–æ–≤–µ–∫, –∫–æ—Ç–æ—Ä—ã–π';
        if (def.includes('something that') || def.includes('thing that')) return '—á—Ç–æ-—Ç–æ, —á—Ç–æ';
        if (def.includes('the ability to')) return '—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å';
        if (def.includes('the process of')) return '–ø—Ä–æ—Ü–µ—Å—Å';
        if (def.includes('the state of')) return '—Å–æ—Å—Ç–æ—è–Ω–∏–µ';
        if (def.includes('to make') || def.includes('to cause')) return '—Å–¥–µ–ª–∞—Ç—å';
        if (def.includes('to become')) return '—Å—Ç–∞—Ç—å';
        if (def.includes('having') || def.includes('with')) return '–∏–º–µ—é—â–∏–π';
        if (def.includes('relating to')) return '–æ—Ç–Ω–æ—Å—è—â–∏–π—Å—è –∫';
        
        return '–æ—Å–Ω–æ–≤–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ';
    }

    translatePOS(englishPOS) {
        const posMap = {
            'noun': '—Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–µ',
            'verb': '–≥–ª–∞–≥–æ–ª', 
            'adjective': '–ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω–æ–µ',
            'adverb': '–Ω–∞—Ä–µ—á–∏–µ',
            'pronoun': '–º–µ—Å—Ç–æ–∏–º–µ–Ω–∏–µ',
            'preposition': '–ø—Ä–µ–¥–ª–æ–≥',
            'conjunction': '—Å–æ—é–∑',
            'interjection': '–º–µ–∂–¥–æ–º–µ—Ç–∏–µ'
        };
        
        return posMap[englishPOS.toLowerCase()] || englishPOS;
    }
}

export { CambridgeDictionaryService };
