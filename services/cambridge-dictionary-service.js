import axios from 'axios';

// –î–ª—è Railway –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∞–∫–æ–π –∏–º–ø–æ—Ä—Ç
let cheerio;

class CambridgeDictionaryService {
    constructor() {
        this.baseUrl = 'https://dictionary.cambridge.org/dictionary/english';
        this.requestCount = 0;
        this.lastRequestTime = 0;
        
        // üîß –ù–ê–°–¢–†–û–ô–ö–ò –û–ë–•–û–î–ê –û–ì–†–ê–ù–ò–ß–ï–ù–ò–ô
        this.config = {
            minDelay: 3000,
            maxDelay: 8000,
            maxRetries: 2,
            timeout: 20000,
            userAgents: [
                'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
                'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
                'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36'
            ]
        };
    }

    // üîß –î–ò–ù–ê–ú–ò–ß–ï–°–ö–ê–Ø –ó–ê–ì–†–£–ó–ö–ê CHEERIO
    async loadCheerio() {
        if (!cheerio) {
            cheerio = (await import('cheerio')).default;
        }
        return cheerio;
    }

    async randomDelay() {
        const delay = Math.random() * (this.config.maxDelay - this.config.minDelay) + this.config.minDelay;
        console.log(`‚è≥ –ó–∞–¥–µ—Ä–∂–∫–∞: ${Math.round(delay)}ms`);
        await new Promise(resolve => setTimeout(resolve, delay));
    }

    getRandomUserAgent() {
        return this.config.userAgents[Math.floor(Math.random() * this.config.userAgents.length)];
    }

    async checkRateLimit() {
        const now = Date.now();
        const timeSinceLastRequest = now - this.lastRequestTime;
        
        if (timeSinceLastRequest < this.config.minDelay) {
            const waitTime = this.config.minDelay - timeSinceLastRequest;
            console.log(`üö¶ Rate limiting: –∂–¥–µ–º ${waitTime}ms`);
            await new Promise(resolve => setTimeout(resolve, waitTime));
        }
        
        this.lastRequestTime = Date.now();
        this.requestCount++;
    }

    async getWordData(word, retryCount = 0) {
        await this.checkRateLimit();
        
        try {
            console.log(`üîç [Cambridge] –ü–æ–∏—Å–∫ —Å–ª–æ–≤–∞: "${word}" (–ø–æ–ø—ã—Ç–∫–∞ ${retryCount + 1}/${this.config.maxRetries})`);
            
            const response = await axios.get(`${this.baseUrl}/${encodeURIComponent(word.toLowerCase())}`, {
                headers: {
                    'User-Agent': this.getRandomUserAgent(),
                    'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
                    'Accept-Language': 'en-US,en;q=0.9,ru;q=0.8',
                    'Accept-Encoding': 'gzip, deflate, br',
                    'Connection': 'keep-alive',
                    'DNT': '1',
                    'Upgrade-Insecure-Requests': '1',
                    'Sec-Fetch-Dest': 'document',
                    'Sec-Fetch-Mode': 'navigate',
                    'Sec-Fetch-Site': 'none',
                    'Cache-Control': 'max-age=0'
                },
                timeout: this.config.timeout,
                validateStatus: function (status) {
                    return status < 500; // –ü—Ä–∏–Ω–∏–º–∞–µ–º –≤—Å–µ —Å—Ç–∞—Ç—É—Å—ã –∫—Ä–æ–º–µ 5xx
                }
            });

            // –ó–∞–≥—Ä—É–∂–∞–µ–º cheerio
            const cheerio = await this.loadCheerio();
            const $ = cheerio.load(response.data);
            
            // üîß –ü–†–û–í–ï–†–ö–ê –ù–ê –ë–õ–û–ö–ò–†–û–í–ö–£ –ò–õ–ò CAPTCHA
            if (this.isBlocked(response.data, $)) {
                console.log('‚ùå [Cambridge] –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞');
                throw new Error('Cambridge Dictionary –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –∑–∞–ø—Ä–æ—Å');
            }

            // üîß –ü–†–û–í–ï–†–ö–ê –ù–ê –°–£–©–ï–°–¢–í–û–í–ê–ù–ò–ï –°–õ–û–í–ê
            if (this.isWordNotFound(response.data, $)) {
                console.log('‚ùå [Cambridge] –°–ª–æ–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
                throw new Error('–°–ª–æ–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ Cambridge Dictionary');
            }

            console.log(`‚úÖ [Cambridge] –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è: "${word}"`);
            return this.parseCambridgeHTML(response.data, word, $);
            
        } catch (error) {
            console.error(`‚ùå [Cambridge] –û—à–∏–±–∫–∞ (–ø–æ–ø—ã—Ç–∫–∞ ${retryCount + 1}):`, error.message);
            
            if (this.shouldRetry(error) && retryCount < this.config.maxRetries - 1) {
                console.log(`üîÑ [Cambridge] –ü–æ–≤—Ç–æ—Ä –∑–∞–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ ${this.config.minDelay}ms...`);
                await this.randomDelay();
                return this.getWordData(word, retryCount + 1);
            }
            
            // üîß –í–û–ó–í–†–ê–©–ê–ï–ú –ó–ê–ì–õ–£–®–ö–£ –° –û–°–ù–û–í–ù–´–ú –ü–ï–†–ï–í–û–î–û–ú
            return this.getFallbackData(word, error.message);
        }
    }

    // üîß –ó–ê–ì–õ–£–®–ö–ê –ù–ê –°–õ–£–ß–ê–ô –û–®–ò–ë–ö–ò
    getFallbackData(word, errorMessage) {
        console.log(`üîß [Cambridge] –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –¥–∞–Ω–Ω—ã–µ –¥–ª—è: "${word}"`);
        
        const basicTranslations = {
            'hello': '–ø—Ä–∏–≤–µ—Ç',
            'world': '–º–∏—Ä',
            'book': '–∫–Ω–∏–≥–∞',
            'computer': '–∫–æ–º–ø—å—é—Ç–µ—Ä',
            'language': '—è–∑—ã–∫',
            'word': '—Å–ª–æ–≤–æ',
            'dictionary': '—Å–ª–æ–≤–∞—Ä—å',
            'translate': '–ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å',
            'learn': '—É—á–∏—Ç—å',
            'study': '–∏–∑—É—á–∞—Ç—å',
            'home': '–¥–æ–º',
            'work': '—Ä–∞–±–æ—Ç–∞',
            'time': '–≤—Ä–µ–º—è',
            'people': '–ª—é–¥–∏',
            'water': '–≤–æ–¥–∞',
            'food': '–µ–¥–∞',
            'good': '—Ö–æ—Ä–æ—à–∏–π',
            'bad': '–ø–ª–æ—Ö–æ–π',
            'big': '–±–æ–ª—å—à–æ–π',
            'small': '–º–∞–ª–µ–Ω—å–∫–∏–π',
            'new': '–Ω–æ–≤—ã–π',
            'old': '—Å—Ç–∞—Ä—ã–π'
        };

        const translation = basicTranslations[word.toLowerCase()] || '–æ—Å–Ω–æ–≤–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ';
        
        return {
            word: word,
            meanings: [
                {
                    id: 'fallback_1',
                    translation: translation,
                    englishDefinition: `The word "${word}" - basic definition`,
                    englishWord: word,
                    partOfSpeech: 'unknown',
                    examples: [
                        {
                            english: `This is an example sentence with the word "${word}".`,
                            russian: ''
                        },
                        {
                            english: `You can use "${word}" in different contexts.`,
                            russian: ''
                        }
                    ],
                    synonyms: [],
                    source: 'Fallback Dictionary'
                }
            ],
            transcription: '',
            audioUrl: '',
            source: 'Fallback Service',
            error: errorMessage
        };
    }

    // üîß –ü–†–û–í–ï–†–ö–ê –ù–ê –ë–õ–û–ö–ò–†–û–í–ö–£
    isBlocked(html, $) {
        const text = html.toLowerCase();
        return text.includes('captcha') || 
               text.includes('blocked') || 
               text.includes('robot') ||
               text.includes('access denied') ||
               text.includes('too many requests') ||
               text.includes('rate limit') ||
               $('.error-page').length > 0;
    }

    // üîß –ü–†–û–í–ï–†–ö–ê –ù–ê –ù–ï–ù–ê–ô–î–ï–ù–ù–û–ï –°–õ–û–í–û
    isWordNotFound(html, $) {
        const text = html.toLowerCase();
        return text.includes('not found') || 
               text.includes('no entries found') ||
               text.includes('no results') ||
               $('.cdo-search__no-results').length > 0 ||
               $('.empty-page').length > 0;
    }

    // üîß –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ù–£–ñ–ù–û –õ–ò –ü–û–í–¢–û–†–Ø–¢–¨ –ó–ê–ü–†–û–°
    shouldRetry(error) {
        const retryableErrors = [
            'ECONNRESET', 'ETIMEDOUT', 'ECONNABORTED', 'ENOTFOUND',
            'timeout', 'Network Error', 'blocked', 'CAPTCHA'
        ];
        
        return retryableErrors.some(retryError => 
            error.message.includes(retryError) || 
            error.code === retryError
        );
    }

    // üîß –£–ü–†–û–©–ï–ù–ù–´–ô –ü–ê–†–°–ò–ù–ì HTML
    async parseCambridgeHTML(html, word, $) {
        const result = {
            word: word,
            meanings: [],
            transcription: '',
            audioUrl: '',
            source: 'Cambridge Dictionary'
        };

        console.log(`üìñ [Cambridge] –ü–∞—Ä—Å–∏–Ω–≥ HTML –¥–ª—è: "${word}"`);

        try {
            // ‚úÖ –¢–†–ê–ù–°–ö–†–ò–ü–¶–ò–Ø
            const pronunciation = $('.ipa, .pron, [pronunciation]').first().text();
            if (pronunciation) {
                result.transcription = `/${pronunciation.trim()}/`;
                console.log(`üî§ [Cambridge] –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è: ${result.transcription}`);
            }

            // ‚úÖ –ê–£–î–ò–û –ü–†–û–ò–ó–ù–û–®–ï–ù–ò–ï
            const audioElement = $('.audio_play_button, [data-src-mp3], .pronunciation audio source').first();
            if (audioElement.length) {
                let audioPath = audioElement.attr('data-src-mp3') || audioElement.attr('src');
                if (audioPath && !audioPath.startsWith('http')) {
                    audioPath = `https://dictionary.cambridge.org${audioPath}`;
                }
                result.audioUrl = audioPath;
                console.log(`üéµ [Cambridge] –ê—É–¥–∏–æ URL: ${result.audioUrl}`);
            }

            // ‚úÖ –£–ü–†–û–©–ï–ù–ù–´–ô –ü–ê–†–°–ò–ù–ì –û–ü–†–ï–î–ï–õ–ï–ù–ò–ô
            $('.def-block, .sense-body, .entry-body__el').each((entryIndex, entryElement) => {
                const $entry = $(entryElement);
                
                // –ò—â–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
                const definition = $entry.find('.def, .ddef_d, .trans, .sense-title').text().trim();
                if (!definition || definition.length < 5) return;

                console.log(`   üìù –ù–∞–π–¥–µ–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ: ${definition.substring(0, 60)}...`);

                // –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                const examples = [];
                $entry.find('.examp, .deg, .example').each((exIndex, exElement) => {
                    const example = $(exElement).text().trim();
                    if (example && example.length > 10) {
                        examples.push({
                            english: example,
                            russian: ''
                        });
                    }
                });

                // –ß–∞—Å—Ç—å —Ä–µ—á–∏
                const partOfSpeech = $entry.find('.pos, .dpos, .grammar').first().text().trim() || 'unknown';

                // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∑–Ω–∞—á–µ–Ω–∏—è
                const meaning = {
                    id: `cam_${entryIndex}_${Date.now()}`,
                    translation: this.generateTranslation(definition, word),
                    englishDefinition: definition,
                    englishWord: word,
                    partOfSpeech: this.translatePOS(partOfSpeech),
                    examples: examples.slice(0, 3), // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–º–µ—Ä–æ–≤
                    synonyms: [],
                    source: 'Cambridge Dictionary'
                };

                result.meanings.push(meaning);
            });

            // üîß –ï–°–õ–ò –û–ü–†–ï–î–ï–õ–ï–ù–ò–ô –ù–ï –ù–ê–ô–î–ï–ù–û, –ò–°–ü–û–õ–¨–ó–£–ï–ú –£–ü–†–û–©–ï–ù–ù–´–ô –ú–ï–¢–û–î
            if (result.meanings.length === 0) {
                console.log('üîß [Cambridge] –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥');
                this.simpleParse(html, word, $, result);
            }

        } catch (parseError) {
            console.error('‚ùå [Cambridge] –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞:', parseError);
            // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
            const fallback = this.getFallbackData(word, 'Parse error');
            result.meanings = fallback.meanings;
        }

        console.log(`‚úÖ [Cambridge] –†–∞—Å–ø–∞—Ä—à–µ–Ω–æ ${result.meanings.length} –∑–Ω–∞—á–µ–Ω–∏–π`);
        return result;
    }

    // üîß –£–ü–†–û–©–ï–ù–ù–´–ô –ü–ê–†–°–ò–ù–ì –î–õ–Ø –°–õ–û–ñ–ù–´–• –°–õ–£–ß–ê–ï–í
    simpleParse(html, word, $, result) {
        // –ò—â–µ–º –ª—é–±–æ–π —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ—Ö–æ–∂ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
        const text = $('body').text();
        const lines = text.split('\n').map(line => line.trim()).filter(line => 
            line.length > 20 && 
            line.length < 300 &&
            !line.includes('¬©') &&
            !line.includes('Cambridge') &&
            !line.includes('Privacy')
        );

        lines.slice(0, 5).forEach((line, index) => {
            if (line.toLowerCase().includes(word.toLowerCase())) {
                const meaning = {
                    id: `simple_${index}_${Date.now()}`,
                    translation: this.generateTranslation(line, word),
                    englishDefinition: line,
                    englishWord: word,
                    partOfSpeech: 'unknown',
                    examples: [
                        {
                            english: `Example usage of "${word}" in context.`,
                            russian: ''
                        }
                    ],
                    synonyms: [],
                    source: 'Cambridge Dictionary (Simple Parse)'
                };
                result.meanings.push(meaning);
            }
        });

        // –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–π, –¥–æ–±–∞–≤–ª—è–µ–º fallback
        if (result.meanings.length === 0) {
            const fallback = this.getFallbackData(word, 'No definitions found');
            result.meanings = fallback.meanings;
        }
    }

    // üîß –ì–ï–ù–ï–†–ê–¶–ò–Ø –ü–ï–†–ï–í–û–î–ê –ù–ê –û–°–ù–û–í–ï –û–ü–†–ï–î–ï–õ–ï–ù–ò–Ø
    generateTranslation(definition, word) {
        const definitionLower = definition.toLowerCase();
        const wordLower = word.toLowerCase();
        
        // –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        if (definitionLower.includes('person who') || definitionLower.includes('someone who')) {
            return '—á–µ–ª–æ–≤–µ–∫, –∫–æ—Ç–æ—Ä—ã–π';
        }
        if (definitionLower.includes('something that') || definitionLower.includes('thing that')) {
            return '—á—Ç–æ-—Ç–æ, —á—Ç–æ';
        }
        if (definitionLower.includes('the ability to') || definitionLower.includes('capacity to')) {
            return '—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å';
        }
        if (definitionLower.includes('the process of') || definitionLower.includes('act of')) {
            return '–ø—Ä–æ—Ü–µ—Å—Å';
        }
        if (definitionLower.includes('the state of') || definitionLower.includes('condition of')) {
            return '—Å–æ—Å—Ç–æ—è–Ω–∏–µ';
        }
        if (definitionLower.includes('to make') || definitionLower.includes('to cause')) {
            return '—Å–¥–µ–ª–∞—Ç—å, –∑–∞—Å—Ç–∞–≤–∏—Ç—å';
        }
        if (definitionLower.includes('to become') || definitionLower.includes('to turn into')) {
            return '—Å—Ç–∞—Ç—å, –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å—Å—è';
        }
        if (definitionLower.includes('having') || definitionLower.includes('with')) {
            return '–∏–º–µ—é—â–∏–π, –æ–±–ª–∞–¥–∞—é—â–∏–π';
        }
        if (definitionLower.includes('relating to') || definitionLower.includes('connected with')) {
            return '–æ—Ç–Ω–æ—Å—è—â–∏–π—Å—è –∫';
        }
        
        // –ë–∞–∑–æ–≤—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã –¥–ª—è common words
        const commonWords = {
            'hello': '–ø—Ä–∏–≤–µ—Ç',
            'world': '–º–∏—Ä',
            'book': '–∫–Ω–∏–≥–∞',
            'computer': '–∫–æ–º–ø—å—é—Ç–µ—Ä',
            'language': '—è–∑—ã–∫'
        };
        
        return commonWords[wordLower] || '–æ—Å–Ω–æ–≤–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ';
    }

    translatePOS(cambridgePOS) {
        const posMap = {
            'noun': '—Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–µ',
            'verb': '–≥–ª–∞–≥–æ–ª',
            'adjective': '–ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω–æ–µ',
            'adverb': '–Ω–∞—Ä–µ—á–∏–µ',
            'pronoun': '–º–µ—Å—Ç–æ–∏–º–µ–Ω–∏–µ',
            'preposition': '–ø—Ä–µ–¥–ª–æ–≥',
            'conjunction': '—Å–æ—é–∑',
            'interjection': '–º–µ–∂–¥–æ–º–µ—Ç–∏–µ'
        };
        
        const posLower = cambridgePOS.toLowerCase();
        for (const [en, ru] of Object.entries(posMap)) {
            if (posLower.includes(en)) {
                return ru;
            }
        }
        
        return cambridgePOS;
    }

    resetCounters() {
        this.requestCount = 0;
        this.lastRequestTime = 0;
        console.log('üîÑ [Cambridge] –°—á–µ—Ç—á–∏–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ —Å–±—Ä–æ—à–µ–Ω—ã');
    }
}

export { CambridgeDictionaryService };
