// services/cambridge-dictionary-service.js
import axios from 'axios';
import * as cheerio from 'cheerio';

export class CambridgeDictionaryService {
  constructor() {
    this.baseUrl = 'https://dictionary.cambridge.org/dictionary/english-russian';
    
    // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    this.cache = new Map();
    this.CACHE_TTL = 60 * 60 * 1000; // 1 —á–∞—Å –¥–ª—è —Å–ª–æ–≤–∞—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    
    // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    this.concurrentRequests = 0;
    this.maxConcurrentRequests = 2; // –£–º–µ–Ω—å—à–µ–Ω–æ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏
    
    // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ HTTP –∫–ª–∏–µ–Ω—Ç–∞
    this.http = axios.create({
      headers: {
        'User-Agent':
          'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/124.0.0.0 Safari/537.36',
        'Accept':
          'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8',
        'Accept-Language': 'en-US,en;q=0.9,ru;q=0.7',
        'Accept-Encoding': 'gzip, deflate, br',
        'Connection': 'keep-alive',
        'Cache-Control': 'no-cache',
        'DNT': '1'
      },
      timeout: 10000, // –£–º–µ–Ω—å—à–µ–Ω–æ —Å 15 –¥–æ 10 —Å–µ–∫—É–Ω–¥
      withCredentials: true,
      maxRedirects: 3, // –£–º–µ–Ω—å—à–µ–Ω–æ —Å 5
      validateStatus: s => s >= 200 && s < 400,
      // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏
      retry: 1,
      retryDelay: 1000
    });

    // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å–ª–æ–≤
    this.problemWords = new Set();
    
    // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –∑–∞–ø—É—Å–∫ –æ—á–∏—Å—Ç–∫–∏ –∫–µ—à–∞
    this.startCacheCleanup();
    
    console.log('üîß CambridgeDictionaryService initialized with optimizations');
  }

  // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Å TTL
  async getCachedWordData(word) {
    const cacheKey = `cam_${word.toLowerCase().trim()}`;
    const cached = this.cache.get(cacheKey);
    
    if (cached && Date.now() - cached.timestamp < this.CACHE_TTL) {
      console.log(`üìö [Cambridge] Cache HIT for: "${word}"`);
      return cached.data;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫
    if (this.problemWords.has(word.toLowerCase())) {
      console.log(`üö´ [Cambridge] Skipping blacklisted word: "${word}"`);
      return { word, meanings: [], audio: null };
    }
    
    console.log(`üîç [Cambridge] Cache MISS for: "${word}"`);
    const data = await this.fetchWordData(word);
    
    // –ö–µ—à–∏—Ä—É–µ–º –¥–∞–∂–µ –ø—É—Å—Ç—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    this.cache.set(cacheKey, {
      data: data,
      timestamp: Date.now()
    });
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫–µ—à–∞
    if (this.cache.size > 500) {
      const firstKey = this.cache.keys().next().value;
      this.cache.delete(firstKey);
    }
    
    return data;
  }

  // –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
  async getWordData(word) {
    return this.getCachedWordData(word);
  }

  // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏
  async fetchWordData(word) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    if (this.concurrentRequests >= this.maxConcurrentRequests) {
      console.log(`‚è≥ [Cambridge] Rate limit reached, skipping: "${word}"`);
      return { word, meanings: [], audio: null };
    }

    this.concurrentRequests++;
    
    try {
      const url = `${this.baseUrl}/${encodeURIComponent(word.trim().toLowerCase())}`;
      console.log(`üåê [Cambridge] Fetching: "${word}"`);
      
      const response = await Promise.race([
        this.http.get(url),
        new Promise((_, reject) => 
          setTimeout(() => reject(new Error('Cambridge API timeout')), 10000)
        )
      ]);

      console.log(`‚úÖ [Cambridge] Success: "${word}" - Status: ${response.status}`);
      return this._parse(response.data, word);
      
    } catch (error) {
      console.error(`‚ùå [Cambridge] ERROR for "${word}":`, error.message);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–ª–æ–≤–∞ –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫
      if (error.message.includes('timeout') || error.message.includes('ENOTFOUND')) {
        this.problemWords.add(word.toLowerCase());
        console.log(`üö´ [Cambridge] Added to blacklist: "${word}"`);
      }
      
      return { word, meanings: [], audio: null };
    } finally {
      this.concurrentRequests--;
    }
  }

  // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥
  _parse(html, word) {
    try {
      const $ = cheerio.load(html);
      const meanings = [];
      const seen = new Set();

      // –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ 404 –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
      const noResults = $('.empty-page, .dictionary-nodata, .cdo-search__no-results').length > 0;
      if (noResults) {
        console.log(`‚ùå [Cambridge] No results found for: "${word}"`);
        this.problemWords.add(word.toLowerCase());
        return { word, meanings: [], audio: null };
      }

      // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
      $('.entry-body__el').slice(0, 5).each((_, entry) => {
        const $entry = $(entry);

        const partOfSpeech =
          $entry.find('.posgram .pos, .pos.dpos').first().text().trim() || 'unknown';
        
        const level =
          $entry.find('.epp-xref, .def-block .epp-xref').first().text().trim() || '';

        // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ def-block
        $entry.find('.def-block.ddef_block').slice(0, 3).each((__, defBlock) => {
          const $block = $(defBlock);
          const englishDefinition = $block.find('.def.ddef_d').first().text().trim();

          const blockTranslations = $block
            .find('.trans.dtrans, span.trans.dtrans.dtrans-se')
            .map((___, el) => $(el).text().trim())
            .get()
            .filter(Boolean)
            .slice(0, 5); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–≤–æ–¥–æ–≤

          // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–º–µ—Ä–æ–≤
          const examples = $block
            .find('.examp .eg')
            .slice(0, 2)
            .map((___, ex) => ({ 
              english: $(ex).text().trim(), 
              russian: '' 
            }))
            .get();

          if (blockTranslations.length === 0 && !englishDefinition) return;

          if (blockTranslations.length) {
            blockTranslations.forEach(tr => {
              const translation = tr.trim();
              const key = `${translation}||${englishDefinition}`;
              if (translation && !seen.has(key)) {
                meanings.push({
                  id: `cam_${Date.now()}_${meanings.length}`,
                  translation,
                  englishDefinition: englishDefinition || `Definition for ${word}`,
                  englishWord: word,
                  partOfSpeech,
                  examples,
                  synonyms: [],
                  level,
                  source: 'Cambridge Dictionary'
                });
                seen.add(key);
              }
            });
          } else if (englishDefinition) {
            const key = `__no_ru__||${englishDefinition}`;
            if (!seen.has(key)) {
              meanings.push({
                id: `cam_${Date.now()}_${meanings.length}`,
                translation: '',
                englishDefinition,
                englishWord: word,
                partOfSpeech,
                examples,
                synonyms: [],
                level,
                source: 'Cambridge Dictionary'
              });
              seen.add(key);
            }
          }
        });
      });

      // –ë—Ä–∏—Ç–∞–Ω—Å–∫–æ–µ –∞—É–¥–∏–æ
      let ukAudio = $('.uk.dpron-i .audio_play_button[data-src-mp3]').attr('data-src-mp3')
        || $('.dpron-i .audio_play_button[data-src-mp3]').first().attr('data-src-mp3')
        || null;

      // Cambridge –∏–Ω–æ–≥–¥–∞ –æ—Ç–¥–∞—ë—Ç –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å ‚Äî –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º
      if (ukAudio) {
        if (ukAudio.startsWith('//')) ukAudio = `https:${ukAudio}`;
        if (ukAudio.startsWith('/')) ukAudio = `https://dictionary.cambridge.org${ukAudio}`;
      }

      console.log(`üìä [Cambridge] Parsed "${word}": ${meanings.length} meanings, audio: ${ukAudio ? 'YES' : 'NO'}`);
      
      return { word, meanings, audio: ukAudio };
      
    } catch (parseError) {
      console.error(`‚ùå [Cambridge] Parse ERROR for "${word}":`, parseError.message);
      return { word, meanings: [], audio: null };
    }
  }

  // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –º–∞—Å—Å–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å —Å–ª–æ–≤ (–¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è)
  async getMultipleWordsData(words) {
    const results = {};
    const BATCH_SIZE = 3; // –ú–∞–ª–µ–Ω—å–∫–∏–µ –±–∞—Ç—á–∏ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏
    const DELAY_BETWEEN_BATCHES = 2000; // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
    
    console.log(`üîÑ [Cambridge] Batch processing ${words.length} words`);
    
    for (let i = 0; i < words.length; i += BATCH_SIZE) {
      const batch = words.slice(i, i + BATCH_SIZE);
      console.log(`üì¶ [Cambridge] Processing batch ${Math.floor(i/BATCH_SIZE) + 1}`);
      
      const batchPromises = batch.map(word => 
        this.getWordData(word).then(data => {
          results[word] = data;
          return data;
        })
      );
      
      await Promise.allSettled(batchPromises);
      
      // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
      if (i + BATCH_SIZE < words.length) {
        await new Promise(resolve => setTimeout(resolve, DELAY_BETWEEN_BATCHES));
      }
    }
    
    console.log(`‚úÖ [Cambridge] Batch processing completed: ${Object.keys(results).length} words`);
    return results;
  }

  // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Å–ª–æ–≤
  async preloadCommonWords(commonWords = []) {
    if (commonWords.length === 0) return;
    
    console.log(`üîÆ [Cambridge] Preloading ${commonWords.length} common words`);
    
    const preloadResults = {};
    for (const word of commonWords.slice(0, 10)) { // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫—É
      try {
        const data = await this.getWordData(word);
        preloadResults[word] = data;
        console.log(`‚úÖ [Cambridge] Preloaded: "${word}"`);
      } catch (error) {
        console.error(`‚ùå [Cambridge] Preload failed for "${word}":`, error.message);
      }
      
      // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞–º–∏
      await new Promise(resolve => setTimeout(resolve, 500));
    }
    
    return preloadResults;
  }

  // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –æ—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞
  startCacheCleanup() {
    setInterval(() => {
      const now = Date.now();
      let cleanedCount = 0;
      
      for (const [key, value] of this.cache.entries()) {
        if (now - value.timestamp > this.CACHE_TTL) {
          this.cache.delete(key);
          cleanedCount++;
        }
      }
      
      if (cleanedCount > 0) {
        console.log(`üßπ [Cambridge] Cache cleanup: removed ${cleanedCount} expired entries`);
      }
      
      // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –∏–∑ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ (—Ä–∞–∑ –≤ –¥–µ–Ω—å)
      if (Math.random() < 0.01) { // 1% chance –∫–∞–∂–¥—ã–π –∑–∞–ø—É—Å–∫
        const oldSize = this.problemWords.size;
        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å–ª–æ–≤
        console.log(`üìã [Cambridge] Blacklist size: ${this.problemWords.size}`);
      }
      
    }, 10 * 60 * 1000); // –ö–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
  getCacheStats() {
    return {
      cacheSize: this.cache.size,
      blacklistSize: this.problemWords.size,
      concurrentRequests: this.concurrentRequests
    };
  }

  clearCache() {
    const previousSize = this.cache.size;
    this.cache.clear();
    console.log(`üóëÔ∏è [Cambridge] Cache cleared: ${previousSize} entries removed`);
    return previousSize;
  }

  removeFromBlacklist(word) {
    const removed = this.problemWords.delete(word.toLowerCase());
    if (removed) {
      console.log(`‚úÖ [Cambridge] Removed from blacklist: "${word}"`);
    }
    return removed;
  }

  // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞
  async healthCheck() {
    try {
      const testWord = 'hello'; // –ü—Ä–æ—Å—Ç–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
      const response = await this.http.get(`${this.baseUrl}/${testWord}`, {
        timeout: 5000
      });
      
      return {
        status: 'healthy',
        responseTime: response.duration,
        statusCode: response.status
      };
    } catch (error) {
      return {
        status: 'unhealthy',
        error: error.message
      };
    }
  }

  // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: graceful shutdown
  async shutdown() {
    console.log('üîÑ [Cambridge] Shutting down service...');
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–µ—à (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    this.cache.clear();
    this.problemWords.clear();
    console.log('‚úÖ [Cambridge] Service shutdown completed');
  }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
let cambridgeServiceInstance = null;

export function getCambridgeService() {
  if (!cambridgeServiceInstance) {
    cambridgeServiceInstance = new CambridgeDictionaryService();
    
    // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–∞–º—ã–µ —á–∞—Å—Ç—ã–µ —Å–ª–æ–≤–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    const commonWords = [
      'hello', 'world', 'time', 'people', 'water', 'food', 'house', 
      'work', 'school', 'book', 'friend', 'family', 'music', 'love'
    ];
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫—É –≤ —Ñ–æ–Ω–µ (–Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é)
    setTimeout(() => {
      cambridgeServiceInstance.preloadCommonWords(commonWords)
        .catch(error => console.error('‚ùå Preload failed:', error));
    }, 5000);
  }
  
  return cambridgeServiceInstance;
}

// Graceful shutdown –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞
process.on('SIGINT', async () => {
  if (cambridgeServiceInstance) {
    await cambridgeServiceInstance.shutdown();
  }
  process.exit(0);
});

process.on('SIGTERM', async () => {
  if (cambridgeServiceInstance) {
    await cambridgeServiceInstance.shutdown();
  }
  process.exit(0);
});
