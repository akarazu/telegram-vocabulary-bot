import { google } from 'googleapis';

export class GoogleSheetsService {
    constructor() {
        this.initialized = false;
        this.sheets = null;
        this.spreadsheetId = process.env.GOOGLE_SHEET_ID;
        
        // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —á–∞—Å—Ç—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        this.cache = new Map();
        this.CACHE_TTL = 2 * 60 * 1000; // 2 –º–∏–Ω—É—Ç—ã
        
        console.log('üîß GoogleSheetsService - Spreadsheet ID:', this.spreadsheetId ? 'SET' : 'NOT SET');
        
        if (!this.spreadsheetId) {
            console.error('‚ùå CRITICAL: GOOGLE_SHEET_ID is not set in environment variables');
        }
        
        this.init();
    }

    async init() {
        if (!this.spreadsheetId) {
            console.error('‚ùå Cannot initialize: GOOGLE_SHEET_ID is required');
            this.initialized = false;
            return;
        }

        try {
            console.log('üîÑ Initializing Google Sheets service...');
            const auth = new google.auth.GoogleAuth({
                credentials: this.getCredentialsFromEnv(),
                scopes: ['https://www.googleapis.com/auth/spreadsheets'],
            });

            this.sheets = google.sheets({ version: 'v4', auth });

            await this.initializeSheetStructure();
            this.initialized = true;
            console.log('‚úÖ Google Sheets service initialized');
        } catch (error) {
            console.error('‚ùå Google Sheets initialization failed:', error.message);
            this.initialized = false;
        }
    }

    getCredentialsFromEnv() {
        try {
            // –í–∞—Ä–∏–∞–Ω—Ç 1: –ü–æ–ª–Ω—ã–π JSON –∏–∑ –æ–¥–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
            if (process.env.GOOGLE_SERVICE_ACCOUNT_CREDENTIALS) {
                console.log('üîë Using GOOGLE_SERVICE_ACCOUNT_CREDENTIALS');
                return JSON.parse(process.env.GOOGLE_SERVICE_ACCOUNT_CREDENTIALS);
            }

            // –í–∞—Ä–∏–∞–Ω—Ç 2: –û—Ç–¥–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
            if (process.env.GOOGLE_CLIENT_EMAIL && process.env.GOOGLE_PRIVATE_KEY) {
                console.log('üîë Using separate credential variables');
                return {
                    type: 'service_account',
                    project_id: process.env.GOOGLE_PROJECT_ID || 'default-project',
                    private_key_id: process.env.GOOGLE_PRIVATE_KEY_ID || 'default-key-id',
                    private_key: process.env.GOOGLE_PRIVATE_KEY.replace(/\\n/g, '\n'),
                    client_email: process.env.GOOGLE_CLIENT_EMAIL,
                    client_id: process.env.GOOGLE_CLIENT_ID || 'default-client-id',
                    auth_uri: 'https://accounts.google.com/o/oauth2/auth',
                    token_uri: 'https://oauth2.googleapis.com/token',
                    auth_provider_x509_cert_url: 'https://www.googleapis.com/oauth2/v1/certs'
                };
            }

            console.error('‚ùå No Google credentials found in environment variables');
            return null;
        } catch (error) {
            console.error('‚ùå Error parsing Google credentials:', error);
            return null;
        }
    }

    // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç–æ–¥–æ–≤
    async getCachedData(cacheKey, fetchFunction) {
        const cached = this.cache.get(cacheKey);
        if (cached && Date.now() - cached.timestamp < this.CACHE_TTL) {
            return cached.data;
        }
        
        const data = await fetchFunction();
        this.cache.set(cacheKey, {
            data: data,
            timestamp: Date.now()
        });
        
        return data;
    }

    // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞
    startCacheCleanup() {
        setInterval(() => {
            const now = Date.now();
            for (const [key, value] of this.cache.entries()) {
                if (now - value.timestamp > this.CACHE_TTL) {
                    this.cache.delete(key);
                }
            }
        }, 5 * 60 * 1000); // –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
    }

    // ‚úÖ –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã —Å LastReview –∫–∞–∫ —Å—Ç–æ–ª–±—Ü–æ–º G
 async initializeSheetStructure() {
    try {
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏—Å—Ç–∞—Ö
        const spreadsheet = await this.sheets.spreadsheets.get({
            spreadsheetId: this.spreadsheetId,
        });

        const sheets = spreadsheet.data.sheets;
        const wordsSheet = sheets.find(sheet => sheet.properties.title === 'Words');

        if (!wordsSheet) {
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ª–∏—Å—Ç —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
            await this.sheets.spreadsheets.batchUpdate({
                spreadsheetId: this.spreadsheetId,
                resource: {
                    requests: [
                        {
                            addSheet: {
                                properties: {
                                    title: 'Words'
                                }
                            }
                        }
                    ]
                }
            });

            // ‚úÖ –û–ë–ù–û–í–õ–ï–ù–ù–´–ï –ó–ê–ì–û–õ–û–í–ö–ò: –î–æ–±–∞–≤–ª—è–µ–º FirstLearnedDate –∫–∞–∫ —Å—Ç–æ–ª–±–µ—Ü K
            await this.sheets.spreadsheets.values.update({
                spreadsheetId: this.spreadsheetId,
                range: 'Words!A1:K1',
                valueInputOption: 'RAW',
                resource: {
                    values: [[
                        'UserID',
                        'English',
                        'Transcription',
                        'AudioURL',
                        'MeaningsJSON',
                        'CreatedDate',
                        'LastReview',
                        'NextReview',
                        'Interval',
                        'Status',
                        'FirstLearnedDate' // ‚úÖ –ù–û–í–´–ô –°–¢–û–õ–ë–ï–¶ K - FirstLearnedDate
                    ]]
                }
            });
            console.log('‚úÖ Created new Words sheet with FirstLearnedDate column');
        } else {
            console.log('‚úÖ Words sheet already exists');
            
            // ‚úÖ –ü–†–û–í–ï–†–Ø–ï–ú –ï–°–¢–¨ –õ–ò –°–¢–û–õ–ë–ï–¶ FirstLearnedDate
            const headersResponse = await this.sheets.spreadsheets.values.get({
                spreadsheetId: this.spreadsheetId,
                range: 'Words!A1:K1',
            });
            
            const headers = headersResponse.data.values ? headersResponse.data.values[0] : [];
            if (!headers.includes('FirstLearnedDate')) {
                console.log('üîÑ Adding FirstLearnedDate column to existing sheet...');
                
                // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞
                await this.sheets.spreadsheets.values.update({
                    spreadsheetId: this.spreadsheetId,
                    range: 'Words!K1',
                    valueInputOption: 'RAW',
                    resource: {
                        values: [['FirstLearnedDate']]
                    }
                });
                console.log('‚úÖ Added FirstLearnedDate column header');
            }
        }
    } catch (error) {
        console.error('‚ùå Error initializing sheet structure:', error.message);
    }
}
    
    // ‚úÖ –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–ª–æ–≤–∞ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
   async addWordWithMeanings(userId, english, transcription, audioUrl, meanings) {
    if (!this.initialized) {
        console.log('‚ùå Google Sheets not initialized');
        return false;
    }

    try {
        const meaningsJSON = JSON.stringify(meanings);
        const now = new Date();
        const nextReview = new Date();
        nextReview.setDate(nextReview.getDate() + 1);

        const response = await this.sheets.spreadsheets.values.append({
            spreadsheetId: this.spreadsheetId,
            range: 'Words!A:K',
            valueInputOption: 'RAW',
            requestBody: {
                values: [[
                    userId.toString(),
                    english.toLowerCase(),
                    transcription || '',
                    audioUrl || '',
                    meaningsJSON,
                    now.toISOString(),    // CreatedDate
                    '',                   // LastReview - –ø—É—Å—Ç–æ –¥–ª—è –Ω–æ–≤—ã—Ö —Å–ª–æ–≤
                    nextReview.toISOString(), // NextReview
                    1,                    // –Ω–∞—á–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
                    'active',
                    ''                    // ‚úÖ FirstLearnedDate - –ø—É—Å—Ç–æ –¥–ª—è –Ω–æ–≤—ã—Ö —Å–ª–æ–≤
                ]]
            }
        });

        // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–µ—à –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        this.cache.delete(`words_${userId}`);
        console.log(`‚úÖ Word "${english}" saved with FirstLearnedDate column`);
        return true;
    } catch (error) {
        console.error('‚ùå Error saving word:', error.message);
        return false;
    }
}

    // ‚úÖ –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
   async getUserWords(userId) {
    if (!this.initialized) {
        return [];
    }

    const cacheKey = `words_${userId}`;
    return this.getCachedData(cacheKey, async () => {
        try {
            const response = await this.sheets.spreadsheets.values.get({
                spreadsheetId: this.spreadsheetId,
                range: 'Words!A:K', // ‚úÖ –û–ë–ù–û–í–õ–ï–ù –î–ò–ê–ü–ê–ó–û–ù –î–û K
            });

            const rows = response.data.values || [];

            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ UserID –∏ —Å—Ç–∞—Ç—É—Å—É
            const userWords = rows.slice(1).filter(row => 
                row.length >= 6 && 
                row[0] === userId.toString() && 
                (row[9] === 'active' || !row[9] || row.length < 10)
            );

            return userWords.map(row => {
                // ‚úÖ –û–ë–ù–û–í–õ–ï–ù–ù–û–ï –°–û–û–¢–í–ï–¢–°–¢–í–ò–ï –°–¢–û–õ–ë–¶–û–í:
                const userId = row[0] || '';
                const english = row[1] || '';
                const transcription = row[2] || '';
                const audioUrl = row[3] || '';
                const meaningsJSON = row[4] || '[]';
                const createdDate = row[5] || new Date().toISOString();
                const lastReview = row[6] || '';
                const nextReview = row[7] || new Date().toISOString();
                const interval = parseInt(row[8]) || 1;
                const status = row[9] || 'active';
                const firstLearnedDate = row[10] || ''; // ‚úÖ –ù–û–í–´–ô –°–¢–û–õ–ë–ï–¶ K - FirstLearnedDate

                let meanings = [];
                
                try {
                    if (meaningsJSON && meaningsJSON.trim().startsWith('[')) {
                        meanings = JSON.parse(meaningsJSON);
                    } else if (meaningsJSON && meaningsJSON.trim().startsWith('{')) {
                        meanings = [JSON.parse(meaningsJSON)];
                    } else {
                        console.log(`‚ö†Ô∏è Invalid JSON for word "${english}", creating fallback:`, meaningsJSON.substring(0, 50));
                        meanings = [{
                            translation: meaningsJSON || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥',
                            example: '',
                            partOfSpeech: '',
                            definition: ''
                        }];
                    }
                } catch (parseError) {
                    console.error(`‚ùå Error parsing meanings JSON for word "${english}":`, parseError.message);
                    meanings = [{
                        translation: '–ü–µ—Ä–µ–≤–æ–¥ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω',
                        example: '',
                        partOfSpeech: '',
                        definition: ''
                    }];
                }

                return {
                    userId,
                    english,
                    transcription,
                    audioUrl,
                    meanings,
                    createdDate,
                    lastReview,
                    nextReview,
                    interval,
                    status,
                    firstLearnedDate // ‚úÖ –î–û–ë–ê–í–õ–Ø–ï–ú –ù–û–í–û–ï –ü–û–õ–ï
                };
            });
        } catch (error) {
            console.error('‚ùå Error reading words from Google Sheets:', error.message);
            return [];
        }
    });
}
    
    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
async getWordsForReview(chatId) {
    const userWords = await this.getUserWords(chatId);
    const now = new Date(); // ‚úÖ –û–†–ò–ì–ò–ù–ê–õ–¨–ù–û–ï –°–ï–†–í–ï–†–ù–û–ï –í–†–ï–ú–Ø
    
    return userWords.filter(word => {
        if (!word.nextReview || word.status !== 'active' || word.interval === 1) {
            return false;
        }
        
        try {
            const nextReview = new Date(word.nextReview);
            return nextReview <= now; // ‚úÖ –û–†–ò–ì–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê
        } catch (error) {
            console.error('Error checking review date:', error);
            return false;
        }
    });
}
    
    // ‚úÖ –£–õ–£–ß–®–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Å–ª–æ–≤ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
    async getNewWordsForLearning(userId) {
        if (!this.initialized) {
            return [];
        }
        
        try {
            const userWords = await this.getUserWords(userId);
            const today = new Date();
            today.setHours(0, 0, 0, 0);
            
            console.log(`üîç –ü–æ–∏—Å–∫ –Ω–æ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);

            // –§–∏–ª—å—Ç—Ä—É–µ–º —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–∑–¥–∞–Ω—ã —Å–µ–≥–æ–¥–Ω—è –∏ –∏–º–µ—é—Ç 0 –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
            const newWords = userWords.filter(word => {
                if (!word.nextReview || word.status !== 'active') return false;
                
                try {
                    const createdDate = new Date(word.createdDate);
                    const isCreatedToday = createdDate >= today;
                    const hasZeroRepetitions = !word.reps || word.reps === 0;
                    
                    const isNewWord = isCreatedToday && hasZeroRepetitions;
                    
                    if (isNewWord) {
                        console.log(`‚úÖ –°–ª–æ–≤–æ "${word.english}" - –ù–û–í–û–ï: —Å–æ–∑–¥–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è, –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π: ${word.reps || 0}`);
                    }
                    
                    return isNewWord;
                } catch (dateError) {
                    console.error(`‚ùå Invalid date for word "${word.english}"`);
                    return false;
                }
            });

            console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –Ω–æ–≤—ã—Ö —Å–ª–æ–≤: ${newWords.length}`);
            
            // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è
            newWords.sort((a, b) => new Date(b.createdDate) - new Date(a.createdDate));

            // –õ–∏–º–∏—Ç 5 –Ω–æ–≤—ã—Ö —Å–ª–æ–≤ –≤ –¥–µ–Ω—å
            return newWords.slice(0, 5);
            
        } catch (error) {
            console.error('‚ùå Error getting new words for learning:', error.message);
            return [];
        }
    }

    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü—Ä–æ–≤–µ—Ä–∫–∞ –µ—Å—Ç—å –ª–∏ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
    async hasWordsForReview(userId) {
        if (!this.initialized) {
            return false;
        }
        
        try {
            const wordsForReview = await this.getWordsForReview(userId);
            return wordsForReview.length > 0;
        } catch (error) {
            console.error('‚ùå Error checking words for review:', error.message);
            return false;
        }
    }

    // ‚úÖ –§–£–ù–ö–¶–ò–Ø: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ª–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
    async getReviewWordsCount(userId) {
        if (!this.initialized) {
            return 0;
        }
        
        try {
            const wordsForReview = await this.getWordsForReview(userId);
            return wordsForReview.length;
        } catch (error) {
            console.error('‚ùå Error getting review words count:', error.message);
            return 0;
        }
    }

    // ‚úÖ –§–£–ù–ö–¶–ò–Ø: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–æ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è
    async getNewWordsCount(userId) {
        if (!this.initialized) {
            return 0;
        }
        
        try {
            const newWords = await this.getNewWordsForLearning(userId);
            return newWords.length;
        } catch (error) {
            console.error('‚ùå Error getting new words count:', error.message);
            return 0;
        }
    }

    // ‚úÖ –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ú–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ª–æ–≤ (–¥–ª—è –±–∞—Ç—á–∏–Ω–≥–∞)
 async batchUpdateWords(chatId, wordUpdates) {
    if (!this.initialized) {
        return false;
    }
    
    try {
        console.log(`üîÑ Batch updating ${wordUpdates.length} words for user ${chatId}`);
        
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞
        const response = await this.sheets.spreadsheets.values.get({
            spreadsheetId: this.spreadsheetId,
            range: 'Words!A:K', // ‚úÖ –û–ë–ù–û–í–õ–ï–ù –î–ò–ê–ü–ê–ó–û–ù
        });
        
        const rows = response.data.values || [];
        const updates = [];
        
        // –ù–∞—Ö–æ–¥–∏–º —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        for (const [english, data] of wordUpdates) {
            let rowIndex = -1;
            
            for (let i = 0; i < rows.length; i++) {
                if (rows[i][0] === chatId.toString() && 
                    rows[i][1].toLowerCase() === english.toLowerCase() && 
                    (rows[i][9] === 'active' || !rows[i][9] || rows[i].length < 10)) {
                    rowIndex = i + 1;
                    break;
                }
            }

            if (rowIndex !== -1) {
                // ‚úÖ –û–ë–ù–û–í–õ–Ø–ï–ú FirstLearnedDate –¢–û–õ–¨–ö–û –ü–†–ò –ü–ï–†–í–û–ú –ò–ó–£–ß–ï–ù–ò–ò
                const currentRow = rows[rowIndex - 1];
                const currentFirstLearnedDate = currentRow[10] || '';
                
                let firstLearnedDate = currentFirstLearnedDate;
                if ((!currentFirstLearnedDate || currentFirstLearnedDate === '') && 
                    data.interval > 1) {
                    // –ó–∞–ø–æ–ª–Ω—è–µ–º FirstLearnedDate —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∏–∑—É—á–µ–Ω–∏–∏
                    firstLearnedDate = data.lastReview ? data.lastReview.toISOString() : new Date().toISOString();
                    console.log(`üéØ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω FirstLearnedDate –¥–ª—è "${english}": ${firstLearnedDate}`);
                }

                updates.push({
                    range: `Words!G${rowIndex}:K${rowIndex}`, // ‚úÖ –û–ë–ù–û–í–õ–ï–ù –î–ò–ê–ü–ê–ó–û–ù –î–û K
                    values: [[
                        data.lastReview ? data.lastReview.toISOString() : new Date().toISOString(),
                        data.nextReview.toISOString(),
                        data.interval.toString(),
                        'active',
                        firstLearnedDate // ‚úÖ –î–û–ë–ê–í–õ–Ø–ï–ú FirstLearnedDate
                    ]]
                });
            }
        }
        
        if (updates.length > 0) {
            // –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
            await this.sheets.spreadsheets.values.batchUpdate({
                spreadsheetId: this.spreadsheetId,
                resource: {
                    valueInputOption: 'RAW',
                    data: updates
                }
            });
            
            // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–µ—à
            this.cache.delete(`words_${chatId}`);
            this.cache.delete(`review_${chatId}`);
            
            console.log(`‚úÖ Batch update completed: ${updates.length} words updated`);
            return true;
        }
        
        return false;
        
    } catch (error) {
        console.error('‚ùå Error in batch update:', error.message);
        return false;
    }
}

    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ—Å–ª–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
    async updateCardAfterReview(userId, english, fsrsData, rating) {
        if (!this.initialized) {
            return false;
        }
        
        try {
            // –ù–∞—Ö–æ–¥–∏–º —Ç–µ–∫—É—â—É—é –∫–∞—Ä—Ç–æ—á–∫—É
            const userWords = await this.getUserWords(userId);
            const currentWord = userWords.find(w => w.english.toLowerCase() === english.toLowerCase());
            
            // –ù–∞—Ö–æ–¥–∏–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            const response = await this.sheets.spreadsheets.values.get({
                spreadsheetId: this.spreadsheetId,
                range: 'Words!A:J',
            });
            
            const rows = response.data.values || [];
            let rowIndex = -1;
            
            for (let i = 0; i < rows.length; i++) {
                if (rows[i][0] === userId.toString() && 
                    rows[i][1].toLowerCase() === english.toLowerCase() && 
                    (rows[i][9] === 'active' || !rows[i][9] || rows[i].length < 10)) {
                    rowIndex = i + 1;
                    break;
                }
            }

            if (rowIndex === -1) {
                console.error('‚ùå Word not found for review update:', english);
                return false;
            }

            // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–±–Ω–æ–≤–ª—è–µ–º LastReview, NextReview –∏ Interval
            const updateData = [
                new Date().toISOString(), // ‚úÖ LastReview - —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
                fsrsData.card.due.toISOString(), // ‚úÖ NextReview - –∏–∑ FSRS
                fsrsData.card.interval.toString() // ‚úÖ Interval - –∏–∑ FSRS
            ];

            await this.sheets.spreadsheets.values.update({
                spreadsheetId: this.spreadsheetId,
                range: `Words!G${rowIndex}:I${rowIndex}`, // ‚úÖ G=LastReview, H=NextReview, I=Interval
                valueInputOption: 'RAW',
                resource: {
                    values: [updateData]
                }
            });

            // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–µ—à
            this.cache.delete(`words_${userId}`);
            this.cache.delete(`review_${userId}`);

            console.log(`‚úÖ Updated review for word "${english}": rating=${rating}, interval=${fsrsData.card.interval}, next review=${fsrsData.card.due.toISOString()}`);
            return true;
        } catch (error) {
            console.error('‚ùå Error updating card after review:', error.message);
            return false;
        }
    }
    
    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è —Å –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
    async updateWordReview(userId, english, newInterval, nextReviewDate, lastReview = null) {
        if (!this.initialized) {
            return false;
        }
        
        try {
            // –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Ö–æ–¥–∏–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            const response = await this.sheets.spreadsheets.values.get({
                spreadsheetId: this.spreadsheetId,
                range: 'Words!A:J',
            });
            
            const rows = response.data.values || [];
            let rowIndex = -1;
            
            for (let i = 0; i < rows.length; i++) {
                if (rows[i][0] === userId.toString() && 
                    rows[i][1].toLowerCase() === english.toLowerCase() && 
                    (rows[i][9] === 'active' || !rows[i][9] || rows[i].length < 10)) {
                    rowIndex = i + 1;
                    break;
                }
            }

            if (rowIndex === -1) {
                console.error('‚ùå Word not found for update:', english);
                return false;
            }

            // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–æ–ª–±—Ü—ã —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            const updateData = [
                lastReview ? lastReview.toISOString() : new Date().toISOString(), // LastReview
                nextReviewDate.toISOString(), // NextReview
                newInterval.toString()        // Interval
            ];

            await this.sheets.spreadsheets.values.update({
                spreadsheetId: this.spreadsheetId,
                range: `Words!G${rowIndex}:I${rowIndex}`,
                valueInputOption: 'RAW',
                resource: {
                    values: [updateData]
                }
            });

            // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–µ—à
            this.cache.delete(`words_${userId}`);
            this.cache.delete(`review_${userId}`);

            console.log(`‚úÖ Updated review for word "${english}": interval ${newInterval} days, last review: ${updateData[0]}, next review: ${updateData[1]}`);
            return true;
        } catch (error) {
            console.error('‚ùå Error updating word review:', error.message);
            return false;
        }
    }

    // ‚úÖ –î–û–ë–ê–í–õ–ï–ù–ê –§–£–ù–ö–¶–ò–Ø: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–∞—Ç–∞—Ö –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
    async getReviewDatesInfo(userId) {
        if (!this.initialized) {
            return [];
        }
        
        try {
            const userWords = await this.getUserWords(userId);
            const now = new Date();
            
            const datesInfo = userWords
                .filter(word => word.interval > 1)
                .map(word => {
                    try {
                        const nextReview = new Date(word.nextReview);
                        const timeDiff = nextReview - now;
                        const hoursUntil = Math.floor(timeDiff / (1000 * 60 * 60));
                        const daysUntil = Math.floor(timeDiff / (1000 * 60 * 60 * 24));
                        
                        return {
                            word: word.english,
                            nextReview: nextReview.toISOString(),
                            interval: word.interval,
                            isDue: nextReview <= now,
                            hoursUntil: hoursUntil,
                            daysUntil: daysUntil
                        };
                    } catch (error) {
                        return {
                            word: word.english,
                            error: 'Invalid date'
                        };
                    }
                });
            
            return datesInfo;
        } catch (error) {
            console.error('‚ùå Error getting review dates info:', error.message);
            return [];
        }
    }
    
    // ‚úÖ –§–£–ù–ö–¶–ò–Ø: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É —Å–ª–æ–≤—É
    async addMeaningToWord(userId, english, newMeaning) {
        if (!this.initialized) {
            return false;
        }
        
        try {
            // –ù–∞—Ö–æ–¥–∏–º —Å–ª–æ–≤–æ
            const userWords = await this.getUserWords(userId);
            const word = userWords.find(w => w.english.toLowerCase() === english.toLowerCase());
            
            if (!word) {
                console.error('‚ùå Word not found for adding meaning:', english);
                return false;
            }

            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            const updatedMeanings = [...word.meanings, newMeaning];
            const updatedMeaningsJSON = JSON.stringify(updatedMeanings);

            // –ù–∞—Ö–æ–¥–∏–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            const response = await this.sheets.spreadsheets.values.get({
                spreadsheetId: this.spreadsheetId,
                range: 'Words!A:J',
            });
            
            const rows = response.data.values || [];
            let rowIndex = -1;
            
            for (let i = 0; i < rows.length; i++) {
                if (rows[i][0] === userId.toString() && 
                    rows[i][1].toLowerCase() === english.toLowerCase() && 
                    (rows[i][9] === 'active' || !rows[i][9] || rows[i].length < 10)) {
                    rowIndex = i + 1;
                    break;
                }
            }

            if (rowIndex === -1) {
                console.error('‚ùå Word not found for adding meaning:', english);
                return false;
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º meanings
            await this.sheets.spreadsheets.values.update({
                spreadsheetId: this.spreadsheetId,
                range: `Words!E${rowIndex}`,
                valueInputOption: 'RAW',
                resource: {
                    values: [[updatedMeaningsJSON]]
                }
            });

            // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–µ—à
            this.cache.delete(`words_${userId}`);

            console.log(`‚úÖ Added new meaning to word "${english}"`);
            return true;
        } catch (error) {
            console.error('‚ùå Error adding meaning to word:', error.message);
            return false;
        }
    }

    // ‚ùó –°–¢–ê–†–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –û–ë–†–ê–¢–ù–û–ô –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò
    async addWord(chatId, english, transcription, translation, audioUrl = '', examples = '') {
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç –≤ –Ω–æ–≤—ã–π
        const meanings = [{
            translation: translation,
            example: examples || '',
            partOfSpeech: '',
            definition: ''
        }];
        return await this.addWordWithMeanings(chatId, english, transcription, audioUrl, meanings);
    }

    async addWordWithExamples(chatId, english, transcription, translation, audioUrl = '', examples = '') {
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç –≤ –Ω–æ–≤—ã–π
        const meanings = [{
            translation: translation,
            example: examples || '',
            partOfSpeech: '',
            definition: ''
        }];
        return await this.addWordWithMeanings(chatId, english, transcription, audioUrl, meanings);
    }

    // ‚úÖ –§–£–ù–ö–¶–ò–Ø: –ú–∏–≥—Ä–∞—Ü–∏—è —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç
    async migrateOldDataToNewFormat(userId) {
        if (!this.initialized) {
            return false;
        }
        
        try {
            console.log(`üîÑ Starting migration for user ${userId}`);
            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–ª–æ–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const userWords = await this.getUserWords(userId);
            
            let migratedCount = 0;
            
            for (const word of userWords) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –º–∏–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ —Å–ª–æ–≤–æ
                if (word.meanings.length === 0 || 
                    (word.meanings.length === 1 && word.meanings[0].translation === '–ü–µ—Ä–µ–≤–æ–¥ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω')) {
                    
                    // –≠—Ç–æ —Å–ª–æ–≤–æ —Å –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏, –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å
                    console.log(`üîÑ Migrating word: ${word.english}`);
                    
                    // –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É meanings
                    const correctMeanings = [{
                        translation: '–ü–µ—Ä–µ–≤–æ–¥ —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ–±–Ω–æ–≤–∏—Ç—å',
                        example: '',
                        partOfSpeech: '',
                        definition: ''
                    }];
                    
                    const correctMeaningsJSON = JSON.stringify(correctMeanings);
                    
                    // –ù–∞—Ö–æ–¥–∏–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                    const response = await this.sheets.spreadsheets.values.get({
                        spreadsheetId: this.spreadsheetId,
                        range: 'Words!A:J',
                    });
                    
                    const rows = response.data.values || [];
                    let rowIndex = -1;
                    
                    for (let i = 0; i < rows.length; i++) {
                        if (rows[i][0] === userId.toString() && 
                            rows[i][1].toLowerCase() === word.english.toLowerCase()) {
                            rowIndex = i + 1;
                            break;
                        }
                    }

                    if (rowIndex !== -1) {
                        // –û–±–Ω–æ–≤–ª—è–µ–º meanings
                        await this.sheets.spreadsheets.values.update({
                            spreadsheetId: this.spreadsheetId,
                            range: `Words!E${rowIndex}`,
                            valueInputOption: 'RAW',
                            resource: {
                                values: [[correctMeaningsJSON]]
                            }
                        });
                        migratedCount++;
                    }
                }
            }
            
            // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–µ—à
            this.cache.delete(`words_${userId}`);
            
            console.log(`‚úÖ Migration completed: ${migratedCount} words migrated`);
            return true;
        } catch (error) {
            console.error('‚ùå Error during migration:', error.message);
            return false;
        }
    }

    // ‚úÖ –î–û–ë–ê–í–ò–ú –§–£–ù–ö–¶–ò–Æ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ —Å–±—Ä–æ—Å–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    async resetUserProgress(userId) {
        if (!this.initialized) {
            return false;
        }
        
        try {
            const response = await this.sheets.spreadsheets.values.get({
                spreadsheetId: this.spreadsheetId,
                range: 'Words!A:J',
            });
            
            const rows = response.data.values || [];
            let resetCount = 0;
            const updates = [];
            
            for (let i = 1; i < rows.length; i++) {
                const row = rows[i];
                if (row.length >= 9 && row[0] === userId.toString() && row[9] === 'active') {
                    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –∏ –¥–∞—Ç—É —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
                    const nextReview = new Date().toISOString();
                    const interval = 1;
                    
                    updates.push({
                        range: `Words!G${i + 1}:I${i + 1}`,
                        values: [[nextReview, interval]]
                    });
                    
                    resetCount++;
                }
            }
            
            if (updates.length > 0) {
                // –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
                await this.sheets.spreadsheets.values.batchUpdate({
                    spreadsheetId: this.spreadsheetId,
                    resource: {
                        valueInputOption: 'RAW',
                        data: updates
                    }
                });
                
                // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–µ—à
                this.cache.delete(`words_${userId}`);
                this.cache.delete(`review_${userId}`);
            }
            
            console.log(`‚úÖ Reset progress for user ${userId}: ${resetCount} words`);
            return true;
            
        } catch (error) {
            console.error('‚ùå Error resetting user progress:', error.message);
            return false;
        }
    }

    // ‚úÖ –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–¥–ª—è –Ω–æ—Ç–∏—Ñ–∏–∫–∞—Ü–∏–π)
    async getAllActiveUsers() {
        if (!this.initialized) {
            return [];
        }

        const cacheKey = 'all_active_users';
        return this.getCachedData(cacheKey, async () => {
            try {
                const response = await this.sheets.spreadsheets.values.get({
                    spreadsheetId: this.spreadsheetId,
                    range: 'Words!A:J',
                });

                const rows = response.data.values || [];
                
                // –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                const userSet = new Set();
                
                for (let i = 1; i < rows.length; i++) {
                    const row = rows[i];
                    if (row.length > 0 && row[0] && (row[9] === 'active' || !row[9] || row.length < 10)) {
                        userSet.add(row[0]);
                    }
                }
                
                return Array.from(userSet);
            } catch (error) {
                console.error('‚ùå Error getting all active users:', error.message);
                return [];
            }
        });
    }

    // ‚úÖ –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–¥–ª—è –±–∞—Ç—á–∏–Ω–≥–∞ –Ω–æ—Ç–∏—Ñ–∏–∫–∞—Ü–∏–π)
    async getMultipleUsersWords(userIds) {
        if (!this.initialized) {
            return new Map();
        }

        try {
            // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            const userWordsMap = new Map();
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
            const response = await this.sheets.spreadsheets.values.get({
                spreadsheetId: this.spreadsheetId,
                range: 'Words!A:J',
            });

            const rows = response.data.values || [];
            
            // –°–æ–∑–¥–∞–µ–º Set –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
            const userIdSet = new Set(userIds.map(id => id.toString()));
            
            // –§–∏–ª—å—Ç—Ä—É–µ–º –∏ –≥—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            for (let i = 1; i < rows.length; i++) {
                const row = rows[i];
                if (row.length >= 6 && userIdSet.has(row[0]) && (row[9] === 'active' || !row[9] || row.length < 10)) {
                    const userId = row[0];
                    
                    if (!userWordsMap.has(userId)) {
                        userWordsMap.set(userId, []);
                    }
                    
                    const word = this.parseRowToWord(row);
                    userWordsMap.get(userId).push(word);
                }
            }
            
            console.log(`‚úÖ Loaded data for ${userWordsMap.size} users`);
            return userWordsMap;
            
        } catch (error) {
            console.error('‚ùå Error getting multiple users words:', error.message);
            return new Map();
        }
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–æ–∫–∏
    parseRowToWord(row) {
        const userId = row[0] || '';
        const english = row[1] || '';
        const transcription = row[2] || '';
        const audioUrl = row[3] || '';
        const meaningsJSON = row[4] || '[]';
        const createdDate = row[5] || new Date().toISOString();
        const lastReview = row[6] || '';
        const nextReview = row[7] || new Date().toISOString();
        const interval = parseInt(row[8]) || 1;
        const status = row[9] || 'active';

        let meanings = [];
        
        try {
            if (meaningsJSON && meaningsJSON.trim().startsWith('[')) {
                meanings = JSON.parse(meaningsJSON);
            } else if (meaningsJSON && meaningsJSON.trim().startsWith('{')) {
                meanings = [JSON.parse(meaningsJSON)];
            }
        } catch (parseError) {
            meanings = [{
                translation: '–ü–µ—Ä–µ–≤–æ–¥ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω',
                example: '',
                partOfSpeech: '',
                definition: ''
            }];
        }

        return {
            userId,
            english,
            transcription,
            audioUrl,
            meanings,
            createdDate,
            lastReview,
            nextReview,
            interval,
            status
        };
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É –∫–µ—à–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    startCacheCleanup() {
        setInterval(() => {
            const now = Date.now();
            let cleanedCount = 0;
            
            for (const [key, value] of this.cache.entries()) {
                if (now - value.timestamp > this.CACHE_TTL) {
                    this.cache.delete(key);
                    cleanedCount++;
                }
            }
            
            if (cleanedCount > 0) {
                console.log(`üßπ Cache cleanup: removed ${cleanedCount} expired entries`);
            }
        }, 5 * 60 * 1000); // –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
    }

    async migrateFirstLearnedDates(userId) {
    if (!this.initialized) {
        return false;
    }
    
    try {
        console.log(`üîÑ Starting FirstLearnedDate migration for user ${userId}`);
        
        const response = await this.sheets.spreadsheets.values.get({
            spreadsheetId: this.spreadsheetId,
            range: 'Words!A:K',
        });
        
        const rows = response.data.values || [];
        const updates = [];
        let migratedCount = 0;
        
        for (let i = 1; i < rows.length; i++) {
            const row = rows[i];
            if (row.length >= 9 && row[0] === userId.toString() && 
                (row[9] === 'active' || !row[9] || row.length < 10)) {
                
                const interval = parseInt(row[8]) || 1;
                const lastReview = row[6] || '';
                const currentFirstLearnedDate = row[10] || '';
                
                // ‚úÖ –ó–ê–ü–û–õ–ù–Ø–ï–ú FirstLearnedDate –î–õ–Ø –ò–ó–£–ß–ï–ù–ù–´–• –°–õ–û–í
                if (interval > 1 && (!currentFirstLearnedDate || currentFirstLearnedDate === '') && lastReview) {
                    updates.push({
                        range: `Words!K${i + 1}`,
                        values: [[lastReview]] // –ò—Å–ø–æ–ª—å–∑—É–µ–º LastReview –∫–∞–∫ FirstLearnedDate
                    });
                    migratedCount++;
                }
            }
        }
        
        if (updates.length > 0) {
            await this.sheets.spreadsheets.values.batchUpdate({
                spreadsheetId: this.spreadsheetId,
                resource: {
                    valueInputOption: 'RAW',
                    data: updates
                }
            });
            
            // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–µ—à
            this.cache.delete(`words_${userId}`);
            
            console.log(`‚úÖ FirstLearnedDate migration completed: ${migratedCount} words updated`);
        } else {
            console.log('‚úÖ No words need FirstLearnedDate migration');
        }
        
        return true;
        
    } catch (error) {
        console.error('‚ùå Error migrating FirstLearnedDates:', error.message);
        return false;
    }
}
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ
const sheetsService = new GoogleSheetsService();
sheetsService.startCacheCleanup();





