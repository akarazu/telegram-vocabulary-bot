import { google } from 'googleapis';

export class GoogleSheetsService {
    constructor() {
        this.initialized = false;
        this.sheets = null;
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –∏–∑ Railway
        this.spreadsheetId = process.env.GOOGLE_SHEET_ID;
        console.log('üîß GoogleSheetsService - Spreadsheet ID:', this.spreadsheetId ? 'SET' : 'NOT SET');
        
        if (!this.spreadsheetId) {
            console.error('‚ùå CRITICAL: GOOGLE_SHEET_ID is not set in environment variables');
        }
        
        this.init();
    }

    async init() {
        if (!this.spreadsheetId) {
            console.error('‚ùå Cannot initialize: GOOGLE_SHEET_ID is required');
            this.initialized = false;
            return;
        }

        try {
            console.log('üîÑ Initializing Google Sheets service...');
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤–º–µ—Å—Ç–æ —Ñ–∞–π–ª–∞
            const auth = new google.auth.GoogleAuth({
                credentials: this.getCredentialsFromEnv(),
                scopes: ['https://www.googleapis.com/auth/spreadsheets'],
            });

            this.sheets = google.sheets({ version: 'v4', auth });

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
            await this.initializeSheetStructure();
            this.initialized = true;
            console.log('‚úÖ Google Sheets service initialized');
        } catch (error) {
            console.error('‚ùå Google Sheets initialization failed:', error.message);
            this.initialized = false;
        }
    }

    getCredentialsFromEnv() {
        try {
            // –í–∞—Ä–∏–∞–Ω—Ç 1: –ü–æ–ª–Ω—ã–π JSON –∏–∑ –æ–¥–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
            if (process.env.GOOGLE_SERVICE_ACCOUNT_CREDENTIALS) {
                console.log('üîë Using GOOGLE_SERVICE_ACCOUNT_CREDENTIALS');
                return JSON.parse(process.env.GOOGLE_SERVICE_ACCOUNT_CREDENTIALS);
            }

            // –í–∞—Ä–∏–∞–Ω—Ç 2: –û—Ç–¥–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
            if (process.env.GOOGLE_CLIENT_EMAIL && process.env.GOOGLE_PRIVATE_KEY) {
                console.log('üîë Using separate credential variables');
                return {
                    type: 'service_account',
                    project_id: process.env.GOOGLE_PROJECT_ID || 'default-project',
                    private_key_id: process.env.GOOGLE_PRIVATE_KEY_ID || 'default-key-id',
                    private_key: process.env.GOOGLE_PRIVATE_KEY.replace(/\\n/g, '\n'),
                    client_email: process.env.GOOGLE_CLIENT_EMAIL,
                    client_id: process.env.GOOGLE_CLIENT_ID || 'default-client-id',
                    auth_uri: 'https://accounts.google.com/o/oauth2/auth',
                    token_uri: 'https://oauth2.googleapis.com/token',
                    auth_provider_x509_cert_url: 'https://www.googleapis.com/oauth2/v1/certs'
                };
            }

            console.error('‚ùå No Google credentials found in environment variables');
            return null;
        } catch (error) {
            console.error('‚ùå Error parsing Google credentials:', error);
            return null;
        }
    }

    async initializeSheetStructure() {
        try {
            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏—Å—Ç–∞—Ö
            const spreadsheet = await this.sheets.spreadsheets.get({
                spreadsheetId: this.spreadsheetId,
            });

            const sheets = spreadsheet.data.sheets;
            const wordsSheet = sheets.find(sheet => sheet.properties.title === 'Words');

            if (!wordsSheet) {
                // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ª–∏—Å—Ç —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
                await this.sheets.spreadsheets.batchUpdate({
                    spreadsheetId: this.spreadsheetId,
                    resource: {
                        requests: [
                            {
                                addSheet: {
                                    properties: {
                                        title: 'Words'
                                    }
                                }
                            }
                        ]
                    }
                });

                // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
                await this.sheets.spreadsheets.values.update({
                    spreadsheetId: this.spreadsheetId,
                    range: 'Words!A1:I1',
                    valueInputOption: 'RAW',
                    resource: {
                        values: [[
                            'UserID',
                            'English',
                            'Transcription',
                            'AudioURL',
                            'MeaningsJSON',
                            'CreatedDate',
                            'NextReview',
                            'Interval',
                            'Status'
                        ]]
                    }
                });
                console.log('‚úÖ Created new Words sheet with JSON structure');
            } else {
                console.log('‚úÖ Words sheet already exists');
            }
        } catch (error) {
            console.error('‚ùå Error initializing sheet structure:', error.message);
        }
    }

 // ‚úÖ –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–ª–æ–≤–∞ —Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
async addWordWithMeanings(userId, english, transcription, audioUrl, meanings) {
    if (!this.initialized) {
        console.log('‚ùå Google Sheets not initialized');
        return false;
    }

    try {
        const meaningsJSON = JSON.stringify(meanings);
        const nextReview = new Date();
        nextReview.setDate(nextReview.getDate() + 1);

        const response = await this.sheets.spreadsheets.values.append({
            spreadsheetId: this.spreadsheetId,
            range: 'Words!A:I',
            valueInputOption: 'RAW',
            requestBody: {
                values: [[
                    userId.toString(),
                    english.toLowerCase(),
                    transcription || '',
                    audioUrl || '',
                    meaningsJSON,
                    new Date().toISOString(),
                    nextReview.toISOString(),
                    1, // –Ω–∞—á–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
                    'active'
                    // reps –±—É–¥–µ—Ç 0 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ)
                ]]
            }
        });

        console.log(`‚úÖ Word "${english}" saved as NEW word`);
        return true;
    } catch (error) {
        console.error('‚ùå Error saving word:', error.message);
        return false;
    }
}

    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ JSON
    async getUserWords(userId) {
        if (!this.initialized) {
            return [];
        }

        try {
            const response = await this.sheets.spreadsheets.values.get({
                spreadsheetId: this.spreadsheetId,
                range: 'Words!A:I',
            });

            const rows = response.data.values || [];

            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ UserID –∏ —Å—Ç–∞—Ç—É—Å—É
            const userWords = rows.slice(1).filter(row => 
                row.length >= 6 && // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å—Ç–æ–ª–±—Ü–æ–≤
                row[0] === userId.toString() && 
                (row[8] === 'active' || !row[8] || row.length < 9) // –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –±–µ–∑ —Å—Ç–∞—Ç—É—Å–∞
            );

            return userWords.map(row => {
                // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å—Ç—Ä–æ–∫–∏
                const userId = row[0] || '';
                const english = row[1] || '';
                const transcription = row[2] || '';
                const audioUrl = row[3] || '';
                const meaningsJSON = row[4] || '[]';
                const createdDate = row[5] || new Date().toISOString();
                const nextReview = row[6] || new Date().toISOString();
                const interval = parseInt(row[7]) || 1;
                const status = row[8] || 'active';

                let meanings = [];
                
                try {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ meaningsJSON –≤–∞–ª–∏–¥–Ω—ã–º JSON
                    if (meaningsJSON && meaningsJSON.trim().startsWith('[')) {
                        meanings = JSON.parse(meaningsJSON);
                    } else if (meaningsJSON && meaningsJSON.trim().startsWith('{')) {
                        // –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ä–µ–∫—Ç, –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ –º–∞—Å—Å–∏–≤
                        meanings = [JSON.parse(meaningsJSON)];
                    } else {
                        // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ JSON, —Å–æ–∑–¥–∞–µ–º fallback –∑–Ω–∞—á–µ–Ω–∏–µ
                        console.log(`‚ö†Ô∏è Invalid JSON for word "${english}", creating fallback:`, meaningsJSON.substring(0, 50));
                        meanings = [{
                            translation: meaningsJSON || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥',
                            example: '',
                            partOfSpeech: '',
                            definition: ''
                        }];
                    }
                } catch (parseError) {
                    console.error(`‚ùå Error parsing meanings JSON for word "${english}":`, parseError.message);
                    console.log(`üìù Problematic JSON:`, meaningsJSON.substring(0, 100));
                    
                    // Fallback: —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
                    meanings = [{
                        translation: '–ü–µ—Ä–µ–≤–æ–¥ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω',
                        example: '',
                        partOfSpeech: '',
                        definition: ''
                    }];
                }

                return {
                    userId,
                    english,
                    transcription,
                    audioUrl,
                    meanings,
                    createdDate,
                    nextReview,
                    interval,
                    status
                };
            });
        } catch (error) {
            console.error('‚ùå Error reading words from Google Sheets:', error.message);
            return [];
        }
    }

    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü–æ–ª—É—á–µ–Ω–∏–µ –í–°–ï–• —Å–ª–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è (–±–µ–∑ –ª–∏–º–∏—Ç–∞)
    async getWordsForReview(userId) {
        if (!this.initialized) {
            return [];
        }
        
        try {
            const userWords = await this.getUserWords(userId);
            const now = new Date();
            
            // –§–∏–ª—å—Ç—Ä—É–µ–º —Å–ª–æ–≤–∞, –≥–æ—Ç–æ–≤—ã–µ –∫ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—é
            const wordsForReview = userWords.filter(word => {
                if (!word.nextReview || word.status !== 'active') return false;
                try {
                    const reviewDate = new Date(word.nextReview);
                    return reviewDate <= now;
                } catch (dateError) {
                    console.error(`‚ùå Invalid date for word "${word.english}":`, word.nextReview);
                    return false;
                }
            });

            // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É (—Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ, –ø–æ—Ç–æ–º –ø–æ –¥–∞—Ç–µ)
            wordsForReview.sort((a, b) => {
                const dateA = new Date(a.nextReview);
                const dateB = new Date(b.nextReview);
                return dateA - dateB; // –°–Ω–∞—á–∞–ª–∞ —Å–∞–º—ã–µ —Å—Ç–∞—Ä—ã–µ
            });

            // –ë–ï–ó –õ–ò–ú–ò–¢–ê –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ –≥–æ—Ç–æ–≤—ã–µ —Å–ª–æ–≤–∞
            return wordsForReview;
            
        } catch (error) {
            console.error('‚ùå Error getting words for review:', error.message);
            return [];
        }
    }

// ‚úÖ –£–õ–£–ß–®–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Å–ª–æ–≤ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
async getNewWordsForLearning(userId) {
    if (!this.initialized) {
        return [];
    }
    
    try {
        const userWords = await this.getUserWords(userId);
        const today = new Date();
        today.setHours(0, 0, 0, 0);
        
        console.log(`üîç –ü–æ–∏—Å–∫ –Ω–æ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);

        // –§–∏–ª—å—Ç—Ä—É–µ–º —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–∑–¥–∞–Ω—ã —Å–µ–≥–æ–¥–Ω—è –∏ –∏–º–µ—é—Ç 0 –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
        const newWords = userWords.filter(word => {
            if (!word.nextReview || word.status !== 'active') return false;
            
            try {
                const createdDate = new Date(word.createdDate);
                const isCreatedToday = createdDate >= today;
                const hasZeroRepetitions = !word.reps || word.reps === 0;
                
                const isNewWord = isCreatedToday && hasZeroRepetitions;
                
                if (isNewWord) {
                    console.log(`‚úÖ –°–ª–æ–≤–æ "${word.english}" - –ù–û–í–û–ï: —Å–æ–∑–¥–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è, –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π: ${word.reps || 0}`);
                }
                
                return isNewWord;
            } catch (dateError) {
                console.error(`‚ùå Invalid date for word "${word.english}"`);
                return false;
            }
        });

        console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –Ω–æ–≤—ã—Ö —Å–ª–æ–≤: ${newWords.length}`);
        
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è
        newWords.sort((a, b) => new Date(b.createdDate) - new Date(a.createdDate));

        // –õ–∏–º–∏—Ç 5 –Ω–æ–≤—ã—Ö —Å–ª–æ–≤ –≤ –¥–µ–Ω—å
        return newWords.slice(0, 5);
        
    } catch (error) {
        console.error('‚ùå Error getting new words for learning:', error.message);
        return [];
    }
}

    // ‚úÖ –§–£–ù–ö–¶–ò–Ø: –ü—Ä–æ–≤–µ—Ä–∫–∞ –µ—Å—Ç—å –ª–∏ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è (–¥–ª—è –Ω–æ—Ç–∏—Ñ–∏–∫–∞—Ü–∏–π)
    async hasWordsForReview(userId) {
        if (!this.initialized) {
            return false;
        }
        
        try {
            const wordsForReview = await this.getWordsForReview(userId);
            return wordsForReview.length > 0;
        } catch (error) {
            console.error('‚ùå Error checking words for review:', error.message);
            return false;
        }
    }

    // ‚úÖ –§–£–ù–ö–¶–ò–Ø: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ª–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
    async getReviewWordsCount(userId) {
        if (!this.initialized) {
            return 0;
        }
        
        try {
            const wordsForReview = await this.getWordsForReview(userId);
            return wordsForReview.length;
        } catch (error) {
            console.error('‚ùå Error getting review words count:', error.message);
            return 0;
        }
    }

  // ‚úÖ –§–£–ù–ö–¶–ò–Ø: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–æ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è
async getNewWordsCount(userId) {
    if (!this.initialized) {
        return 0;
    }
    
    try {
        const newWords = await this.getNewWordsForLearning(userId);
        return newWords.length;
    } catch (error) {
        console.error('‚ùå Error getting new words count:', error.message);
        return 0;
    }
}
// ‚úÖ –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ—Å–ª–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
async updateCardAfterReview(userId, english, fsrsData, rating) {
    if (!this.initialized) {
        return false;
    }
    
    try {
        // –ù–∞—Ö–æ–¥–∏–º —Ç–µ–∫—É—â—É—é –∫–∞—Ä—Ç–æ—á–∫—É —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
        const userWords = await this.getUserWords(userId);
        const currentWord = userWords.find(w => w.english.toLowerCase() === english.toLowerCase());
        const currentReps = currentWord ? (currentWord.reps || 0) : 0;
        
        // –ù–∞—Ö–æ–¥–∏–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        const response = await this.sheets.spreadsheets.values.get({
            spreadsheetId: this.spreadsheetId,
            range: 'Words!A:I',
        });
        
        const rows = response.data.values || [];
        let rowIndex = -1;
        
        for (let i = 0; i < rows.length; i++) {
            if (rows[i][0] === userId.toString() && 
                rows[i][1].toLowerCase() === english.toLowerCase() && 
                rows[i][8] === 'active') {
                rowIndex = i + 1;
                break;
            }
        }

        if (rowIndex === -1) {
            console.error('‚ùå Word not found for review update:', english);
            return false;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª, –¥–∞—Ç—É —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
        await this.sheets.spreadsheets.values.update({
            spreadsheetId: this.spreadsheetId,
            range: `Words!G${rowIndex}:I${rowIndex}`,
            valueInputOption: 'RAW',
            resource: {
                values: [[
                    fsrsData.card.interval || 1,
                    fsrsData.card.due.toISOString(),
                    'active'
                    // reps –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –≤—ã–∑–æ–≤–µ
                ]]
            }
        });

        console.log(`‚úÖ Updated review for word "${english}": ${rating}, reps: ${currentReps + 1}`);
        return true;
    } catch (error) {
        console.error('‚ùå Error updating card after review:', error.message);
        return false;
    }
}

    // ‚úÖ –§–£–ù–ö–¶–ò–Ø: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
    async updateWordReview(userId, english, newInterval, nextReviewDate) {
        if (!this.initialized) {
            return false;
        }
        
        try {
            // –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Ö–æ–¥–∏–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            const response = await this.sheets.spreadsheets.values.get({
                spreadsheetId: this.spreadsheetId,
                range: 'Words!A:I',
            });
            
            const rows = response.data.values || [];
            let rowIndex = -1;
            
            for (let i = 0; i < rows.length; i++) {
                if (rows[i][0] === userId.toString() && 
                    rows[i][1].toLowerCase() === english.toLowerCase() && 
                    (rows[i][8] === 'active' || !rows[i][8] || rows[i].length < 9)) {
                    rowIndex = i + 1;
                    break;
                }
            }

            if (rowIndex === -1) {
                console.error('‚ùå Word not found for update:', english);
                return false;
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –∏ –¥–∞—Ç—É —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
            await this.sheets.spreadsheets.values.update({
                spreadsheetId: this.spreadsheetId,
                range: `Words!H${rowIndex}:I${rowIndex}`,
                valueInputOption: 'RAW',
                resource: {
                    values: [[
                        newInterval,
                        nextReviewDate.toISOString()
                    ]]
                }
            });

            console.log(`‚úÖ Updated review for word "${english}": interval ${newInterval} days`);
            return true;
        } catch (error) {
            console.error('‚ùå Error updating word review:', error.message);
            return false;
        }
    }

    // ‚úÖ –§–£–ù–ö–¶–ò–Ø: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É —Å–ª–æ–≤—É
    async addMeaningToWord(userId, english, newMeaning) {
        if (!this.initialized) {
            return false;
        }
        
        try {
            // –ù–∞—Ö–æ–¥–∏–º —Å–ª–æ–≤–æ
            const userWords = await this.getUserWords(userId);
            const word = userWords.find(w => w.english.toLowerCase() === english.toLowerCase());
            
            if (!word) {
                console.error('‚ùå Word not found for adding meaning:', english);
                return false;
            }

            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            const updatedMeanings = [...word.meanings, newMeaning];
            const updatedMeaningsJSON = JSON.stringify(updatedMeanings);

            // –ù–∞—Ö–æ–¥–∏–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            const response = await this.sheets.spreadsheets.values.get({
                spreadsheetId: this.spreadsheetId,
                range: 'Words!A:I',
            });
            
            const rows = response.data.values || [];
            let rowIndex = -1;
            
            for (let i = 0; i < rows.length; i++) {
                if (rows[i][0] === userId.toString() && 
                    rows[i][1].toLowerCase() === english.toLowerCase() && 
                    (rows[i][8] === 'active' || !rows[i][8] || rows[i].length < 9)) {
                    rowIndex = i + 1;
                    break;
                }
            }

            if (rowIndex === -1) {
                console.error('‚ùå Word not found for adding meaning:', english);
                return false;
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º meanings
            await this.sheets.spreadsheets.values.update({
                spreadsheetId: this.spreadsheetId,
                range: `Words!E${rowIndex}`,
                valueInputOption: 'RAW',
                resource: {
                    values: [[updatedMeaningsJSON]]
                }
            });

            console.log(`‚úÖ Added new meaning to word "${english}"`);
            return true;
        } catch (error) {
            console.error('‚ùå Error adding meaning to word:', error.message);
            return false;
        }
    }

    // ‚ùó –°–¢–ê–†–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –û–ë–†–ê–¢–ù–û–ô –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò
    async addWord(chatId, english, transcription, translation, audioUrl = '', examples = '') {
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç –≤ –Ω–æ–≤—ã–π
        const meanings = [{
            translation: translation,
            example: examples || '',
            partOfSpeech: '',
            definition: ''
        }];
        return await this.addWordWithMeanings(chatId, english, transcription, audioUrl, meanings);
    }

    async addWordWithExamples(chatId, english, transcription, translation, audioUrl = '', examples = '') {
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç –≤ –Ω–æ–≤—ã–π
        const meanings = [{
            translation: translation,
            example: examples || '',
            partOfSpeech: '',
            definition: ''
        }];
        return await this.addWordWithMeanings(chatId, english, transcription, audioUrl, meanings);
    }

    // ‚úÖ –§–£–ù–ö–¶–ò–Ø: –ú–∏–≥—Ä–∞—Ü–∏—è —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç
    async migrateOldDataToNewFormat(userId) {
        if (!this.initialized) {
            return false;
        }
        
        try {
            console.log(`üîÑ Starting migration for user ${userId}`);
            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–ª–æ–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const userWords = await this.getUserWords(userId);
            
            let migratedCount = 0;
            
            for (const word of userWords) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –º–∏–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ —Å–ª–æ–≤–æ
                if (word.meanings.length === 0 || 
                    (word.meanings.length === 1 && word.meanings[0].translation === '–ü–µ—Ä–µ–≤–æ–¥ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω')) {
                    
                    // –≠—Ç–æ —Å–ª–æ–≤–æ —Å –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏, –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å
                    console.log(`üîÑ Migrating word: ${word.english}`);
                    
                    // –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É meanings
                    const correctMeanings = [{
                        translation: '–ü–µ—Ä–µ–≤–æ–¥ —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ–±–Ω–æ–≤–∏—Ç—å',
                        example: '',
                        partOfSpeech: '',
                        definition: ''
                    }];
                    
                    const correctMeaningsJSON = JSON.stringify(correctMeanings);
                    
                    // –ù–∞—Ö–æ–¥–∏–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                    const response = await this.sheets.spreadsheets.values.get({
                        spreadsheetId: this.spreadsheetId,
                        range: 'Words!A:I',
                    });
                    
                    const rows = response.data.values || [];
                    let rowIndex = -1;
                    
                    for (let i = 0; i < rows.length; i++) {
                        if (rows[i][0] === userId.toString() && 
                            rows[i][1].toLowerCase() === word.english.toLowerCase()) {
                            rowIndex = i + 1;
                            break;
                        }
                    }

                    if (rowIndex !== -1) {
                        // –û–±–Ω–æ–≤–ª—è–µ–º meanings
                        await this.sheets.spreadsheets.values.update({
                            spreadsheetId: this.spreadsheetId,
                            range: `Words!E${rowIndex}`,
                            valueInputOption: 'RAW',
                            resource: {
                                values: [[correctMeaningsJSON]]
                            }
                        });
                        migratedCount++;
                    }
                }
            }
            
            console.log(`‚úÖ Migration completed: ${migratedCount} words migrated`);
            return true;
        } catch (error) {
            console.error('‚ùå Error during migration:', error.message);
            return false;
        }
    }

    // ‚úÖ –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–¥–ª—è –Ω–æ—Ç–∏—Ñ–∏–∫–∞—Ü–∏–π)
    async getAllActiveUsers() {
        if (!this.initialized) {
            return [];
        }

        try {
            const response = await this.sheets.spreadsheets.values.get({
                spreadsheetId: this.spreadsheetId,
                range: 'Words!A:I',
            });

            const rows = response.data.values || [];
            
            // –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            const userSet = new Set();
            
            for (let i = 1; i < rows.length; i++) {
                const row = rows[i];
                if (row.length > 0 && row[0]) {
                    userSet.add(row[0]);
                }
            }
            
            return Array.from(userSet);
        } catch (error) {
            console.error('‚ùå Error getting all active users:', error.message);
            return [];
        }
    }
}



