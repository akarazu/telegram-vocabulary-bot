// services/batch-sheets-service.js
import { GoogleSheetsService } from './google-sheets.js';

export class BatchSheetsService {
    constructor(sheetsService) {
        this.sheetsService = sheetsService;
        this.batchQueue = new Map();
        this.batchTimeout = null;
        
        // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞—Ç—á–∏–Ω–≥–∞
        this.BATCH_DELAY = 15000; // 15 —Å–µ–∫—É–Ω–¥ –¥–ª—è –±–æ–ª—å—à–µ–≥–æ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è
        this.MAX_BATCH_SIZE = 25; // –£–≤–µ–ª–∏—á–µ–Ω–æ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        this.MIN_BATCH_SIZE = 5;  // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        this.MAX_QUEUE_SIZE = 1000; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –æ—á–µ—Ä–µ–¥–∏
        
        // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        this.stats = {
            totalBatches: 0,
            totalUpdates: 0,
            successfulUpdates: 0,
            failedUpdates: 0,
            queueOverflows: 0,
            lastBatchSize: 0
        };

        // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        this.retryQueue = new Map();
        this.maxRetries = 3;
        
        // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        this.lastProcessed = Date.now();
        
        console.log('üîß BatchSheetsService initialized with optimizations');
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
        this.startPeriodicProcessing();
    }
    
    // ‚úÖ –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –±–∞—Ç—á-–æ—á–µ—Ä–µ–¥—å
    async updateWordReviewBatch(chatId, english, interval, nextReview, lastReview) {
        const key = `${chatId}_${english.toLowerCase()}`;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –æ—á–µ—Ä–µ–¥–∏
        if (this.getTotalQueueSize() >= this.MAX_QUEUE_SIZE) {
            this.stats.queueOverflows++;
            console.log(`üö´ Batch queue overflow, processing immediately`);
            await this.processAllBatches();
        }
        
        if (!this.batchQueue.has(chatId)) {
            this.batchQueue.set(chatId, new Map());
        }
        
        const userBatch = this.batchQueue.get(chatId);
        userBatch.set(english, { 
            interval, 
            nextReview, 
            lastReview,
            timestamp: Date.now(),
            retryCount: 0
        });
        
        this.stats.totalUpdates++;
        
        console.log(`üì¶ Added to batch: "${english}" for user ${chatId}. Queue size: ${userBatch.size}`);
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ—Å–ª–∏ –Ω–∞–∫–æ–ø–∏–ª–æ—Å—å –º–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        if (userBatch.size >= this.MAX_BATCH_SIZE) {
            console.log(`üö® Batch size limit reached for user ${chatId}, processing immediately`);
            await this.processUserBatch(chatId);
            return true;
        }
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if (!this.batchTimeout) {
            this.batchTimeout = setTimeout(() => {
                this.processAllBatches().catch(console.error);
            }, this.BATCH_DELAY);
        }
        
        return true;
    }
    
    // ‚úÖ –û–ë–†–ê–ë–û–¢–ö–ê –í–°–ï–• –ë–ê–¢–ß–ï–ô
    async processAllBatches() {
        if (this.batchTimeout) {
            clearTimeout(this.batchTimeout);
            this.batchTimeout = null;
        }
        
        const startTime = Date.now();
        console.log(`üîÑ Processing all batches...`);
        
        let totalProcessed = 0;
        const userCount = this.batchQueue.size;
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º
        const users = Array.from(this.batchQueue.keys());
        const BATCH_CONCURRENCY = 3; // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º
        
        for (let i = 0; i < users.length; i += BATCH_CONCURRENCY) {
            const userBatch = users.slice(i, i + BATCH_CONCURRENCY);
            const promises = userBatch.map(chatId => this.processUserBatch(chatId));
            
            const results = await Promise.allSettled(promises);
            totalProcessed += results.filter(r => r.status === 'fulfilled').length;
            
            // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –≥—Ä—É–ø–ø–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            if (i + BATCH_CONCURRENCY < users.length) {
                await new Promise(resolve => setTimeout(resolve, 100));
            }
        }
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—á–µ—Ä–µ–¥—å –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
        await this.processRetryQueue();
        
        const processingTime = Date.now() - startTime;
        this.lastProcessed = Date.now();
        
        console.log(`‚úÖ Batch processing completed: ${totalProcessed}/${userCount} users, ` +
                   `${this.stats.lastBatchSize} updates, ${processingTime}ms`);
        
        this.stats.totalBatches++;
    }
    
    // ‚úÖ –û–ë–†–ê–ë–û–¢–ö–ê –ë–ê–¢–ß–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
    async processUserBatch(chatId) {
        const userBatch = this.batchQueue.get(chatId);
        if (!userBatch || userBatch.size === 0) {
            this.batchQueue.delete(chatId);
            return true;
        }
        
        try {
            console.log(`üë§ Processing batch for user ${chatId}: ${userBatch.size} words`);
            
            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            const wordUpdates = Array.from(userBatch.entries());
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            const success = await this.sheetsService.batchUpdateWords(chatId, wordUpdates);
            
            if (success) {
                this.stats.successfulUpdates += userBatch.size;
                this.stats.lastBatchSize = userBatch.size;
                
                console.log(`‚úÖ User ${chatId} batch successful: ${userBatch.size} words`);
                
                // –û—á–∏—â–∞–µ–º —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –±–∞—Ç—á
                this.batchQueue.delete(chatId);
                return true;
            } else {
                throw new Error('Batch update failed');
            }
            
        } catch (error) {
            console.error(`‚ùå User ${chatId} batch failed:`, error.message);
            await this.handleBatchFailure(chatId, userBatch, error);
            return false;
        }
    }
    
    // ‚úÖ –û–ë–†–ê–ë–û–¢–ö–ê –ù–ï–£–î–ê–ß–ù–´–• –ë–ê–¢–ß–ï–ô
    async handleBatchFailure(chatId, userBatch, error) {
        const failedUpdates = Array.from(userBatch.entries());
        
        for (const [english, data] of failedUpdates) {
            const key = `${chatId}_${english}`;
            
            if (data.retryCount < this.maxRetries) {
                // –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
                if (!this.retryQueue.has(chatId)) {
                    this.retryQueue.set(chatId, new Map());
                }
                
                const retryData = {
                    ...data,
                    retryCount: data.retryCount + 1,
                    lastError: error.message,
                    nextRetry: Date.now() + (Math.pow(2, data.retryCount) * 5000) // –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                };
                
                this.retryQueue.get(chatId).set(english, retryData);
                console.log(`üîÑ Queued for retry: "${english}" (attempt ${retryData.retryCount})`);
            } else {
                // –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
                this.stats.failedUpdates++;
                console.error(`üí• Max retries exceeded for: "${english}"`);
                
                // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                this.notifyAdminAboutFailure(chatId, english, error);
            }
        }
        
        // –û—á–∏—â–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –±–∞—Ç—á –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        this.batchQueue.delete(chatId);
    }
    
    // ‚úÖ –û–ë–†–ê–ë–û–¢–ö–ê –û–ß–ï–†–ï–î–ò –ü–û–í–¢–û–†–ù–´–• –ü–û–ü–´–¢–û–ö
    async processRetryQueue() {
        if (this.retryQueue.size === 0) return;
        
        console.log(`üîÑ Processing retry queue: ${this.retryQueue.size} users`);
        
        const now = Date.now();
        let retryCount = 0;
        
        for (const [chatId, retryBatch] of this.retryQueue.entries()) {
            const readyForRetry = Array.from(retryBatch.entries())
                .filter(([english, data]) => data.nextRetry <= now);
            
            if (readyForRetry.length > 0) {
                console.log(`üîÑ Retrying ${readyForRetry.length} words for user ${chatId}`);
                
                // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –æ—Å–Ω–æ–≤–Ω—É—é –æ—á–µ—Ä–µ–¥—å
                if (!this.batchQueue.has(chatId)) {
                    this.batchQueue.set(chatId, new Map());
                }
                
                const userBatch = this.batchQueue.get(chatId);
                
                for (const [english, data] of readyForRetry) {
                    userBatch.set(english, data);
                    retryBatch.delete(english);
                    retryCount++;
                }
                
                // –ï—Å–ª–∏ –≤—Å–µ —Å–ª–æ–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã, —É–¥–∞–ª—è–µ–º –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
                if (retryBatch.size === 0) {
                    this.retryQueue.delete(chatId);
                }
            }
        }
        
        if (retryCount > 0) {
            console.log(`‚úÖ Retry queue processed: ${retryCount} words moved back to main queue`);
        }
    }
    
    // ‚úÖ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –í–°–ï–• –û–ñ–ò–î–ê–Æ–©–ò–• –ë–ê–¢–ß–ï–ô
    async flushAll() {
        console.log(`üöÄ Flushing all batches...`);
        
        if (this.batchTimeout) {
            clearTimeout(this.batchTimeout);
            this.batchTimeout = null;
        }
        
        await this.processAllBatches();
        console.log(`‚úÖ All batches flushed successfully`);
    }
    
    // ‚úÖ –ü–ï–†–ò–û–î–ò–ß–ï–°–ö–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê (–Ω–∞ —Å–ª—É—á–∞–π –∑–∞–≤–∏—Å—à–∏—Ö –±–∞—Ç—á–µ–π)
    startPeriodicProcessing() {
        // –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ –±–∞—Ç—á–∏
        setInterval(() => {
            const now = Date.now();
            const STALE_THRESHOLD = 2 * 60 * 1000; // 2 –º–∏–Ω—É—Ç—ã
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –±–∞—Ç—á–∏
            let staleBatches = 0;
            for (const [chatId, userBatch] of this.batchQueue.entries()) {
                const oldestUpdate = Math.min(...Array.from(userBatch.values()).map(d => d.timestamp));
                if (now - oldestUpdate > STALE_THRESHOLD) {
                    staleBatches++;
                    console.log(`‚è∞ Processing stale batch for user ${chatId}`);
                    this.processUserBatch(chatId).catch(console.error);
                }
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—á–µ—Ä–µ–¥—å –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
            for (const [chatId, retryBatch] of this.retryQueue.entries()) {
                const readyForRetry = Array.from(retryBatch.entries())
                    .filter(([english, data]) => data.nextRetry <= now);
                
                if (readyForRetry.length > 0) {
                    console.log(`‚è∞ Processing stale retry batch for user ${chatId}`);
                    this.processRetryQueue().catch(console.error);
                }
            }
            
            if (staleBatches > 0) {
                console.log(`üïí Processed ${staleBatches} stale batches`);
            }
            
            // –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞–∑ –≤ 10 –º–∏–Ω—É—Ç
            if (Math.random() < 0.1) {
                this.logStats();
            }
            
        }, 30 * 1000); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    }
    
    // ‚úÖ –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò –ú–û–ù–ò–¢–û–†–ò–ù–ì
    getStats() {
        const successRate = this.stats.totalUpdates > 0 
            ? (this.stats.successfulUpdates / this.stats.totalUpdates * 100).toFixed(1)
            : 0;
            
        return {
            ...this.stats,
            successRate: `${successRate}%`,
            currentQueueSize: this.getTotalQueueSize(),
            currentUsersInQueue: this.batchQueue.size,
            currentRetryQueueSize: this.getTotalRetryQueueSize(),
            lastProcessed: new Date(this.lastProcessed).toISOString(),
            settings: {
                batchDelay: this.BATCH_DELAY,
                maxBatchSize: this.MAX_BATCH_SIZE,
                maxQueueSize: this.MAX_QUEUE_SIZE,
                maxRetries: this.maxRetries
            }
        };
    }
    
    logStats() {
        const stats = this.getStats();
        console.log(`üìä Batch Stats - Total: ${stats.totalBatches}, ` +
                   `Success: ${stats.successfulUpdates}/${stats.totalUpdates} (${stats.successRate}), ` +
                   `Queue: ${stats.currentQueueSize}, Retry: ${stats.currentRetryQueueSize}`);
    }
    
    // ‚úÖ –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´
    getTotalQueueSize() {
        let total = 0;
        for (const userBatch of this.batchQueue.values()) {
            total += userBatch.size;
        }
        return total;
    }
    
    getTotalRetryQueueSize() {
        let total = 0;
        for (const retryBatch of this.retryQueue.values()) {
            total += retryBatch.size;
        }
        return total;
    }
    
    // ‚úÖ –£–í–ï–î–û–ú–õ–ï–ù–ò–ï –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê –û –°–ë–û–Ø–•
    notifyAdminAboutFailure(chatId, english, error) {
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å Telegram –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞
        // –∏–ª–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª
        console.error(`üö® CRITICAL: Failed to update word "${english}" for user ${chatId}:`, error.message);
        
        // –ü—Ä–∏–º–µ—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Telegram (—Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
        /*
        if (process.env.ADMIN_CHAT_ID) {
            const message = `üö® Batch Update Failed\nUser: ${chatId}\nWord: ${english}\nError: ${error.message}`;
            // await bot.sendMessage(process.env.ADMIN_CHAT_ID, message);
        }
        */
    }
    
    // ‚úÖ –û–ß–ò–°–¢–ö–ê –û–ß–ï–†–ï–î–ï–ô (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
    clearAllQueues() {
        const mainQueueSize = this.getTotalQueueSize();
        const retryQueueSize = this.getTotalRetryQueueSize();
        
        this.batchQueue.clear();
        this.retryQueue.clear();
        
        if (this.batchTimeout) {
            clearTimeout(this.batchTimeout);
            this.batchTimeout = null;
        }
        
        console.log(`üßπ Queues cleared: ${mainQueueSize} main, ${retryQueueSize} retry`);
        
        return {
            mainQueueCleared: mainQueueSize,
            retryQueueCleared: retryQueueSize
        };
    }
    
    // ‚úÖ –ü–†–û–í–ï–†–ö–ê –°–û–°–¢–û–Ø–ù–ò–Ø –°–ï–†–í–ò–°–ê
    healthCheck() {
        const queueSize = this.getTotalQueueSize();
        const retrySize = this.getTotalRetryQueueSize();
        const timeSinceLastProcess = Date.now() - this.lastProcessed;
        
        const status = queueSize < this.MAX_QUEUE_SIZE * 0.8 ? 'healthy' : 'warning';
        
        return {
            status,
            queueSize,
            retryQueueSize: retrySize,
            usersInQueue: this.batchQueue.size,
            timeSinceLastProcess: `${Math.round(timeSinceLastProcess / 1000)}s`,
            stats: this.getStats()
        };
    }
    
    // ‚úÖ –ò–ó–ú–ï–ù–ï–ù–ò–ï –ù–ê–°–¢–†–û–ï–ö –í –†–ê–ù–¢–ê–ô–ú–ï
    updateSettings(newSettings) {
        if (newSettings.batchDelay !== undefined) {
            this.BATCH_DELAY = Math.max(5000, newSettings.batchDelay);
        }
        if (newSettings.maxBatchSize !== undefined) {
            this.MAX_BATCH_SIZE = Math.max(1, newSettings.maxBatchSize);
        }
        if (newSettings.maxQueueSize !== undefined) {
            this.MAX_QUEUE_SIZE = Math.max(10, newSettings.maxQueueSize);
        }
        if (newSettings.maxRetries !== undefined) {
            this.maxRetries = Math.max(0, newSettings.maxRetries);
        }
        
        console.log(`‚öôÔ∏è Batch settings updated:`, {
            batchDelay: this.BATCH_DELAY,
            maxBatchSize: this.MAX_BATCH_SIZE,
            maxQueueSize: this.MAX_QUEUE_SIZE,
            maxRetries: this.maxRetries
        });
        
        return this.getStats().settings;
    }
    
    // ‚úÖ GRACEFUL SHUTDOWN
    async shutdown() {
        console.log('üîÑ BatchSheetsService shutting down...');
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
        if (this.batchTimeout) {
            clearTimeout(this.batchTimeout);
            this.batchTimeout = null;
        }
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –±–∞—Ç—á–∏
        await this.flushAll();
        
        // –õ–æ–≥–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        this.logStats();
        
        console.log('‚úÖ BatchSheetsService shutdown completed');
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
let batchServiceInstance = null;

export function getBatchSheetsService(sheetsService) {
    if (!batchServiceInstance) {
        if (!sheetsService) {
            throw new Error('GoogleSheetsService is required for BatchSheetsService');
        }
        batchServiceInstance = new BatchSheetsService(sheetsService);
    }
    
    return batchServiceInstance;
}

// Graceful shutdown
process.on('SIGINT', async () => {
    if (batchServiceInstance) {
        await batchServiceInstance.shutdown();
    }
    process.exit(0);
});

process.on('SIGTERM', async () => {
    if (batchServiceInstance) {
        await batchServiceInstance.shutdown();
    }
    process.exit(0);
});
