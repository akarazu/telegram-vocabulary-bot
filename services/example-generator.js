import axios from 'axios';

export class ExampleGeneratorService {
    constructor() {
        this.useYandex = !!process.env.YANDEX_DICTIONARY_API_KEY;
    }

    async generateExamples(word, translation) {
        console.log(`üîÑ Generating examples for: "${word}" -> "${translation}"`);
        
        let examples = [];

        // ‚úÖ –ü–ï–†–í–û–ï: –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–º–µ—Ä—ã –∏–∑ –Ø–Ω–¥–µ–∫—Å API
        if (this.useYandex) {
            try {
                console.log('üîç PRIMARY: Trying Yandex API for examples...');
                const yandexExamples = await this.getYandexExamples(word);
                if (yandexExamples && yandexExamples.length > 0) {
                    examples = yandexExamples;
                    console.log(`‚úÖ PRIMARY: Found ${yandexExamples.length} examples from Yandex`);
                    return examples;
                }
            } catch (error) {
                console.log('‚ùå PRIMARY: Yandex examples failed:', error.message);
            }
        }

        // ‚úÖ –í–¢–û–†–û–ï: –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–º–µ—Ä—ã –∏–∑ –±—ç–∫–∞–ø —Å–ª–æ–≤–∞—Ä—è
        try {
            console.log('üîÑ FALLBACK: Trying Backup Dictionary for examples...');
            const backupExamples = await this.getBackupExamples(word);
            if (backupExamples && backupExamples.length > 0) {
                examples = backupExamples;
                console.log(`‚úÖ FALLBACK: Found ${backupExamples.length} examples from Backup`);
                return examples;
            }
        } catch (error) {
            console.log('‚ùå FALLBACK: Backup examples failed:', error.message);
        }

        // ‚úÖ –¢–†–ï–¢–¨–ï: –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç—ã–µ –ø—Ä–∏–º–µ—Ä—ã –≤—Ä—É—á–Ω—É—é
        console.log('‚úèÔ∏è  GENERIC: Creating generic examples...');
        examples = this.getGenericExamples(word, translation);
        console.log(`‚úÖ GENERIC: Created ${examples.length} generic examples`);

        return examples;
    }

    async getYandexExamples(word) {
        try {
            console.log(`üîç Yandex API call for examples: "${word}"`);
            
            const response = await axios.get('https://dictionary.yandex.net/api/v1/dicservice.json/lookup', {
                params: {
                    key: process.env.YANDEX_DICTIONARY_API_KEY,
                    lang: 'en-ru',
                    text: word,
                    ui: 'ru'
                },
                timeout: 10000
            });

            return this.extractExamplesFromYandex(response.data, word);
            
        } catch (error) {
            console.error('‚ùå Yandex examples error:', error.message);
            return [];
        }
    }

    extractExamplesFromYandex(data, originalWord) {
        // ‚úÖ –í–°–ï–ì–î–ê –í–û–ó–í–†–ê–©–ê–ï–ú –ú–ê–°–°–ò–í
        if (!data.def || !Array.isArray(data.def) || data.def.length === 0) {
            console.log('‚ùå Yandex: No definitions found for examples');
            return [];
        }

        console.log(`üîç Yandex found ${data.def.length} definition(s) for examples`);

        const examples = [];
        let exampleCount = 0;

        for (const definition of data.def) {
            if (exampleCount >= 3) break; // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 3 –ø—Ä–∏–º–µ—Ä–∞–º–∏
            
            if (definition.ex && Array.isArray(definition.ex)) {
                console.log(`üîç Processing ${definition.ex.length} example(s) from Yandex`);
                
                for (const example of definition.ex) {
                    if (exampleCount >= 3) break;
                    
                    if (example.text && example.tr && Array.isArray(example.tr)) {
                        const englishExample = example.text.trim();
                        const russianExample = example.tr[0]?.text?.trim();
                        
                        if (englishExample && russianExample) {
                            // ‚úÖ –§–û–†–ú–ê–¢–ò–†–£–ï–ú –ü–†–ò–ú–ï–† –ö–ê–ö –°–¢–†–û–ö–£
                            const formattedExample = `${englishExample} - ${russianExample}`;
                            examples.push(formattedExample);
                            exampleCount++;
                            console.log(`‚úÖ Yandex example: "${formattedExample}"`);
                        }
                    }
                }
            }
        }

        return examples;
    }

    async getBackupExamples(word) {
        try {
            console.log(`üîç Backup API call for examples: "${word}"`);
            
            const response = await axios.get(
                `https://api.dictionaryapi.dev/api/v2/entries/en/${encodeURIComponent(word)}`,
                { timeout: 5000 }
            );

            return this.extractExamplesFromFreeDictionary(response.data, word);
        } catch (error) {
            console.error('Free Dictionary API error for examples:', error.message);
            return []; // ‚úÖ –í–°–ï–ì–î–ê –í–û–ó–í–†–ê–©–ê–ï–ú –ú–ê–°–°–ò–í
        }
    }

    extractExamplesFromFreeDictionary(data, originalWord) {
        // ‚úÖ –í–°–ï–ì–î–ê –í–û–ó–í–†–ê–©–ê–ï–ú –ú–ê–°–°–ò–í
        if (!Array.isArray(data) || data.length === 0) {
            console.log('‚ùå FreeDictionary: No entries found for examples');
            return [];
        }

        console.log(`üîç FreeDictionary found ${data.length} entry/entries for examples`);

        const examples = [];
        let exampleCount = 0;

        for (const entry of data) {
            if (exampleCount >= 3) break;
            
            if (entry.meanings && Array.isArray(entry.meanings)) {
                for (const meaning of entry.meanings) {
                    if (exampleCount >= 3) break;
                    
                    if (meaning.definitions && Array.isArray(meaning.definitions)) {
                        for (const definition of meaning.definitions) {
                            if (exampleCount >= 3) break;
                            
                            if (definition.example && definition.example.trim()) {
                                const englishExample = definition.example.trim();
                                // ‚úÖ –§–û–†–ú–ê–¢–ò–†–£–ï–ú –ü–†–ò–ú–ï–† –ö–ê–ö –°–¢–†–û–ö–£
                                const formattedExample = `${englishExample} - –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è`;
                                examples.push(formattedExample);
                                exampleCount++;
                                console.log(`‚úÖ Backup example: "${formattedExample}"`);
                            }
                        }
                    }
                }
            }
        }

        return examples;
    }

    getGenericExamples(word, translation) {
        // ‚úÖ –í–°–ï–ì–î–ê –í–û–ó–í–†–ê–©–ê–ï–ú –ú–ê–°–°–ò–í –ò–ó 2 –°–¢–†–û–ö
        return [
            `I often use the word "${word}" in my conversations. - –Ø —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É—é —Å–ª–æ–≤–æ "${translation}" –≤ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞—Ö.`,
            `Can you give me an example with "${word}"? - –ú–æ–∂–µ—Ç–µ –ø—Ä–∏–≤–µ—Å—Ç–∏ –ø—Ä–∏–º–µ—Ä —Å "${translation}"?`
        ];
    }

    // ‚úÖ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏–º–µ—Ä–æ–≤ –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥
    formatExamplesForDisplay(examples) {
        // ‚úÖ –ó–ê–©–ò–¢–ê –û–¢ –ù–ï–ö–û–†–†–ï–ö–¢–ù–´–• –î–ê–ù–ù–´–•
        if (!examples || !Array.isArray(examples)) {
            return '–ü—Ä–∏–º–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã';
        }
        
        if (examples.length === 0) {
            return '–ü—Ä–∏–º–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã';
        }
        
        return examples.map((example, index) => {
            // ‚úÖ –û–ë–†–ê–ë–ê–¢–´–í–ê–ï–ú –†–ê–ó–ù–´–ï –§–û–†–ú–ê–¢–´ –î–ê–ù–ù–´–•
            if (typeof example === 'string') {
                return `${index + 1}. ${example}`;
            } else if (example && typeof example === 'object' && example.english && example.russian) {
                return `${index + 1}. ${example.english} - ${example.russian}`;
            } else {
                // ‚úÖ –ï–°–õ–ò –ù–ï–ò–ó–í–ï–°–¢–ù–´–ô –§–û–†–ú–ê–¢, –ü–†–ï–û–ë–†–ê–ó–£–ï–ú –í –°–¢–†–û–ö–£
                return `${index + 1}. ${String(example)}`;
            }
        }).join('\n');
    }

    // ‚úÖ –ù–û–í–´–ô –ú–ï–¢–û–î: –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    formatExamplesForStorage(examples) {
        // ‚úÖ –ó–ê–©–ò–¢–ê –û–¢ –ù–ï–ö–û–†–†–ï–ö–¢–ù–´–• –î–ê–ù–ù–´–•
        if (!examples || !Array.isArray(examples)) {
            return '';
        }
        
        if (examples.length === 0) {
            return '';
        }
        
        // ‚úÖ –ü–†–ï–û–ë–†–ê–ó–£–ï–ú –í–°–ï –≠–õ–ï–ú–ï–ù–¢–´ –í –°–¢–†–û–ö–ò
        const stringExamples = examples.map(example => {
            if (typeof example === 'string') {
                return example;
            } else if (example && typeof example === 'object' && example.english && example.russian) {
                return `${example.english} - ${example.russian}`;
            } else {
                return String(example);
            }
        });
        
        // ‚úÖ –û–ë–™–ï–î–ò–ù–Ø–ï–ú –ß–ï–†–ï–ó –†–ê–ó–î–ï–õ–ò–¢–ï–õ–¨
        return stringExamples.join(' | ');
    }
}
