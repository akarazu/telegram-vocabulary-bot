import axios from 'axios';

export class ExampleGeneratorService {
    constructor() {
        this.useYandex = !!process.env.YANDEX_DICTIONARY_API_KEY;
    }

    async generateExamples(word, translation) {
        console.log(`üîÑ Generating examples for: "${word}" -> "${translation}"`);
        
        // ‚úÖ –ò–°–ü–û–õ–¨–ó–£–ï–ú –¢–û–õ–¨–ö–û YANDEX API
        if (this.useYandex) {
            try {
                console.log('üîç PRIMARY: Trying Yandex API for examples...');
                const yandexExamples = await this.getYandexExamples(word);
                if (yandexExamples && yandexExamples.length > 0) {
                    console.log(`‚úÖ PRIMARY: Found ${yandexExamples.length} examples from Yandex`);
                    return yandexExamples;
                } else {
                    console.log('‚ùå PRIMARY: No examples found in Yandex');
                    return this.getGenericExamples(word, translation);
                }
            } catch (error) {
                console.log('‚ùå PRIMARY: Yandex examples failed:', error.message);
                return this.getGenericExamples(word, translation);
            }
        } else {
            console.log('‚ùå Yandex API key not available, using generic examples');
            return this.getGenericExamples(word, translation);
        }
    }

    async getYandexExamples(word) {
        try {
            console.log(`üîç Yandex API call for examples: "${word}"`);
            
            const response = await axios.get('https://dictionary.yandex.net/api/v1/dicservice.json/lookup', {
                params: {
                    key: process.env.YANDEX_DICTIONARY_API_KEY,
                    lang: 'en-ru',
                    text: word,
                    ui: 'ru'
                },
                timeout: 10000
            });

            console.log('üìä Yandex API response received');
            return this.extractExamplesFromYandex(response.data, word);
            
        } catch (error) {
            console.error('‚ùå Yandex examples error:', error.message);
            if (error.response) {
                console.error('Yandex response status:', error.response.status);
                console.error('Yandex response data:', error.response.data);
            }
            return [];
        }
    }

    extractExamplesFromYandex(data, originalWord) {
        // ‚úÖ –í–°–ï–ì–î–ê –í–û–ó–í–†–ê–©–ê–ï–ú –ú–ê–°–°–ò–í
        if (!data.def || !Array.isArray(data.def) || data.def.length === 0) {
            console.log('‚ùå Yandex: No definitions found for examples');
            return [];
        }

        console.log(`üîç Yandex found ${data.def.length} definition(s)`);

        const examples = [];
        let exampleCount = 0;

        // ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û –û–ë–†–ê–ë–ê–¢–´–í–ê–ï–ú –°–¢–†–£–ö–¢–£–†–£ YANDEX API
        for (const definition of data.def) {
            if (exampleCount >= 3) break;
            
            // ‚úÖ –ò–©–ï–ú –ü–†–ò–ú–ï–†–´ –í –ü–ï–†–ï–í–û–î–ê–• (tr)
            if (definition.tr && Array.isArray(definition.tr)) {
                for (const translation of definition.tr) {
                    if (exampleCount >= 3) break;
                    
                    // ‚úÖ –ü–†–ò–ú–ï–†–´ –ù–ê–•–û–î–Ø–¢–°–Ø –í –ü–û–õ–ï "ex" –ö–ê–ñ–î–û–ì–û –ü–ï–†–ï–í–û–î–ê
                    if (translation.ex && Array.isArray(translation.ex)) {
                        console.log(`üîç Processing ${translation.ex.length} example(s) from translation: "${translation.text}"`);
                        
                        for (const example of translation.ex) {
                            if (exampleCount >= 3) break;
                            
                            // ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –°–¢–†–£–ö–¢–£–†–ê –ü–†–ò–ú–ï–†–ê: example.text (–∞–Ω–≥–ª) –∏ example.tr[0].text (—Ä—É—Å)
                            if (example.text && example.tr && Array.isArray(example.tr) && example.tr[0]?.text) {
                                const englishExample = example.text.trim();
                                const russianExample = example.tr[0].text.trim();
                                
                                if (englishExample && russianExample) {
                                    // ‚úÖ –§–û–†–ú–ê–¢–ò–†–£–ï–ú –ü–†–ò–ú–ï–† –ö–ê–ö –°–¢–†–û–ö–£
                                    const formattedExample = `${englishExample} - ${russianExample}`;
                                    examples.push(formattedExample);
                                    exampleCount++;
                                    console.log(`‚úÖ Yandex example: "${formattedExample}"`);
                                }
                            }
                        }
                    }
                }
            }
        }

        console.log(`üìä Extracted ${examples.length} examples from Yandex`);
        return examples;
    }

    getGenericExamples(word, translation) {
        // ‚úÖ –í–°–ï–ì–î–ê –í–û–ó–í–†–ê–©–ê–ï–ú –ú–ê–°–°–ò–í –ò–ó 2 –°–¢–†–û–ö (fallback)
        console.log('‚úèÔ∏è  Using generic examples as fallback');
        return [
            `I often use the word "${word}" in my conversations. - –Ø —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É—é —Å–ª–æ–≤–æ "${translation}" –≤ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞—Ö.`,
            `Can you give me an example with "${word}"? - –ú–æ–∂–µ—Ç–µ –ø—Ä–∏–≤–µ—Å—Ç–∏ –ø—Ä–∏–º–µ—Ä —Å "${translation}"?`
        ];
    }

    // ‚úÖ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏–º–µ—Ä–æ–≤ –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥
    formatExamplesForDisplay(examples) {
        // ‚úÖ –ó–ê–©–ò–¢–ê –û–¢ –ù–ï–ö–û–†–†–ï–ö–¢–ù–´–• –î–ê–ù–ù–´–•
        if (!examples || !Array.isArray(examples)) {
            return '–ü—Ä–∏–º–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã';
        }
        
        if (examples.length === 0) {
            return '–ü—Ä–∏–º–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã';
        }
        
        return examples.map((example, index) => {
            if (typeof example === 'string') {
                return `${index + 1}. ${example}`;
            } else {
                return `${index + 1}. ${String(example)}`;
            }
        }).join('\n');
    }

    // ‚úÖ –ù–û–í–´–ô –ú–ï–¢–û–î: –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    formatExamplesForStorage(examples) {
        // ‚úÖ –ó–ê–©–ò–¢–ê –û–¢ –ù–ï–ö–û–†–†–ï–ö–¢–ù–´–• –î–ê–ù–ù–´–•
        if (!examples || !Array.isArray(examples)) {
            return '';
        }
        
        if (examples.length === 0) {
            return '';
        }
        
        // ‚úÖ –ü–†–ï–û–ë–†–ê–ó–£–ï–ú –í–°–ï –≠–õ–ï–ú–ï–ù–¢–´ –í –°–¢–†–û–ö–ò
        const stringExamples = examples.map(example => {
            return typeof example === 'string' ? example : String(example);
        });
        
        // ‚úÖ –û–ë–™–ï–î–ò–ù–Ø–ï–ú –ß–ï–†–ï–ó –†–ê–ó–î–ï–õ–ò–¢–ï–õ–¨
        return stringExamples.join(' | ');
    }
}
