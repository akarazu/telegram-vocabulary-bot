import axios from 'axios';

export class ExampleGeneratorService {
    constructor() {
        this.useYandex = !!process.env.YANDEX_DICTIONARY_API_KEY;
    }

    async generateExamples(word, translation) {
        console.log(`üîÑ Generating examples for: "${word}" -> "${translation}"`);
        
        let examples = [];

        // ‚úÖ –ü–ï–†–í–û–ï: –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–º–µ—Ä—ã –∏–∑ –Ø–Ω–¥–µ–∫—Å API
        if (this.useYandex) {
            try {
                console.log('üîç PRIMARY: Trying Yandex API for examples...');
                const yandexExamples = await this.getYandexExamples(word);
                if (yandexExamples.length > 0) {
                    examples = yandexExamples;
                    console.log(`‚úÖ PRIMARY: Found ${yandexExamples.length} examples from Yandex`);
                    return examples;
                }
            } catch (error) {
                console.log('‚ùå PRIMARY: Yandex examples failed:', error.message);
            }
        }

        // ‚úÖ –í–¢–û–†–û–ï: –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–º–µ—Ä—ã –∏–∑ –±—ç–∫–∞–ø —Å–ª–æ–≤–∞—Ä—è
        try {
            console.log('üîÑ FALLBACK: Trying Backup Dictionary for examples...');
            const backupExamples = await this.getBackupExamples(word);
            if (backupExamples.length > 0) {
                examples = backupExamples;
                console.log(`‚úÖ FALLBACK: Found ${backupExamples.length} examples from Backup`);
                return examples;
            }
        } catch (error) {
            console.log('‚ùå FALLBACK: Backup examples failed:', error.message);
        }

        // ‚úÖ –¢–†–ï–¢–¨–ï: –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç—ã–µ –ø—Ä–∏–º–µ—Ä—ã –≤—Ä—É—á–Ω—É—é
        console.log('‚úèÔ∏è  GENERIC: Creating generic examples...');
        examples = this.getGenericExamples(word, translation);
        console.log(`‚úÖ GENERIC: Created ${examples.length} generic examples`);

        return examples;
    }

    async getYandexExamples(word) {
        try {
            console.log(`üîç Yandex API call for examples: "${word}"`);
            
            const response = await axios.get('https://dictionary.yandex.net/api/v1/dicservice.json/lookup', {
                params: {
                    key: process.env.YANDEX_DICTIONARY_API_KEY,
                    lang: 'en-ru',
                    text: word,
                    ui: 'ru'
                },
                timeout: 10000
            });

            return this.extractExamplesFromYandex(response.data, word);
            
        } catch (error) {
            console.error('‚ùå Yandex examples error:', error.message);
            return [];
        }
    }

    extractExamplesFromYandex(data, originalWord) {
        const examples = [];
        
        if (!data.def || data.def.length === 0) {
            console.log('‚ùå Yandex: No definitions found for examples');
            return [];
        }

        console.log(`üîç Yandex found ${data.def.length} definition(s) for examples`);

        data.def.forEach((definition) => {
            // ‚úÖ –ò–ó–í–õ–ï–ö–ê–ï–ú –ü–†–ò–ú–ï–†–´ –ò–ó –ü–û–õ–Ø "ex"
            if (definition.ex && Array.isArray(definition.ex)) {
                console.log(`üîç Processing ${definition.ex.length} example(s) from Yandex`);
                
                definition.ex.forEach((example) => {
                    if (example.text && example.tr && Array.isArray(example.tr)) {
                        const englishExample = example.text.trim();
                        const russianExample = example.tr[0]?.text?.trim();
                        
                        if (englishExample && russianExample) {
                            examples.push({
                                english: englishExample,
                                russian: russianExample
                            });
                            console.log(`‚úÖ Yandex example: "${englishExample}" -> "${russianExample}"`);
                        }
                    }
                });
            }
        });

        return examples.slice(0, 3); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–æ 3 –ø—Ä–∏–º–µ—Ä–æ–≤
    }

    async getBackupExamples(word) {
        try {
            console.log(`üîç Backup API call for examples: "${word}"`);
            
            const response = await axios.get(
                `https://api.dictionaryapi.dev/api/v2/entries/en/${encodeURIComponent(word)}`,
                { timeout: 5000 }
            );

            return this.extractExamplesFromFreeDictionary(response.data, word);
        } catch (error) {
            console.error('Free Dictionary API error for examples:', error.message);
            return [];
        }
    }

    extractExamplesFromFreeDictionary(data, originalWord) {
        const examples = [];
        
        if (!Array.isArray(data) || data.length === 0) {
            console.log('‚ùå FreeDictionary: No entries found for examples');
            return [];
        }

        console.log(`üîç FreeDictionary found ${data.length} entry/entries for examples`);

        data.forEach(entry => {
            if (entry.meanings && Array.isArray(entry.meanings)) {
                entry.meanings.forEach(meaning => {
                    if (meaning.definitions && Array.isArray(meaning.definitions)) {
                        meaning.definitions.forEach(definition => {
                            // ‚úÖ –ò–ó–í–õ–ï–ö–ê–ï–ú –ü–†–ò–ú–ï–†–´ –ò–ó –ü–û–õ–Ø "example"
                            if (definition.example && definition.example.trim()) {
                                const englishExample = definition.example.trim();
                                // –î–ª—è –±—ç–∫–∞–ø —Å–ª–æ–≤–∞—Ä—è —Å–æ–∑–¥–∞–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø—Ä–∏–º–µ—Ä
                                examples.push({
                                    english: englishExample,
                                    russian: `–ü—Ä–∏–º–µ—Ä: "${englishExample}"`
                                });
                                console.log(`‚úÖ Backup example: "${englishExample}"`);
                            }
                        });
                    }
                });
            }
        });

        return examples.slice(0, 3); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–æ 3 –ø—Ä–∏–º–µ—Ä–æ–≤
    }

    getGenericExamples(word, translation) {
        const genericExamples = [
            {
                english: `I often use the word "${word}" in my conversations.`,
                russian: `–Ø —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É—é —Å–ª–æ–≤–æ "${translation}" –≤ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞—Ö.`
            },
            {
                english: `Can you give me an example with "${word}"?`,
                russian: `–ú–æ–∂–µ—Ç–µ –ø—Ä–∏–≤–µ—Å—Ç–∏ –ø—Ä–∏–º–µ—Ä —Å "${translation}"?`
            },
            {
                english: `The word "${word}" is very useful in English.`,
                russian: `–°–ª–æ–≤–æ "${translation}" –æ—á–µ–Ω—å –ø–æ–ª–µ–∑–Ω–æ –≤ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ.`
            }
        ];

        return genericExamples.slice(0, 2); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º 2 –æ–±—â–∏—Ö –ø—Ä–∏–º–µ—Ä–∞
    }
}
