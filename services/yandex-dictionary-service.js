// services/yandex-dictionary-service.js
import axios from 'axios';

export class YandexDictionaryService {
    constructor() {
        this.useYandex = !!process.env.YANDEX_DICTIONARY_API_KEY;
        
        // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        this.cache = new Map();
        this.CACHE_TTL = 24 * 60 * 60 * 1000; // 24 —á–∞—Å–∞ –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π
        
        // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        this.concurrentRequests = 0;
        this.maxConcurrentRequests = 3;
        
        // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ HTTP –∫–ª–∏–µ–Ω—Ç–∞
        this.http = axios.create({
            timeout: 8000, // –£–º–µ–Ω—å—à–µ–Ω–æ —Å 10 –¥–æ 8 —Å–µ–∫—É–Ω–¥
            retry: 1,
            retryDelay: 1000
        });

        // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å–ª–æ–≤
        this.problemWords = new Set();
        
        // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        this.stats = {
            totalRequests: 0,
            cacheHits: 0,
            apiHits: 0,
            errors: 0
        };

        // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: fallback —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –¥–ª—è —á–∞—Å—Ç—ã—Ö —Å–ª–æ–≤
        this.commonWordsTranscriptions = new Map([
            ['hello', '/h…ôÀàl…ô ä/'],
            ['world', '/w…úÀêld/'],
            ['time', '/ta…™m/'],
            ['people', '/ÀàpiÀêp(…ô)l/'],
            ['water', '/Ààw…îÀêt…ô/'],
            ['food', '/fuÀêd/'],
            ['house', '/ha äs/'],
            ['work', '/w…úÀêk/'],
            ['school', '/skuÀêl/'],
            ['book', '/b äk/'],
            ['friend', '/frend/'],
            ['family', '/Ààf√¶m(…ô)li/'],
            ['music', '/ÀàmjuÀêz…™k/'],
            ['love', '/l åv/'],
            ['english', '/Àà…™≈ã…°l…™ É/'],
            ['russian', '/Ààr å É(…ô)n/'],
            ['dictionary', '/Ààd…™k É(…ô)n(…ô)ri/'],
            ['word', '/w…úÀêd/'],
            ['learn', '/l…úÀên/'],
            ['study', '/Ààst ådi/']
        ]);

        console.log(`üîß [Yandex] Initialized: ${this.useYandex ? 'API ENABLED' : 'API DISABLED'}`);
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É –∫–µ—à–∞
        this.startCacheCleanup();
    }

    // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º common words
    async getCachedTranscriptionAndAudio(word) {
        const lowerWord = word.toLowerCase().trim();
        const cacheKey = `yandex_${lowerWord}`;
        
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
        const cached = this.cache.get(cacheKey);
        if (cached && Date.now() - cached.timestamp < this.CACHE_TTL) {
            this.stats.cacheHits++;
            console.log(`üìö [Yandex] Cache HIT for: "${word}"`);
            return cached.data;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º common words
        if (this.commonWordsTranscriptions.has(lowerWord)) {
            const commonData = {
                transcription: this.commonWordsTranscriptions.get(lowerWord),
                audioUrl: this.generateFallbackAudioUrl(word)
            };
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à
            this.cache.set(cacheKey, {
                data: commonData,
                timestamp: Date.now()
            });
            
            this.stats.cacheHits++;
            console.log(`‚≠ê [Yandex] Common word: "${word}"`);
            return commonData;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫
        if (this.problemWords.has(lowerWord)) {
            console.log(`üö´ [Yandex] Skipping blacklisted word: "${word}"`);
            return this.getFallbackData(word);
        }
        
        console.log(`üîç [Yandex] Cache MISS for: "${word}"`);
        const data = await this.fetchFromYandex(word);
        
        // –ö–µ—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–¥–∞–∂–µ –µ—Å–ª–∏ —ç—Ç–æ fallback)
        this.cache.set(cacheKey, {
            data: data,
            timestamp: Date.now()
        });
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫–µ—à–∞
        if (this.cache.size > 1000) {
            const firstKey = this.cache.keys().next().value;
            this.cache.delete(firstKey);
        }
        
        return data;
    }

    // –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    async getTranscriptionAndAudio(word) {
        this.stats.totalRequests++;
        return this.getCachedTranscriptionAndAudio(word);
    }

    // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏
    async fetchFromYandex(word) {
        if (!this.useYandex) {
            console.log(`üîá [Yandex] API disabled, using fallback for: "${word}"`);
            return this.getFallbackData(word);
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        if (this.concurrentRequests >= this.maxConcurrentRequests) {
            console.log(`‚è≥ [Yandex] Rate limit reached, using fallback for: "${word}"`);
            return this.getFallbackData(word);
        }

        this.concurrentRequests++;
        this.stats.apiHits++;
        
        try {
            console.log(`üåê [Yandex] API Request for: "${word}"`);
            
            const response = await Promise.race([
                this.http.get('https://dictionary.yandex.net/api/v1/dicservice.json/lookup', {
                    params: {
                        key: process.env.YANDEX_DICTIONARY_API_KEY,
                        lang: 'en-ru',
                        text: word,
                        ui: 'ru'
                    }
                }),
                new Promise((_, reject) => 
                    setTimeout(() => reject(new Error('Yandex API timeout')), 8000)
                )
            ]);

            console.log(`‚úÖ [Yandex] API Success: "${word}" - Status: ${response.status}`);
            
            const result = {
                transcription: '',
                audioUrl: this.generateFallbackAudioUrl(word)
            };

            // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é
            if (response.data.def && response.data.def.length > 0 && response.data.def[0].ts) {
                result.transcription = `/${response.data.def[0].ts}/`;
                console.log(`üî§ [Yandex] Transcription: ${result.transcription}`);
            } else {
                console.log(`‚ÑπÔ∏è [Yandex] No transcription found for: "${word}"`);
            }

            return result;
            
        } catch (error) {
            this.stats.errors++;
            console.error(`‚ùå [Yandex] API ERROR for "${word}":`, error.message);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–ª–æ–≤–∞ –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫
            if (error.message.includes('timeout') || error.message.includes('ENOTFOUND') || error.response?.status === 401) {
                this.problemWords.add(word.toLowerCase());
                console.log(`üö´ [Yandex] Added to blacklist: "${word}"`);
                
                // –ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏, –æ—Ç–∫–ª—é—á–∞–µ–º Yandex API
                if (error.response?.status === 401) {
                    console.log('üîí [Yandex] Authentication failed, disabling Yandex API');
                    this.useYandex = false;
                }
            }
            
            return this.getFallbackData(word);
        } finally {
            this.concurrentRequests--;
        }
    }

    // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: —É–ª—É—á—à–µ–Ω–Ω—ã–π fallback
    getFallbackData(word) {
        // –ü—ã—Ç–∞–µ–º—Å—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–∞–≤–∏–ª
        const generatedTranscription = this.generateTranscription(word);
        
        return {
            transcription: generatedTranscription,
            audioUrl: this.generateFallbackAudioUrl(word)
        };
    }

    // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º (basic)
    generateTranscription(word) {
        const lowerWord = word.toLowerCase();
        
        // –ü—Ä–æ—Å—Ç—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è —á–∞—Å—Ç—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
        const rules = [
            // –û–∫–æ–Ω—á–∞–Ω–∏—è
            { pattern: /ing$/, replacement: '…™≈ã' },
            { pattern: /ed$/, replacement: 'd' },
            { pattern: /s$/, replacement: 's' },
            { pattern: /es$/, replacement: '…™z' },
            
            // –°–æ—á–µ—Ç–∞–Ω–∏—è –≥–ª–∞—Å–Ω—ã—Ö
            { pattern: /ee/, replacement: 'iÀê' },
            { pattern: /oo/, replacement: 'uÀê' },
            { pattern: /oa/, replacement: '…ô ä' },
            { pattern: /ai/, replacement: 'e…™' },
            { pattern: /ay/, replacement: 'e…™' },
            { pattern: /ea/, replacement: 'iÀê' },
            
            // –°–æ—á–µ—Ç–∞–Ω–∏—è —Å–æ–≥–ª–∞—Å–Ω—ã—Ö
            { pattern: /th/, replacement: 'Œ∏' },
            { pattern: /sh/, replacement: ' É' },
            { pattern: /ch/, replacement: 't É' },
            { pattern: /ph/, replacement: 'f' },
            
            // –û—Ç–¥–µ–ª—å–Ω—ã–µ –±—É–∫–≤—ã
            { pattern: /a/, replacement: '√¶' },
            { pattern: /e/, replacement: 'e' },
            { pattern: /i/, replacement: '…™' },
            { pattern: /o/, replacement: '…í' },
            { pattern: /u/, replacement: ' å' }
        ];

        let transcription = lowerWord;
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª–∞ (–æ—á–µ–Ω—å –±–∞–∑–æ–≤—ã–µ)
        for (const rule of rules) {
            transcription = transcription.replace(rule.pattern, rule.replacement);
        }
        
        return transcription ? `/${transcription}/` : '';
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è URL –¥–ª—è Google TTS
    generateFallbackAudioUrl(word) {
        // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –∫–µ—à–∏—Ä—É–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ URL
        const encodedWord = encodeURIComponent(word);
        return `https://translate.google.com/translate_tts?ie=UTF-8&q=${encodedWord}&tl=en-gb&client=tw-ob`;
    }

    // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –º–∞—Å—Å–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π
    async getMultipleTranscriptions(words) {
        const results = {};
        const BATCH_SIZE = 5;
        const DELAY_BETWEEN_BATCHES = 1000;
        
        console.log(`üîÑ [Yandex] Batch processing ${words.length} words`);
        
        for (let i = 0; i < words.length; i += BATCH_SIZE) {
            const batch = words.slice(i, i + BATCH_SIZE);
            console.log(`üì¶ [Yandex] Processing batch ${Math.floor(i/BATCH_SIZE) + 1}`);
            
            const batchPromises = batch.map(word => 
                this.getTranscriptionAndAudio(word).then(data => {
                    results[word] = data;
                    return data;
                })
            );
            
            await Promise.allSettled(batchPromises);
            
            // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
            if (i + BATCH_SIZE < words.length) {
                await new Promise(resolve => setTimeout(resolve, DELAY_BETWEEN_BATCHES));
            }
        }
        
        console.log(`‚úÖ [Yandex] Batch processing completed: ${Object.keys(results).length} words`);
        return results;
    }

    // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ —á–∞—Å—Ç—ã—Ö —Å–ª–æ–≤
    async preloadCommonWords(commonWords = []) {
        if (commonWords.length === 0) return;
        
        console.log(`üîÆ [Yandex] Preloading ${commonWords.length} common words`);
        
        const preloadResults = {};
        for (const word of commonWords.slice(0, 15)) { // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫—É
            try {
                const data = await this.getTranscriptionAndAudio(word);
                preloadResults[word] = data;
                console.log(`‚úÖ [Yandex] Preloaded: "${word}"`);
            } catch (error) {
                console.error(`‚ùå [Yandex] Preload failed for "${word}":`, error.message);
            }
            
            // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞–º–∏
            await new Promise(resolve => setTimeout(resolve, 300));
        }
        
        return preloadResults;
    }

    // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –æ—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞
    startCacheCleanup() {
        setInterval(() => {
            const now = Date.now();
            let cleanedCount = 0;
            
            for (const [key, value] of this.cache.entries()) {
                if (now - value.timestamp > this.CACHE_TTL) {
                    this.cache.delete(key);
                    cleanedCount++;
                }
            }
            
            if (cleanedCount > 0) {
                console.log(`üßπ [Yandex] Cache cleanup: removed ${cleanedCount} expired entries`);
            }
            
            // –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞–∑ –≤ —á–∞—Å
            if (Math.random() < 0.02) { // 2% chance
                this.logStats();
            }
            
        }, 30 * 60 * 1000); // –ö–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
    }

    // –ú–µ—Ç–æ–¥—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    logStats() {
        const hitRate = this.stats.totalRequests > 0 
            ? (this.stats.cacheHits / this.stats.totalRequests * 100).toFixed(1)
            : 0;
            
        console.log(`üìä [Yandex] Stats - Total: ${this.stats.totalRequests}, ` +
                   `Cache: ${this.stats.cacheHits}, API: ${this.stats.apiHits}, ` +
                   `Errors: ${this.stats.errors}, Hit Rate: ${hitRate}%`);
    }

    getStats() {
        const hitRate = this.stats.totalRequests > 0 
            ? (this.stats.cacheHits / this.stats.totalRequests * 100)
            : 0;
            
        return {
            ...this.stats,
            hitRate,
            cacheSize: this.cache.size,
            blacklistSize: this.problemWords.size,
            commonWordsCount: this.commonWordsTranscriptions.size,
            apiEnabled: this.useYandex,
            concurrentRequests: this.concurrentRequests
        };
    }

    clearCache() {
        const previousSize = this.cache.size;
        this.cache.clear();
        console.log(`üóëÔ∏è [Yandex] Cache cleared: ${previousSize} entries removed`);
        return previousSize;
    }

    removeFromBlacklist(word) {
        const removed = this.problemWords.delete(word.toLowerCase());
        if (removed) {
            console.log(`‚úÖ [Yandex] Removed from blacklist: "${word}"`);
        }
        return removed;
    }

    // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π
    addCustomTranscription(word, transcription) {
        const lowerWord = word.toLowerCase();
        this.commonWordsTranscriptions.set(lowerWord, transcription);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à
        const cacheKey = `yandex_${lowerWord}`;
        this.cache.set(cacheKey, {
            data: {
                transcription: transcription,
                audioUrl: this.generateFallbackAudioUrl(word)
            },
            timestamp: Date.now()
        });
        
        console.log(`‚úèÔ∏è [Yandex] Added custom transcription for: "${word}"`);
        return true;
    }

    // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞
    async healthCheck() {
        if (!this.useYandex) {
            return {
                status: 'fallback_mode',
                message: 'Yandex API disabled, using fallback mode'
            };
        }

        try {
            const testWord = 'test';
            const response = await this.http.get('https://dictionary.yandex.net/api/v1/dicservice.json/lookup', {
                params: {
                    key: process.env.YANDEX_DICTIONARY_API_KEY,
                    lang: 'en-ru',
                    text: testWord,
                    ui: 'ru'
                },
                timeout: 5000
            });
            
            return {
                status: 'healthy',
                apiEnabled: true,
                responseTime: response.duration,
                statusCode: response.status
            };
        } catch (error) {
            return {
                status: 'unhealthy',
                apiEnabled: false,
                error: error.message
            };
        }
    }

    // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: graceful shutdown
    async shutdown() {
        console.log('üîÑ [Yandex] Shutting down service...');
        this.logStats();
        this.cache.clear();
        this.problemWords.clear();
        console.log('‚úÖ [Yandex] Service shutdown completed');
    }

    // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –≤–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ API
    enableApi() {
        this.useYandex = true;
        console.log('‚úÖ [Yandex] API enabled');
    }

    disableApi() {
        this.useYandex = false;
        console.log('üîá [Yandex] API disabled');
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
let yandexServiceInstance = null;

export function getYandexService() {
    if (!yandexServiceInstance) {
        yandexServiceInstance = new YandexDictionaryService();
        
        // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞–µ–º —á–∞—Å—Ç—ã–µ —Å–ª–æ–≤–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        const commonWords = Array.from(yandexServiceInstance.commonWordsTranscriptions.keys());
        
        setTimeout(() => {
            yandexServiceInstance.preloadCommonWords(commonWords)
                .catch(error => console.error('‚ùå Yandex preload failed:', error));
        }, 3000);
    }
  
    return yandexServiceInstance;
}

// Graceful shutdown
process.on('SIGINT', async () => {
    if (yandexServiceInstance) {
        await yandexServiceInstance.shutdown();
    }
    process.exit(0);
});

process.on('SIGTERM', async () => {
    if (yandexServiceInstance) {
        await yandexServiceInstance.shutdown();
    }
    process.exit(0);
});
