import { FSRS, Rating, generatorParameters } from 'fsrs.js';

// ‚úÖ –†–ï–ê–õ–¨–ù–´–ô FSRS Service —Å –Ω–∞—Å—Ç–æ—è—â–µ–π –∞–¥–∞–ø—Ç–∞—Ü–∏–µ–π
export class FSRSService {
    constructor() {
        try {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è
            this.parameters = generatorParameters({
                request_retention: 0.85, // –ù–µ–º–Ω–æ–≥–æ –Ω–∏–∂–µ –¥–ª—è –±–æ–ª–µ–µ —á–∞—Å—Ç—ã—Ö –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
                maximum_interval: 365,
                easy_bonus: 1.5,        // –ë–æ–Ω—É—Å –¥–ª—è "–ª–µ–≥–∫–æ"
                hard_factor: 0.8,       // –§–∞–∫—Ç–æ—Ä –¥–ª—è "—Ç—Ä—É–¥–Ω–æ"
                w: [0.4, 0.9, 2.3, 4.2, 3.8, 0.8, 0.7, 0.02, 1.3, 0.18, 1.1, 1.9, 0.08, 0.28, 1.2, 0.25, 2.3]
            });
            
            this.fsrs = new FSRS(this.parameters);
            console.log('‚úÖ REAL FSRS service initialized with adaptive learning');
        } catch (error) {
            console.error('‚ùå Error initializing REAL FSRS:', error);
            this.fsrs = null;
        }
    }

    // –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ —Å —Ä–µ–∞–ª—å–Ω–æ–π –∞–¥–∞–ø—Ç–∞—Ü–∏–µ–π
    reviewCard(cardData, rating) {
        if (!this.fsrs) {
            return this.fallbackRepeat(cardData, rating);
        }

        try {
            // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ FSRS
            const card = {
                due: new Date(cardData.due),
                stability: cardData.stability || 0.1,
                difficulty: cardData.difficulty || 5.0,
                elapsed_days: cardData.elapsed_days || 0,
                scheduled_days: cardData.scheduled_days || 0,
                reps: cardData.reps || 0,
                lapses: cardData.lapses || 0,
                state: cardData.state || 0,
                last_review: cardData.last_review ? new Date(cardData.last_review) : new Date()
            };

            // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à —Ä–µ–π—Ç–∏–Ω–≥ –≤ FSRS Rating
            const fsrsRating = this.convertRatingToFSRS(rating);
            
            // ‚úÖ –†–ï–ê–õ–¨–ù–ê–Ø –ê–î–ê–ü–¢–ê–¶–ò–Ø: FSRS —Å–∞–º —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
            const schedule = this.fsrs.repeat(card, new Date());
            const result = schedule[fsrsRating];

            console.log(`üéØ FSRS –∞–¥–∞–ø—Ç–∞—Ü–∏—è: —Ä–µ–π—Ç–∏–Ω–≥=${rating}, –∏–Ω—Ç–µ—Ä–≤–∞–ª=${result.card.scheduled_days}–¥, —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å=${result.card.stability.toFixed(2)}`);

            return {
                due: result.card.due,
                stability: result.card.stability,
                difficulty: result.card.difficulty,
                elapsed_days: result.card.elapsed_days,
                scheduled_days: result.card.scheduled_days,
                reps: result.card.reps,
                lapses: result.card.lapses,
                state: result.card.state,
                last_review: new Date(),
                interval: result.card.scheduled_days
            };

        } catch (error) {
            console.error('‚ùå Error in REAL FSRS review:', error);
            return this.fallbackRepeat(cardData, rating);
        }
    }

    // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –Ω–∞—à–∏—Ö —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ –≤ FSRS Rating
    convertRatingToFSRS(rating) {
        const ratingMap = {
            'again': Rating.Again,
            'review_again': Rating.Again,
            'hard': Rating.Hard,
            'review_hard': Rating.Hard,
            'good': Rating.Good,
            'review_good': Rating.Good,
            'easy': Rating.Easy,
            'review_easy': Rating.Easy
        };
        return ratingMap[rating] || Rating.Good;
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏
    createNewCard() {
        const now = new Date();
        
        if (this.fsrs) {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º FSRS –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏
            const card = this.fsrs.getEmptyCard();
            card.due = new Date(now.getTime() + 24 * 60 * 60 * 1000); // 1 –¥–µ–Ω—å
            return {
                due: card.due,
                stability: card.stability,
                difficulty: card.difficulty,
                elapsed_days: card.elapsed_days,
                scheduled_days: 1,
                reps: card.reps,
                lapses: card.lapses,
                state: card.state,
                last_review: now,
                interval: 1
            };
        } else {
            // Fallback
            return {
                due: new Date(now.getTime() + 24 * 60 * 60 * 1000),
                stability: 0.1,
                difficulty: 5.0,
                elapsed_days: 0,
                scheduled_days: 1,
                reps: 0,
                lapses: 0,
                state: 1,
                last_review: now,
                interval: 1
            };
        }
    }

    // Fallback –º–µ—Ç–æ–¥
    fallbackRepeat(cardData, rating) {
        const now = new Date();
        let interval;

        switch (rating) {
            case 'again': case 'review_again': interval = 0.014; break; // 20 –º–∏–Ω
            case 'hard': case 'review_hard': interval = 0.33; break;    // 8 —á–∞—Å–æ–≤
            case 'good': case 'review_good': interval = 1; break;       // 1 –¥–µ–Ω—å
            case 'easy': case 'review_easy': interval = 3; break;       // 3 –¥–Ω—è
            default: interval = 1;
        }

        return {
            due: new Date(now.getTime() + interval * 24 * 60 * 60 * 1000),
            stability: interval,
            difficulty: 5.0,
            elapsed_days: interval,
            scheduled_days: interval,
            reps: (cardData.reps || 0) + 1,
            lapses: rating.includes('again') ? (cardData.lapses || 0) + 1 : (cardData.lapses || 0),
            state: 1,
            last_review: now,
            interval: interval
        };
    }
}
