import pkg from 'ts-fsrs';
const { fsrs, generatorParameters, createEmptyCard, Grade } = pkg;

// ‚úÖ –†–ï–ê–õ–¨–ù–´–ô FSRS Service —Å ts-fsrs
export class FSRSService {
    constructor() {
        try {
            // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è
            this.parameters = generatorParameters({
                request_retention: 0.85, // –ù–µ–º–Ω–æ–≥–æ –Ω–∏–∂–µ –¥–ª—è –±–æ–ª–µ–µ —á–∞—Å—Ç—ã—Ö –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
                maximum_interval: 365,
                enable_fuzz: true
            });
            
            this.scheduler = fsrs(this.parameters);
            console.log('‚úÖ REAL FSRS service initialized with ts-fsrs');
        } catch (error) {
            console.error('‚ùå Error initializing REAL FSRS:', error);
            this.scheduler = null;
        }
    }

    // –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ —Å —Ä–µ–∞–ª—å–Ω–æ–π –∞–¥–∞–ø—Ç–∞—Ü–∏–µ–π
    reviewCard(cardData, rating) {
        if (!this.scheduler) {
            return this.fallbackRepeat(cardData, rating);
        }

        try {
            // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ ts-fsrs
            const card = this.createCardFromData(cardData);

            // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à —Ä–µ–π—Ç–∏–Ω–≥ –≤ FSRS Grade
            const grade = this.convertRatingToGrade(rating);
            
            // ‚úÖ –†–ï–ê–õ–¨–ù–ê–Ø –ê–î–ê–ü–¢–ê–¶–ò–Ø: ts-fsrs —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
            const result = this.scheduler.repeat(card, new Date(), grade);

            console.log(`üéØ FSRS –∞–¥–∞–ø—Ç–∞—Ü–∏—è: —Ä–µ–π—Ç–∏–Ω–≥=${rating}, –∏–Ω—Ç–µ—Ä–≤–∞–ª=${result.card.scheduled_days}–¥, —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å=${result.card.stability.toFixed(2)}`);

            return {
                due: result.card.due,
                stability: result.card.stability,
                difficulty: result.card.difficulty,
                elapsed_days: result.card.elapsed_days,
                scheduled_days: result.card.scheduled_days,
                reps: result.card.reps,
                lapses: result.card.lapses,
                state: result.card.state,
                last_review: new Date(),
                interval: result.card.scheduled_days
            };

        } catch (error) {
            console.error('‚ùå Error in REAL FSRS review:', error);
            return this.fallbackRepeat(cardData, rating);
        }
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –∏–∑ –¥–∞–Ω–Ω—ã—Ö
    createCardFromData(cardData) {
        const card = createEmptyCard();
        
        if (cardData.due) card.due = new Date(cardData.due);
        if (cardData.stability) card.stability = cardData.stability;
        if (cardData.difficulty) card.difficulty = cardData.difficulty;
        if (cardData.elapsed_days) card.elapsed_days = cardData.elapsed_days;
        if (cardData.scheduled_days) card.scheduled_days = cardData.scheduled_days;
        if (cardData.reps) card.reps = cardData.reps;
        if (cardData.lapses) card.lapses = cardData.lapses;
        if (cardData.state) card.state = cardData.state;
        if (cardData.last_review) card.last_review = new Date(cardData.last_review);
        
        return card;
    }

    // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –Ω–∞—à–∏—Ö —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ –≤ FSRS Grade
    convertRatingToGrade(rating) {
        const ratingMap = {
            'again': Grade.Again,
            'review_again': Grade.Again,
            'hard': Grade.Hard,
            'review_hard': Grade.Hard,
            'good': Grade.Good,
            'review_good': Grade.Good,
            'easy': Grade.Easy,
            'review_easy': Grade.Easy
        };
        return ratingMap[rating] || Grade.Good;
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏
    createNewCard() {
        const now = new Date();
        
        if (this.scheduler) {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º ts-fsrs –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏
            const card = createEmptyCard();
            // –ù–æ–≤–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –¥–æ—Å—Ç—É–ø–Ω–æ–π —á–µ—Ä–µ–∑ –∫–æ—Ä–æ—Ç–∫–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
            const result = this.scheduler.repeat(card, now, Grade.Good);
            
            return {
                due: result.card.due,
                stability: result.card.stability,
                difficulty: result.card.difficulty,
                elapsed_days: result.card.elapsed_days,
                scheduled_days: result.card.scheduled_days,
                reps: result.card.reps,
                lapses: result.card.lapses,
                state: result.card.state,
                last_review: now,
                interval: result.card.scheduled_days
            };
        } else {
            // Fallback
            return {
                due: new Date(now.getTime() + 24 * 60 * 60 * 1000),
                stability: 0.1,
                difficulty: 5.0,
                elapsed_days: 0,
                scheduled_days: 1,
                reps: 0,
                lapses: 0,
                state: 1,
                last_review: now,
                interval: 1
            };
        }
    }

    // Fallback –º–µ—Ç–æ–¥ –Ω–∞ —Å–ª—É—á–∞–π –æ—à–∏–±–æ–∫
    fallbackRepeat(cardData, rating) {
        const now = new Date();
        let interval;

        switch (rating) {
            case 'again': case 'review_again': interval = 0.014; break; // 20 –º–∏–Ω
            case 'hard': case 'review_hard': interval = 0.33; break;    // 8 —á–∞—Å–æ–≤
            case 'good': case 'review_good': interval = 1; break;       // 1 –¥–µ–Ω—å
            case 'easy': case 'review_easy': interval = 3; break;       // 3 –¥–Ω—è
            default: interval = 1;
        }

        return {
            due: new Date(now.getTime() + interval * 24 * 60 * 60 * 1000),
            stability: interval,
            difficulty: 5.0,
            elapsed_days: interval,
            scheduled_days: interval,
            reps: (cardData.reps || 0) + 1,
            lapses: rating.includes('again') ? (cardData.lapses || 0) + 1 : (cardData.lapses || 0),
            state: 1,
            last_review: now,
            interval: interval
        };
    }
}
