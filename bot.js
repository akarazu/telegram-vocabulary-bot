import TelegramBot from 'node-telegram-bot-api';
import { GoogleSheetsService } from './services/google-sheets.js';
import { YandexDictionaryService } from './services/yandex-dictionary-service.js';
import { CambridgeDictionaryService } from './services/cambridge-dictionary-service.js';
import { FSRSService } from './services/fsrs-service.js';

const bot = new TelegramBot(process.env.BOT_TOKEN, { polling: true });

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
let sheetsService, yandexService, cambridgeService, fsrsService;

try {
    sheetsService = new GoogleSheetsService();
    yandexService = new YandexDictionaryService();
    cambridgeService = new CambridgeDictionaryService();
    fsrsService = new FSRSService();
    console.log('‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
} catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤:', error);
    // –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫–∏ —á—Ç–æ–±—ã –±–æ—Ç –Ω–µ –ø–∞–¥–∞–ª
    sheetsService = { initialized: false };
    yandexService = { getTranscriptionAndAudio: () => ({ transcription: '', audioUrl: '' }) };
    cambridgeService = { getWordData: () => ({ meanings: [] }) };
    fsrsService = new FSRSService(); // FSRS –≤—Å–µ–≥–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç
}

// –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const userStates = new Map();

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –Ω–æ—Ç–∏—Ñ–∏–∫–∞—Ü–∏–π
const notificationScheduler = new Map();

// ‚úÖ –û–ë–ù–û–í–õ–ï–ù–û: –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞ –∏–∑—É—á–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤
const dailyLearnedWords = new Map();

// ‚úÖ –û–ë–ù–û–í–õ–ï–ù–û: –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —Å–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –£–ñ–ï –ò–ó–£–ß–ï–ù–´ (–ø–µ—Ä–µ—à–ª–∏ –≤ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ)
const learnedWords = new Map();

// ‚úÖ –§–£–ù–ö–¶–ò–Ø: –û—Ç–º–µ—Ç–∫–∞ —Å–ª–æ–≤–∞ –∫–∞–∫ –∏–∑—É—á–µ–Ω–Ω–æ–≥–æ (–ø–µ—Ä–µ—à–µ–¥—à–µ–≥–æ –≤ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ)
function markWordAsLearned(chatId, englishWord) {
    if (!learnedWords.has(chatId)) {
        learnedWords.set(chatId, new Set());
    }
    
    const userLearnedWords = learnedWords.get(chatId);
    userLearnedWords.add(englishWord.toLowerCase());
    console.log(`üéì –°–ª–æ–≤–æ "${englishWord}" –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –ò–ó–£–ß–ï–ù–ù–û–ï –¥–ª—è ${chatId}`);
}

// ‚úÖ –§–£–ù–ö–¶–ò–Ø: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑—É—á–µ–Ω–æ –ª–∏ —Å–ª–æ–≤–æ
function isWordLearned(chatId, englishWord) {
    const userLearnedWords = learnedWords.get(chatId);
    return userLearnedWords ? userLearnedWords.has(englishWord.toLowerCase()) : false;
}

// ‚úÖ –§–£–ù–ö–¶–ò–Ø: –°–±—Ä–æ—Å –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞
function resetDailyLimit() {
    const now = new Date();
    const currentHour = now.getHours();
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤ 4 —É—Ç—Ä–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
    if (currentHour === 4) {
        dailyLearnedWords.clear();
        console.log('üîÑ –°–±—Ä–æ—à–µ–Ω –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –∏–∑—É—á–µ–Ω–∏—è —Å–ª–æ–≤');
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –µ–∂–µ—á–∞—Å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
setInterval(resetDailyLimit, 60 * 60 * 1000);

// ‚úÖ –§–£–ù–ö–¶–ò–Ø: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–∑—É—á–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤ —Å–µ–≥–æ–¥–Ω—è
function getLearnedToday(chatId) {
    if (!dailyLearnedWords.has(chatId)) {
        dailyLearnedWords.set(chatId, new Set());
    }
    return dailyLearnedWords.get(chatId).size;
}

// ‚úÖ –§–£–ù–ö–¶–ò–Ø: –û—Ç–º–µ—Ç–∫–∞ —Å–ª–æ–≤–∞ –∫–∞–∫ –∏–∑—É—á–µ–Ω–Ω–æ–≥–æ —Å–µ–≥–æ–¥–Ω—è
function markWordAsLearnedToday(chatId, englishWord) {
    if (!dailyLearnedWords.has(chatId)) {
        dailyLearnedWords.set(chatId, new Set());
    }
    
    const userLearnedWords = dailyLearnedWords.get(chatId);
    userLearnedWords.add(englishWord.toLowerCase());
    console.log(`üìù –°–ª–æ–≤–æ "${englishWord}" –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –∏–∑—É—á–µ–Ω–Ω–æ–µ —Å–µ–≥–æ–¥–Ω—è –¥–ª—è ${chatId}`);
}

// ‚úÖ –§–£–ù–ö–¶–ò–Ø: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏ –ª–∏–º–∏—Ç
function isDailyLimitReached(chatId) {
    const learnedToday = getLearnedToday(chatId);
    const DAILY_LIMIT = 5;
    return learnedToday >= DAILY_LIMIT;
}

// ‚úÖ –§–£–ù–ö–¶–ò–Ø: –ü–æ–ª—É—á–µ–Ω–∏–µ –ù–ï –ò–ó–£–ß–ï–ù–ù–´–• —Å–ª–æ–≤
async function getUnlearnedNewWords(chatId) {
    if (!sheetsService.initialized) {
        return [];
    }
    
    try {
        const userWords = await sheetsService.getUserWords(chatId);
        const learnedToday = getLearnedToday(chatId);
        const DAILY_LIMIT = 5;
        
        console.log(`üîç –ü–æ–∏—Å–∫ –Ω–æ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è ${chatId}, –∏–∑—É—á–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è: ${learnedToday}/${DAILY_LIMIT}`);

        // –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∏–∑—É—á–µ–Ω–∏—è - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
        if (learnedToday >= DAILY_LIMIT) {
            console.log(`üö´ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –∏–∑—É—á–µ–Ω–∏—è: ${learnedToday}/${DAILY_LIMIT}`);
            return [];
        }

        // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –§–∏–ª—å—Ç—Ä—É–µ–º —Å–ª–æ–≤–∞ –∫–æ—Ç–æ—Ä—ã–µ –ï–©–ï –ù–ï –ò–ó–£–ß–ï–ù–´ (–Ω–µ –≤ —Å–∏—Å—Ç–µ–º–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è)
        const newWords = userWords.filter(word => {
            if (!word.nextReview || word.status !== 'active') return false;
            
            try {
                const isFirstInterval = word.interval === 1;
                const isNotLearned = !isWordLearned(chatId, word.english);
                
                if (isFirstInterval && isNotLearned) {
                    console.log(`‚úÖ –°–ª–æ–≤–æ "${word.english}" - –Ω–æ–≤–æ–µ –∏ –Ω–µ –∏–∑—É—á–µ–Ω–æ`);
                } else if (isFirstInterval) {
                    console.log(`‚ùå –°–ª–æ–≤–æ "${word.english}" - —É–∂–µ –∏–∑—É—á–µ–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
                }
                
                return isFirstInterval && isNotLearned;
            } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–ª–æ–≤–∞ "${word.english}"`);
                return false;
            }
        });

        console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –Ω–µ –∏–∑—É—á–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤: ${newWords.length}`);

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (—Å–Ω–∞—á–∞–ª–∞ –Ω–æ–≤—ã–µ)
        newWords.sort((a, b) => new Date(b.createdDate) - new Date(a.createdDate));

        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —Å–ª–æ–≤ –¥–æ –ª–∏–º–∏—Ç–∞
        const remainingSlots = DAILY_LIMIT - learnedToday;
        const result = newWords.slice(0, remainingSlots);
        
        console.log(`üéØ –ë—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω–æ: ${result.length} —Å–ª–æ–≤`);
        return result;
        
    } catch (error) {
        console.error('‚ùå Error getting unlearned new words:', error);
        return [];
    }
}

// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
function getMainMenu() {
    return {
        reply_markup: {
            keyboard: [
                ['‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ', 'üìö –ü–æ–≤—Ç–æ—Ä–∏—Ç—å —Å–ª–æ–≤–∞'],
                ['üÜï –ù–æ–≤—ã–µ —Å–ª–æ–≤–∞', 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞']
            ],
            resize_keyboard: true
        }
    };
}

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è
function getListeningKeyboard(audioId) {
    return {
        reply_markup: {
            inline_keyboard: [
                [{ text: 'üîä –ü—Ä–æ—Å–ª—É—à–∞—Ç—å –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ', callback_data: `audio_${audioId}` }],
                [{ text: '‚û°Ô∏è –í—ã–±—Ä–∞—Ç—å –ø–µ—Ä–µ–≤–æ–¥', callback_data: 'enter_translation' }]
            ]
        }
    };
}

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ—Å–ª–µ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è
function getAfterAudioKeyboard() {
    return {
        reply_markup: {
            inline_keyboard: [
                [{ text: '‚úèÔ∏è –í—ã–±—Ä–∞—Ç—å –ø–µ—Ä–µ–≤–æ–¥', callback_data: 'enter_translation' }]
            ]
        }
    };
}

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–≤–æ–¥–∞ –ø—Ä–∏–º–µ—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"
function getExampleInputKeyboard() {
    return {
        reply_markup: {
            keyboard: [
                ['‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'],
                ['‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ']
            ],
            resize_keyboard: true
        }
    };
}

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ —Å –∫–Ω–æ–ø–∫–æ–π "–ü–æ–¥—Ä–æ–±–Ω–µ–µ" –¥–ª—è –≤—Å–µ—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤
function getTranslationSelectionKeyboard(translations, meanings, selectedIndices = []) {
    const translationButtons = [];
    translations.forEach((translation, index) => {
        const isSelected = selectedIndices.includes(index);
        let numberEmoji;
        if (index < 9) {
            numberEmoji = `${index + 1}Ô∏è‚É£`;
        } else {
            const number = index + 1;
            const digits = number.toString().split('');
            numberEmoji = digits.map(digit => {
                const digitEmojis = ['0Ô∏è‚É£', '1Ô∏è‚É£', '2Ô∏è‚É£', '3Ô∏è‚É£', '4Ô∏è‚É£', '5Ô∏è‚É£', '6Ô∏è‚É£', '7Ô∏è‚É£', '8Ô∏è‚É£', '9Ô∏è‚É£'];
                return digitEmojis[parseInt(digit)];
            }).join('');
        }
        const emoji = isSelected ? '‚úÖ' : numberEmoji;
        
        // –ù–∞—Ö–æ–¥–∏–º –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞
        const meaningForTranslation = meanings.find(meaning => meaning.translation === translation);
        const englishDefinition = meaningForTranslation?.englishDefinition || '';
        
        // –û—Å–Ω–æ–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞ —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º
        const mainButtonText = `${emoji} ${translation}`;
        
        // –í—Å–µ–≥–¥–∞ —Å–æ–∑–¥–∞–µ–º –¥–≤–µ –∫–Ω–æ–ø–∫–∏: –æ—Å–Ω–æ–≤–Ω—É—é –∏ "–ü–æ–¥—Ä–æ–±–Ω–µ–µ"
        const row = [
            { text: mainButtonText, callback_data: `toggle_translation_${index}` },
            { text: 'üîç –ü–æ–¥—Ä–æ–±–Ω–µ–µ', callback_data: `details_${index}` }
        ];
        translationButtons.push(row);
    });

    const actionButtons = [];
    if (selectedIndices.length > 0) {
        actionButtons.push([
            { text: `üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å (${selectedIndices.length})`, callback_data: 'save_selected_translations' }
        ]);
    }
    actionButtons.push([
        { text: '‚úèÔ∏è –î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–π –ø–µ—Ä–µ–≤–æ–¥', callback_data: 'custom_translation' },
        { text: 'üîô –û—Ç–º–µ–Ω–∏—Ç—å', callback_data: 'cancel_translation' }
    ]);

    return {
        reply_markup: {
            inline_keyboard: [
                ...translationButtons,
                ...actionButtons
            ]
        }
    };
}

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è —Å–ª–æ–≤
function getReviewKeyboard() {
    return {
        reply_markup: {
            inline_keyboard: [
                [
                    { text: 'üò£ –ó–∞–±—ã–ª', callback_data: 'review_again' },
                    { text: 'üòì –¢—Ä—É–¥–Ω–æ', callback_data: 'review_hard' }
                ],
                [
                    { text: 'üòä –•–æ—Ä–æ—à–æ', callback_data: 'review_good' },
                    { text: 'üéâ –õ–µ–≥–∫–æ', callback_data: 'review_easy' }
                ],
                [
                    { text: '‚è≠Ô∏è –°–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ', callback_data: 'skip_review' }
                ]
            ]
        }
    };
}

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Å–ª–æ–≤
function getNewWordsKeyboard() {
    return {
        reply_markup: {
            inline_keyboard: [
                [{ text: '‚úÖ –í—ã—É—á–∏–ª', callback_data: 'learned_word' }],
                [{ text: 'üîÑ –ù—É–∂–Ω–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å', callback_data: 'need_repeat_word' }],
                [{ text: '‚è≠Ô∏è –°–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ', callback_data: 'skip_new_word' }],
                [{ text: '‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –∏–∑—É—á–µ–Ω–∏–µ', callback_data: 'end_learning' }]
            ]
        }
    };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é
async function showMainMenu(chatId, text = '') {
    try {
        if (text && text.trim() !== '') {
            return await bot.sendMessage(chatId, text, getMainMenu());
        } else {
            return await bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', getMainMenu());
        }
    } catch (error) {
        console.error('‚ùå Error showing main menu:', error);
        // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –µ—Å–ª–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
        try {
            await bot.sendMessage(chatId, text || '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:');
        } catch (e) {
            console.error('‚ùå Critical error sending message:', e);
        }
    }
}

// ‚úÖ –§–£–ù–ö–¶–ò–Ø: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å JSON —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
async function saveWordWithMeanings(chatId, userState, selectedTranslations) {
    console.log('üíæ Saving word with meanings:', { 
        word: userState.tempWord, 
        selectedTranslations: selectedTranslations 
    });
    
    let success = true;
    
    if (sheetsService.initialized) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã - —Ç–µ–ø–µ—Ä—å –ø–æ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º—É —Å–ª–æ–≤—É
        try {
            const existingWords = await sheetsService.getUserWords(chatId);
            const isDuplicate = existingWords.some(word => 
                word.english.toLowerCase() === userState.tempWord.toLowerCase()
            );
            
            if (isDuplicate) {
                await showMainMenu(chatId, 
                    `‚ùå –°–ª–æ–≤–æ "${userState.tempWord}" —É–∂–µ –µ—Å—Ç—å –≤ –≤–∞—à–µ–º —Å–ª–æ–≤–∞—Ä–µ!\n\n` +
                    '–ö–∞–∂–¥–æ–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–æ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑.'
                );
                userStates.delete(chatId);
                return;
            }
        } catch (error) {
            console.error('‚ùå Error checking duplicates:', error);
            // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–∂–µ –µ—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –Ω–µ —É–¥–∞–ª–∞—Å—å
        }

        // ‚úÖ –°–û–ó–î–ê–ï–ú –ú–ê–°–°–ò–í –ó–ù–ê–ß–ï–ù–ò–ô –î–õ–Ø JSON
        const meaningsData = [];
        selectedTranslations.forEach(translation => {
            // –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ Cambridge Dictionary
            const cambridgeMeanings = userState.meanings.filter(
                meaning => meaning.translation === translation
            );
            
            // –î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤ —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            if (cambridgeMeanings.length === 0) {
                meaningsData.push({
                    translation: translation,
                    example: '', // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∂–µ
                    partOfSpeech: '',
                    definition: ''
                });
            } else {
                // –î–ª—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –∏–∑ Cambridge –¥–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
                cambridgeMeanings.forEach(meaning => {
                    meaningsData.push({
                        translation: translation,
                        example: meaning.examples && meaning.examples.length > 0 ? meaning.examples[0].english : '',
                        partOfSpeech: meaning.partOfSpeech || '',
                        definition: meaning.englishDefinition || ''
                    });
                });
            }
        });

        console.log('üìù Meanings data for JSON:', meaningsData);

        // ‚úÖ –°–û–•–†–ê–ù–Ø–ï–ú –í –ù–û–í–û–ú –§–û–†–ú–ê–¢–ï
        success = await sheetsService.addWordWithMeanings(
            chatId,
            userState.tempWord,
            userState.tempTranscription,
            userState.tempAudioUrl,
            meaningsData // –ü–µ—Ä–µ–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –∑–Ω–∞—á–µ–Ω–∏–π
        );
    }

    // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    userStates.delete(chatId);

    if (success) {
        const transcriptionText = userState.tempTranscription ? ` [${userState.tempTranscription}]` : '';
        let successMessage = '‚úÖ –°–ª–æ–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–ª–æ–≤–∞—Ä—å!\n\n' +
            `üí¨ **${userState.tempWord}**${transcriptionText}\n\n` +
            '**–î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:**\n';
        
        selectedTranslations.forEach((translation, index) => {
            successMessage += `\n${index + 1}. ${translation}`;
        });
        
        successMessage += '\n\nüìö –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏–∑—É—á–∞—Ç—å —Å–ª–æ–≤–æ –≤ —Ä–∞–∑–¥–µ–ª–µ "üÜï –ù–æ–≤—ã–µ —Å–ª–æ–≤–∞"!';
        await showMainMenu(chatId, successMessage);
    } else {
        await showMainMenu(chatId, 
            '‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è\n\n' +
            '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–ª–æ–≤–æ –≤ —Å–ª–æ–≤–∞—Ä—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.'
        );
    }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞ –±–µ–∑ –ø—Ä–∏–º–µ—Ä–∞
async function processCustomTranslationWithoutExample(chatId, userState) {
    const newTranslations = [userState.customTranslation, ...userState.tempTranslations];
    const newMeaning = {
        translation: userState.customTranslation,
        englishDefinition: '',
        examples: []
    };
    const newMeanings = [newMeaning, ...userState.meanings];
    
    userStates.set(chatId, {
        ...userState,
        state: 'choosing_translation',
        tempTranslations: newTranslations,
        meanings: newMeanings,
        selectedTranslationIndices: [0]
    });

    const successMessage = `‚úÖ –í–∞—à –ø–µ—Ä–µ–≤–æ–¥ "${userState.customTranslation}" –¥–æ–±–∞–≤–ª–µ–Ω!\n\n` +
        'üéØ –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥—ã –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å:\n' +
        '‚úÖ –í–∞—à –ø–µ—Ä–µ–≤–æ–¥ –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã–π';
    
    await bot.sendMessage(chatId, successMessage, 
        getTranslationSelectionKeyboard(newTranslations, newMeanings, [0])
    );
    await showMainMenu(chatId);
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞ —Å –ø—Ä–∏–º–µ—Ä–æ–º
async function processCustomTranslationWithExample(chatId, userState, example) {
    const newTranslations = [userState.customTranslation, ...userState.tempTranslations];
    const newMeaning = {
        translation: userState.customTranslation,
        englishDefinition: '',
        examples: example ? [{ english: example, russian: '' }] : []
    };
    const newMeanings = [newMeaning, ...userState.meanings];
    
    userStates.set(chatId, {
        ...userState,
        state: 'choosing_translation',
        tempTranslations: newTranslations,
        meanings: newMeanings,
        selectedTranslationIndices: [0]
    });

    let successMessage = `‚úÖ –í–∞—à –ø–µ—Ä–µ–≤–æ–¥ "${userState.customTranslation}" –¥–æ–±–∞–≤–ª–µ–Ω!\n\n`;
    if (example) {
        successMessage += `üìù –ü—Ä–∏–º–µ—Ä: ${example}\n\n`;
    }
    successMessage += 'üéØ –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥—ã –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ —Å–æ—Ö—Ä–∞–¥–µ—Ç—å:\n' +
        '‚úÖ –í–∞—à –ø–µ—Ä–µ–≤–æ–¥ –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã–π';
    
    await bot.sendMessage(chatId, successMessage, 
        getTranslationSelectionKeyboard(newTranslations, newMeanings, [0])
    );
    await showMainMenu(chatId);
}

// ‚úÖ –§–£–ù–ö–¶–ò–Ø: –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ—Ç–∏—Ñ–∏–∫–∞—Ü–∏–π –æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–∏
async function sendReviewNotification(chatId) {
    try {
        const hasWords = await sheetsService.hasWordsForReview(chatId);
        
        if (hasWords) {
            const wordsCount = await sheetsService.getReviewWordsCount(chatId);
            
            let message = 'üîî **–í—Ä–µ–º—è –ø–æ–≤—Ç–æ—Ä—è—Ç—å —Å–ª–æ–≤–∞!**\n\n';
            message += `üìö –°–µ–≥–æ–¥–Ω—è –≥–æ—Ç–æ–≤–æ –∫ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—é: ${wordsCount} —Å–ª–æ–≤\n\n`;
            message += 'üí™ –ü–æ—Ç—Ä–∞—Ç—å—Ç–µ –≤—Å–µ–≥–æ 5 –º–∏–Ω—É—Ç —á—Ç–æ–±—ã —É–∫—Ä–µ–ø–∏—Ç—å –ø–∞–º—è—Ç—å!\n\n';
            message += '–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å:';
            
            await bot.sendMessage(chatId, message, {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'üìö –ù–∞—á–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ', callback_data: 'start_review_from_notification' }],
                        [{ text: '‚è∞ –ù–∞–ø–æ–º–Ω–∏—Ç—å –ø–æ–∑–∂–µ', callback_data: 'snooze_notification' }]
                    ]
                }
            });
            
            console.log(`‚úÖ Sent review notification to ${chatId}`);
            return true;
        }
        return false;
    } catch (error) {
        console.error('‚ùå Error sending review notification:', error);
        return false;
    }
}

// ‚úÖ –§–£–ù–ö–¶–ò–Ø: –ó–∞–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –Ω–æ—Ç–∏—Ñ–∏–∫–∞—Ü–∏–π
function startDailyNotifications() {
    console.log('üïí Starting daily notification scheduler...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç –µ—Å—Ç—å –ª–∏ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
    setInterval(async () => {
        try {
            const now = new Date();
            const currentHour = now.getHours();
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ç–æ–ª—å–∫–æ –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è (9-21)
            if (currentHour >= 9 && currentHour <= 21) {
                console.log('üîç Checking for review notifications...');
                
                // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                if (sheetsService.initialized) {
                    const activeUsers = await sheetsService.getAllActiveUsers();
                    console.log(`üìä Active users found: ${activeUsers.length}`);
                    
                    for (const userId of activeUsers) {
                        const chatId = userId; // –í –Ω–∞—à–µ–º —Å–ª—É—á–∞–µ userId = chatId
                        
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ —É–∂–µ –Ω–æ—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é —Å–µ–≥–æ–¥–Ω—è
                        const lastNotification = notificationScheduler.get(chatId);
                        const today = new Date().toDateString();
                        
                        if (!lastNotification || lastNotification.date !== today) {
                            const sent = await sendReviewNotification(chatId);
                            if (sent) {
                                notificationScheduler.set(chatId, {
                                    date: today,
                                    sent: true
                                });
                            }
                        }
                    }
                }
            }
        } catch (error) {
            console.error('‚ùå Error in notification scheduler:', error);
        }
    }, 30 * 60 * 1000); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
    
    // –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞
    setTimeout(async () => {
        console.log('üöÄ Initial notification check...');
    }, 10000);
}

// ‚úÖ –§–£–ù–ö–¶–ò–Ø: –ù–∞—á–∞–ª–æ —Å–µ—Å—Å–∏–∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
async function startReviewSession(chatId) {
    if (!sheetsService.initialized) {
        await bot.sendMessage(chatId, '‚ùå Google Sheets –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.');
        return;
    }

    try {
        const wordsToReview = await sheetsService.getWordsForReview(chatId);
        
        if (wordsToReview.length === 0) {
            await bot.sendMessage(chatId, 
                'üéâ –û—Ç–ª–∏—á–Ω–æ! –ù–∞ —Å–µ–≥–æ–¥–Ω—è —Å–ª–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –Ω–µ—Ç.\n\n' +
                '–í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∑–∞–≤—Ç—Ä–∞ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π —Å–µ—Å—Å–∏–∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è.'
            );
            return;
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
        userStates.set(chatId, {
            state: 'review_session',
            reviewWords: wordsToReview,
            currentReviewIndex: 0,
            reviewedCount: 0
        });

        await showNextReviewWord(chatId);
        
    } catch (error) {
        console.error('‚ùå Error starting review session:', error);
        await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ª–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è.');
    }
}

// ‚úÖ –§–£–ù–ö–¶–ò–Ø: –ü–æ–∫–∞–∑ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏
async function showNextReviewWord(chatId) {
    const userState = userStates.get(chatId);
    if (!userState || userState.state !== 'review_session') return;

    const { reviewWords, currentReviewIndex } = userState;
    
    if (currentReviewIndex >= reviewWords.length) {
        // –°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞
        await completeReviewSession(chatId, userState);
        return;
    }

    const word = reviewWords[currentReviewIndex];
    const progress = `${currentReviewIndex + 1}/${reviewWords.length}`;
    
    let message = `üìö –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ —Å–ª–æ–≤ ${progress}\n\n`;
    message += `üá¨üáß **${word.english}**\n`;
    
    if (word.transcription) {
        message += `üî§ ${word.transcription}\n`;
    }
    
    message += `\nüí° –í—Å–ø–æ–º–Ω–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ –∏ –Ω–∞–∂–º–∏—Ç–µ "–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç"`;

    await bot.sendMessage(chatId, message, {
        reply_markup: {
            inline_keyboard: [
                [{ text: 'üëÄ –ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç', callback_data: 'show_answer' }],
                [{ text: '‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data: 'skip_review' }],
                [{ text: '‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ', callback_data: 'end_review' }]
            ]
        }
    });
}

// ‚úÖ –§–£–ù–ö–¶–ò–Ø: –ü–æ–∫–∞–∑ –æ—Ç–≤–µ—Ç–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –æ—Ü–µ–Ω–∫–∏ –∏ –ø—Ä–∏–º–µ—Ä–∞–º–∏
async function showReviewAnswer(chatId) {
    const userState = userStates.get(chatId);
    if (!userState || userState.state !== 'review_session') return;

    const word = userState.reviewWords[userState.currentReviewIndex];
    
    let message = `üìñ **–û—Ç–≤–µ—Ç:**\n\n`;
    message += `üá¨üáß ${word.english}\n`;
    
    if (word.transcription) {
        message += `üî§ ${word.transcription}\n`;
    }
    
    message += `\nüá∑üá∫ **–ü–µ—Ä–µ–≤–æ–¥—ã:**\n`;
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã –∏ –ø—Ä–∏–º–µ—Ä—ã
    word.meanings.forEach((meaning, index) => {
        message += `\n${index + 1}. ${meaning.translation}`;
        if (meaning.definition) {
            message += ` - ${meaning.definition}`;
        }
        
        // ‚úÖ –î–û–ë–ê–í–õ–Ø–ï–ú –ü–†–ò–ú–ï–†–´ –ï–°–õ–ò –ï–°–¢–¨
        if (meaning.example && meaning.example.trim() !== '') {
            message += `\n   üìù *–ü—Ä–∏–º–µ—Ä:* ${meaning.example}`;
        }
    });

    if (word.audioUrl) {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        try {
            await bot.sendAudio(chatId, word.audioUrl, {
                caption: 'üîä –ü—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ'
            });
        } catch (error) {
            console.log('‚ùå Audio not available for review');
        }
    }

    await bot.sendMessage(chatId, message, getReviewKeyboard());
}

// ‚úÖ –§–£–ù–ö–¶–ò–Ø: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ü–µ–Ω–∫–∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
async function processReviewRating(chatId, rating) {
    const userState = userStates.get(chatId);
    if (!userState || userState.state !== 'review_session') return;

    const word = userState.reviewWords[userState.currentReviewIndex];
    
    try {
        // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è FSRS
        const cardData = {
            due: new Date(word.nextReview),
            stability: word.stability || 0,
            difficulty: word.difficulty || 0,
            elapsed_days: word.elapsed_days || 0,
            scheduled_days: word.scheduled_days || 0,
            reps: word.reps || 0,
            lapses: word.lapses || 0,
            state: word.state || 0,
            last_review: word.last_review ? new Date(word.last_review) : undefined
        };

        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ FSRS
        const fsrsData = fsrsService.reviewCard(cardData, rating);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Google Sheets
        const success = await sheetsService.updateCardAfterReview(
            chatId, 
            word.english, 
            fsrsData, 
            rating
        );

        if (success) {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            userState.reviewedCount++;
            userState.currentReviewIndex++;
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∞–µ–º —Å–µ—Å—Å–∏—é
            if (userState.currentReviewIndex < userState.reviewWords.length) {
                await showNextReviewWord(chatId);
            } else {
                await completeReviewSession(chatId, userState);
            }
        } else {
            await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.');
        }

    } catch (error) {
        console.error('‚ùå Error processing review rating:', error);
        await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ü–µ–Ω–∫–∏.');
    }
}

// ‚úÖ –§–£–ù–ö–¶–ò–Ø: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
async function completeReviewSession(chatId, userState) {
    const totalWords = userState.reviewWords.length;
    const reviewedCount = userState.reviewedCount;
    
    userStates.delete(chatId);

    let message = 'üéâ **–°–µ—Å—Å–∏—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**\n\n';
    message += `üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n`;
    message += `‚Ä¢ –í—Å–µ–≥–æ —Å–ª–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è: ${totalWords}\n`;
    message += `‚Ä¢ –ü–æ–≤—Ç–æ—Ä–µ–Ω–æ: ${reviewedCount}\n`;
    message += `‚Ä¢ –û—Å—Ç–∞–ª–æ—Å—å: ${totalWords - reviewedCount}\n\n`;
    
    if (reviewedCount === totalWords && totalWords > 0) {
        message += `üí™ –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –í—ã –ø–æ–≤—Ç–æ—Ä–∏–ª–∏ –≤—Å–µ —Å–ª–æ–≤–∞!\n\n`;
    } else if (totalWords > 0) {
        message += `üí° –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –ø–æ–∑–∂–µ.\n\n`;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è
    const newWordsCount = await getUnlearnedNewWords(chatId).then(words => words.length);
    if (newWordsCount > 0) {
        message += `üÜï –î–æ—Å—Ç—É–ø–Ω–æ –Ω–æ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è: ${newWordsCount}\n`;
        message += `–ú–æ–∂–µ—Ç–µ –∏–∑—É—á–∏—Ç—å –∏—Ö —á–µ—Ä–µ–∑ –º–µ–Ω—é "üÜï –ù–æ–≤—ã–µ —Å–ª–æ–≤–∞"!`;
    }
    
    await bot.sendMessage(chatId, message, getMainMenu());
}

// ‚úÖ –§–£–ù–ö–¶–ò–Ø: –ù–∞—á–∞–ª–æ —Å–µ—Å—Å–∏–∏ –∏–∑—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Å–ª–æ–≤
async function startNewWordsSession(chatId) {
    if (!sheetsService.initialized) {
        await bot.sendMessage(chatId, '‚ùå Google Sheets –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.');
        return;
    }

    try {
        const learnedToday = getLearnedToday(chatId);
        const DAILY_LIMIT = 5;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏ –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç
        if (learnedToday >= DAILY_LIMIT) {
            await bot.sendMessage(chatId, 
                `üéâ –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞!\n\n` +
                `üìä –ò–∑—É—á–µ–Ω–æ —Å–ª–æ–≤ —Å–µ–≥–æ–¥–Ω—è: ${learnedToday}/${DAILY_LIMIT}\n\n` +
                'üí° –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∑–∞–≤—Ç—Ä–∞ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Å–ª–æ–≤!\n' +
                'üìö –ú–æ–∂–µ—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —É–∂–µ –∏–∑—É—á–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞'
            );
            return;
        }

        const newWords = await getUnlearnedNewWords(chatId);
        
        if (newWords.length === 0) {
            await bot.sendMessage(chatId, 
                `üéâ –ù–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–æ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –Ω–µ—Ç!\n\n` +
                `üìä –ò–∑—É—á–µ–Ω–æ —Å–ª–æ–≤ —Å–µ–≥–æ–¥–Ω—è: ${learnedToday}/${DAILY_LIMIT}\n\n` +
                'üí° –í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –º–µ–Ω—é "‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ"\n' +
                'üìö –ò–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —É–∂–µ –∏–∑—É—á–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞'
            );
            return;
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é –∏–∑—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Å–ª–æ–≤
        userStates.set(chatId, {
            state: 'learning_new_words',
            newWords: newWords,
            currentWordIndex: 0,
            learnedCount: 0
        });

        console.log(`üéØ –ù–∞—á–∞—Ç–∞ —Å–µ—Å—Å–∏—è –∏–∑—É—á–µ–Ω–∏—è –¥–ª—è ${chatId}, –¥–æ—Å—Ç—É–ø–Ω–æ —Å–ª–æ–≤: ${newWords.length}`);
        await showNextNewWord(chatId);
        
    } catch (error) {
        console.error('‚ùå Error starting new words session:', error);
        await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–æ–≤—ã—Ö —Å–ª–æ–≤.');
    }
}

// ‚úÖ –§–£–ù–ö–¶–ò–Ø: –ü–æ–∫–∞–∑ —Å–ª–µ–¥—É—é—â–µ–≥–æ –Ω–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞ —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏
async function showNextNewWord(chatId) {
    const userState = userStates.get(chatId);
    if (!userState || userState.state !== 'learning_new_words') return;

    const { newWords, currentWordIndex } = userState;
    
    if (currentWordIndex >= newWords.length) {
        // –°–µ—Å—Å–∏—è –∏–∑—É—á–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞
        await completeNewWordsSession(chatId, userState);
        return;
    }

    const word = newWords[currentWordIndex];
    const progress = `${currentWordIndex + 1}/${newWords.length}`;
    
    let message = `üÜï –ò–∑—É—á–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Å–ª–æ–≤ ${progress}\n\n`;
    message += `üá¨üáß **${word.english}**\n`;
    
    if (word.transcription) {
        message += `üî§ ${word.transcription}\n`;
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã —Å—Ä–∞–∑—É –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è
    message += `\nüá∑üá∫ **–ü–µ—Ä–µ–≤–æ–¥—ã:**\n`;
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã –∏ –ø—Ä–∏–º–µ—Ä—ã
    word.meanings.forEach((meaning, index) => {
        message += `\n${index + 1}. ${meaning.translation}`;
        if (meaning.definition) {
            message += ` - ${meaning.definition}`;
        }
        
        // ‚úÖ –î–û–ë–ê–í–õ–Ø–ï–ú –ü–†–ò–ú–ï–†–´ –ï–°–õ–ò –ï–°–¢–¨
        if (meaning.example && meaning.example.trim() !== '') {
            message += `\n   üìù *–ü—Ä–∏–º–µ—Ä:* ${meaning.example}`;
        }
    });

    if (word.audioUrl) {
        try {
            await bot.sendAudio(chatId, word.audioUrl, {
                caption: 'üîä –ü—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ'
            });
        } catch (error) {
            console.log('‚ùå Audio not available for new word');
        }
    }

    await bot.sendMessage(chatId, message, getNewWordsKeyboard());
}

// ‚úÖ –ü–ï–†–ï–ü–ò–°–ê–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞
async function processNewWordLearning(chatId, action) {
    const userState = userStates.get(chatId);
    if (!userState || userState.state !== 'learning_new_words') return;

    const word = userState.newWords[userState.currentWordIndex];
    
    try {
        if (action === 'learned') {
            // ‚úÖ –í–ê–ñ–ù–û: –û—Ç–º–µ—á–∞–µ–º —Å–ª–æ–≤–æ –∫–∞–∫ –ò–ó–£–ß–ï–ù–ù–û–ï (—É–±—Ä–∞—Ç—å –∏–∑ –Ω–æ–≤—ã—Ö)
            markWordAsLearned(chatId, word.english);
            
            // ‚úÖ –û—Ç–º–µ—á–∞–µ–º –¥–ª—è –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞
            markWordAsLearnedToday(chatId, word.english);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ FSRS
            const cardData = {
                due: new Date(word.nextReview),
                stability: 0,
                difficulty: 0,
                elapsed_days: 0,
                scheduled_days: 0,
                reps: 0,
                lapses: 0,
                state: 0
            };

            const fsrsData = fsrsService.reviewCard(cardData, 'good');
            const success = await sheetsService.updateCardAfterReview(
                chatId, 
                word.english, 
                fsrsData, 
                'good'
            );

            if (success) {
                userState.learnedCount++;
                console.log(`üìö –°–ª–æ–≤–æ "${word.english}" –ø–µ—Ä–µ—à–ª–æ –≤ —Å–∏—Å—Ç–µ–º—É –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è`);
            }
            
            // ‚úÖ –£–î–ê–õ–Ø–ï–ú —Å–ª–æ–≤–æ –∏–∑ –º–∞—Å—Å–∏–≤–∞ –Ω–æ–≤—ã—Ö —Å–ª–æ–≤ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ "–í—ã—É—á–∏–ª"
            userState.newWords.splice(userState.currentWordIndex, 1);
            
        } else if (action === 'repeat') {
            // –î–ª—è "–ù—É–∂–Ω–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å" - –Ω–µ –æ—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –∏–∑—É—á–µ–Ω–Ω–æ–µ,
            // —Å–ª–æ–≤–æ –æ—Å—Ç–∞–µ—Ç—Å—è –≤ –º–∞—Å—Å–∏–≤–µ –∏ –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω–æ —Å–Ω–æ–≤–∞
            console.log(`üîÑ –°–ª–æ–≤–æ "${word.english}" –æ—Å—Ç–∞–ª–æ—Å—å –≤ –Ω–æ–≤—ã—Ö —Å–ª–æ–≤–∞—Ö –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è`);
            
            // ‚úÖ –ü–ï–†–ï–ú–ï–©–ê–ï–ú —Å–ª–æ–≤–æ –≤ –∫–æ–Ω–µ—Ü –º–∞—Å—Å–∏–≤–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∫–∞–∑–∞
            const repeatedWord = userState.newWords.splice(userState.currentWordIndex, 1)[0];
            userState.newWords.push(repeatedWord);
        }
        
        // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å—Ç–∞–ª–∏—Å—å –ª–∏ —Å–ª–æ–≤–∞ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è
        if (userState.newWords.length > 0) {
            // –ï—Å–ª–∏ —Å–ª–æ–≤–∞ –æ—Å—Ç–∞–ª–∏—Å—å - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ
            // currentWordIndex –Ω–µ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º, —Ç.–∫. –º—ã –ª–∏–±–æ —É–¥–∞–ª–∏–ª–∏ —Ç–µ–∫—É—â–µ–µ —Å–ª–æ–≤–æ, 
            // –ª–∏–±–æ –ø–µ—Ä–µ–º–µ—Å—Ç–∏–ª–∏ –µ–≥–æ –≤ –∫–æ–Ω–µ—Ü –º–∞—Å—Å–∏–≤–∞
            await showNextNewWord(chatId);
        } else {
            // –ï—Å–ª–∏ –≤—Å–µ —Å–ª–æ–≤–∞ –∏–∑—É—á–µ–Ω—ã - –∑–∞–≤–µ—Ä—à–∞–µ–º —Å–µ—Å—Å–∏—é
            await completeNewWordsSession(chatId, userState);
        }

    } catch (error) {
        console.error('‚ùå Error processing new word learning:', error);
        await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.');
    }
}

// ‚úÖ –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü–æ–∫–∞–∑ —Å–ª–µ–¥—É—é—â–µ–≥–æ –Ω–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞
async function showNextNewWord(chatId) {
    const userState = userStates.get(chatId);
    if (!userState || userState.state !== 'learning_new_words') return;

    const { newWords, currentWordIndex } = userState;
    
    // ‚úÖ –ü–†–û–í–ï–†–ö–ê: –ï—Å–ª–∏ —Å–ª–æ–≤ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å - –∑–∞–≤–µ—Ä—à–∞–µ–º —Å–µ—Å—Å–∏—é
    if (newWords.length === 0) {
        await completeNewWordsSession(chatId, userState);
        return;
    }

    // ‚úÖ –£–ë–ï–ñ–î–ê–ï–ú–°–Ø, —á—Ç–æ –∏–Ω–¥–µ–∫—Å –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –º–∞—Å—Å–∏–≤–∞
    if (currentWordIndex >= newWords.length) {
        userState.currentWordIndex = 0; // –ù–∞—á–∏–Ω–∞–µ–º —Å–Ω–∞—á–∞–ª–∞ –µ—Å–ª–∏ –∏–Ω–¥–µ–∫—Å –≤—ã—à–µ–ª –∑–∞ –ø—Ä–µ–¥–µ–ª—ã
    }

    const word = newWords[userState.currentWordIndex];
    const progress = `${userState.learnedCount + 1}/${userState.learnedCount + newWords.length}`;
    
    let message = `üÜï –ò–∑—É—á–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Å–ª–æ–≤ ${progress}\n\n`;
    message += `üá¨üáß **${word.english}**\n`;
    
    if (word.transcription) {
        message += `üî§ ${word.transcription}\n`;
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã —Å—Ä–∞–∑—É –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è
    message += `\nüá∑üá∫ **–ü–µ—Ä–µ–≤–æ–¥—ã:**\n`;
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã –∏ –ø—Ä–∏–º–µ—Ä—ã
    word.meanings.forEach((meaning, index) => {
        message += `\n${index + 1}. ${meaning.translation}`;
        if (meaning.definition) {
            message += ` - ${meaning.definition}`;
        }
        
        // ‚úÖ –î–û–ë–ê–í–õ–Ø–ï–ú –ü–†–ò–ú–ï–†–´ –ï–°–õ–ò –ï–°–¢–¨
        if (meaning.example && meaning.example.trim() !== '') {
            message += `\n   üìù *–ü—Ä–∏–º–µ—Ä:* ${meaning.example}`;
        }
    });

    if (word.audioUrl) {
        try {
            await bot.sendAudio(chatId, word.audioUrl, {
                caption: 'üîä –ü—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ'
            });
        } catch (error) {
            console.log('‚ùå Audio not available for new word');
        }
    }

    await bot.sendMessage(chatId, message, getNewWordsKeyboard());
}

// ‚úÖ –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ù–∞—á–∞–ª–æ —Å–µ—Å—Å–∏–∏ –∏–∑—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Å–ª–æ–≤
async function startNewWordsSession(chatId) {
    if (!sheetsService.initialized) {
        await bot.sendMessage(chatId, '‚ùå Google Sheets –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.');
        return;
    }

    try {
        const learnedToday = getLearnedToday(chatId);
        const DAILY_LIMIT = 5;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏ –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç
        if (learnedToday >= DAILY_LIMIT) {
            await bot.sendMessage(chatId, 
                `üéâ –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞!\n\n` +
                `üìä –ò–∑—É—á–µ–Ω–æ —Å–ª–æ–≤ —Å–µ–≥–æ–¥–Ω—è: ${learnedToday}/${DAILY_LIMIT}\n\n` +
                'üí° –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∑–∞–≤—Ç—Ä–∞ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Å–ª–æ–≤!\n' +
                'üìö –ú–æ–∂–µ—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —É–∂–µ –∏–∑—É—á–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞'
            );
            return;
        }

        const newWords = await getUnlearnedNewWords(chatId);
        
        if (newWords.length === 0) {
            await bot.sendMessage(chatId, 
                `üéâ –ù–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–æ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –Ω–µ—Ç!\n\n` +
                `üìä –ò–∑—É—á–µ–Ω–æ —Å–ª–æ–≤ —Å–µ–≥–æ–¥–Ω—è: ${learnedToday}/${DAILY_LIMIT}\n\n` +
                'üí° –í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –º–µ–Ω—é "‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ"\n' +
                'üìö –ò–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —É–∂–µ –∏–∑—É—á–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞'
            );
            return;
        }

        // ‚úÖ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ò–†–£–ï–ú —Å–µ—Å—Å–∏—é –∏–∑—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Å–ª–æ–≤
        userStates.set(chatId, {
            state: 'learning_new_words',
            newWords: newWords,
            currentWordIndex: 0,
            learnedCount: 0,
            originalWordsCount: newWords.length // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        });

        console.log(`üéØ –ù–∞—á–∞—Ç–∞ —Å–µ—Å—Å–∏—è –∏–∑—É—á–µ–Ω–∏—è –¥–ª—è ${chatId}, –¥–æ—Å—Ç—É–ø–Ω–æ —Å–ª–æ–≤: ${newWords.length}`);
        await showNextNewWord(chatId);
        
    } catch (error) {
        console.error('‚ùå Error starting new words session:', error);
        await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–æ–≤—ã—Ö —Å–ª–æ–≤.');
    }
}

// ‚úÖ –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –∏–∑—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Å–ª–æ–≤
async function completeNewWordsSession(chatId, userState) {
    const originalWordsCount = userState.originalWordsCount || userState.newWords.length + userState.learnedCount;
    const learnedCount = userState.learnedCount;
    
    userStates.delete(chatId);

    let message = 'üéâ **–°–µ—Å—Å–∏—è –∏–∑—É—á–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**\n\n';
    message += `üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n`;
    message += `‚Ä¢ –í—Å–µ–≥–æ –Ω–æ–≤—ã—Ö —Å–ª–æ–≤: ${originalWordsCount}\n`;
    message += `‚Ä¢ –ò–∑—É—á–µ–Ω–æ: ${learnedCount}\n`;
    message += `‚Ä¢ –û—Ç–ª–æ–∂–µ–Ω–æ: ${originalWordsCount - learnedCount}\n\n`;
    
    if (learnedCount === originalWordsCount && originalWordsCount > 0) {
        message += `üí™ –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –í—ã –∏–∑—É—á–∏–ª–∏ –≤—Å–µ –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞!\n\n`;
        message += `üîÑ –≠—Ç–∏ —Å–ª–æ–≤–∞ –ø–æ—è–≤—è—Ç—Å—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –∑–∞–≤—Ç—Ä–∞.`;
    } else if (originalWordsCount > 0) {
        message += `üí° –û—Å—Ç–∞–≤—à–∏–µ—Å—è —Å–ª–æ–≤–∞ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑.\n\n`;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
    const reviewWordsCount = await sheetsService.getReviewWordsCount(chatId);
    if (reviewWordsCount > 0) {
        message += `\nüìö –°–ª–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è: ${reviewWordsCount}\n`;
        message += `–ú–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –º–µ–Ω—é!`;
    }
    
    await bot.sendMessage(chatId, message, getMainMenu());
}

// ‚úÖ –§–£–ù–ö–¶–ò–Ø: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –∏–∑—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Å–ª–æ–≤
async function completeNewWordsSession(chatId, userState) {
    const totalWords = userState.newWords.length;
    const learnedCount = userState.learnedCount;
    
    userStates.delete(chatId);

    let message = 'üéâ **–°–µ—Å—Å–∏—è –∏–∑—É—á–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**\n\n';
    message += `üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n`;
    message += `‚Ä¢ –í—Å–µ–≥–æ –Ω–æ–≤—ã—Ö —Å–ª–æ–≤: ${totalWords}\n`;
    message += `‚Ä¢ –ò–∑—É—á–µ–Ω–æ: ${learnedCount}\n`;
    message += `‚Ä¢ –û—Ç–ª–æ–∂–µ–Ω–æ: ${totalWords - learnedCount}\n\n`;
    
    if (learnedCount === totalWords && totalWords > 0) {
        message += `üí™ –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –í—ã –∏–∑—É—á–∏–ª–∏ –≤—Å–µ –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞!\n\n`;
        message += `üîÑ –≠—Ç–∏ —Å–ª–æ–≤–∞ –ø–æ—è–≤—è—Ç—Å—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –∑–∞–≤—Ç—Ä–∞.`;
    } else if (totalWords > 0) {
        message += `üí° –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–∑—É—á–µ–Ω–∏–µ –ø–æ–∑–∂–µ.\n\n`;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
    const reviewWordsCount = await sheetsService.getReviewWordsCount(chatId);
    if (reviewWordsCount > 0) {
        message += `\nüìö –°–ª–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è: ${reviewWordsCount}\n`;
        message += `–ú–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –º–µ–Ω—é!`;
    }
    
    await bot.sendMessage(chatId, message, getMainMenu());
}

// ‚úÖ –§–£–ù–ö–¶–ò–Ø: –ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function showUserStats(chatId) {
    if (!sheetsService.initialized) {
        await bot.sendMessage(chatId, '‚ùå Google Sheets –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.');
        return;
    }

    try {
        const userWords = await sheetsService.getUserWords(chatId);
        const activeWords = userWords.filter(word => word.status === 'active');
        const reviewWordsCount = await sheetsService.getReviewWordsCount(chatId);
        const newWordsCount = await getUnlearnedNewWords(chatId).then(words => words.length);
        
        let message = 'üìä **–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n\n';
        message += `üìö –í—Å–µ–≥–æ —Å–ª–æ–≤: ${activeWords.length}\n`;
        message += `üîÑ –°–ª–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è: ${reviewWordsCount}\n`;
        message += `üÜï –ù–æ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è: ${newWordsCount}\n`;
        
        if (activeWords.length > 0) {
            // –°—á–∏—Ç–∞–µ–º —Å–ª–æ–≤–∞ –ø–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
            const intervals = {
                '–ù–æ–≤—ã–µ (1 –¥–µ–Ω—å)': 0,
                '2-7 –¥–Ω–µ–π': 0,
                '1-4 –Ω–µ–¥–µ–ª–∏': 0,
                '1+ –º–µ—Å—è—Ü': 0
            };
            
            activeWords.forEach(word => {
                if (word.interval === 1) intervals['–ù–æ–≤—ã–µ (1 –¥–µ–Ω—å)']++;
                else if (word.interval <= 7) intervals['2-7 –¥–Ω–µ–π']++;
                else if (word.interval <= 30) intervals['1-4 –Ω–µ–¥–µ–ª–∏']++;
                else intervals['1+ –º–µ—Å—è—Ü']++;
            });
            
            message += `\nüìÖ **–ò–Ω—Ç–µ—Ä–≤–∞–ª—ã –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è:**\n`;
            message += `‚Ä¢ –ù–æ–≤—ã–µ: ${intervals['–ù–æ–≤—ã–µ (1 –¥–µ–Ω—å)']} —Å–ª–æ–≤\n`;
            message += `‚Ä¢ 2-7 –¥–Ω–µ–π: ${intervals['2-7 –¥–Ω–µ–π']} —Å–ª–æ–≤\n`;
            message += `‚Ä¢ 1-4 –Ω–µ–¥–µ–ª–∏: ${intervals['1-4 –Ω–µ–¥–µ–ª–∏']} —Å–ª–æ–≤\n`;
            message += `‚Ä¢ 1+ –º–µ—Å—è—Ü: ${intervals['1+ –º–µ—Å—è—Ü']} —Å–ª–æ–≤\n`;
        }
        
        message += `\nüí° **–°–∏—Å—Ç–µ–º–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –Ω–∞ –±—ã—Å—Ç—Ä–æ–µ –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:**\n`;
        message += `‚Ä¢ –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ: –ë–ï–ó –õ–ò–ú–ò–¢–ê (–≤—Å–µ –≥–æ—Ç–æ–≤—ã–µ —Å–ª–æ–≤–∞)\n`;
        message += `‚Ä¢ –ù–æ–≤—ã–µ —Å–ª–æ–≤–∞: 5 –≤ –¥–µ–Ω—å\n`;
        message += `‚Ä¢ –ß–∞—Å—Ç—ã–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è\n`;
        message += `‚Ä¢ –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã\n`;
        
        message += `\nüí™ –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!`;

        await bot.sendMessage(chatId, message, getMainMenu());
    } catch (error) {
        console.error('‚ùå Error showing stats:', error);
        await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.');
    }
}

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.onText(/\/start/, async (msg) => {
    const chatId = msg.chat.id;
    await showMainMenu(chatId, 
        'üìö –ê–Ω–≥–ª–æ-—Ä—É—Å—Å–∫–∏–π —Å–ª–æ–≤–∞—Ä—å\n' +
        'üî§ –° —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–µ–π –∏ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ–º\n' +
        'üá¨üáß –ë—Ä–∏—Ç–∞–Ω—Å–∫–∏–π –≤–∞—Ä–∏–∞–Ω—Ç\n' +
        'üìù –ö–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ —Ö—Ä–∞–Ω–∏—Ç—Å—è —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏\n' +
        'üîÑ **–£–º–Ω–æ–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–æ–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ**\n' +
        'üîî **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è**\n\n' +
        'üí° **–ö–∞–∫ —É—á–∏—Ç—å —Å–ª–æ–≤–∞:**\n' +
        '1. ‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ\n' +
        '2. üÜï –ò–∑—É—á–∏—Ç—å –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞ (5 –≤ –¥–µ–Ω—å)\n' +
        '3. üìö –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∏–∑—É—á–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞\n\n' +
        '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:'
    );
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
bot.onText(/\/reset/, async (msg) => {
    const chatId = msg.chat.id;
    userStates.delete(chatId);
    await bot.sendMessage(chatId, '‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.');
    await showMainMenu(chatId);
});

// ‚úÖ –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –ö–û–ú–ê–ù–î–ê –î–õ–Ø –°–ë–†–û–°–ê –ü–†–û–ì–†–ï–°–°–ê
bot.onText(/\/reset_progress/, async (msg) => {
    const chatId = msg.chat.id;
    
    dailyLearnedWords.delete(chatId);
    learnedWords.delete(chatId);
    
    await bot.sendMessage(chatId, 
        '‚úÖ **–í–µ—Å—å –ø—Ä–æ–≥—Ä–µ—Å—Å —Å–±—Ä–æ—à–µ–Ω!**\n\n' +
        '‚Ä¢ –î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç —Å–±—Ä–æ—à–µ–Ω\n' +
        '‚Ä¢ –ò–∑—É—á–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ –æ—á–∏—â–µ–Ω—ã\n' +
        '‚Ä¢ –í—Å–µ —Å–ª–æ–≤–∞ —Å–Ω–æ–≤–∞ –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è'
    );
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è —Å–ª–æ–≤
bot.onText(/\/review/, async (msg) => {
    const chatId = msg.chat.id;
    await startReviewSession(chatId);
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
bot.onText(/\/stats/, async (msg) => {
    const chatId = msg.chat.id;
    await showUserStats(chatId);
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
bot.onText(/\/notify/, async (msg) => {
    const chatId = msg.chat.id;
    await sendReviewNotification(chatId);
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ª–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
bot.onText(/\/check/, async (msg) => {
    const chatId = msg.chat.id;
    if (sheetsService.initialized) {
        const count = await sheetsService.getReviewWordsCount(chatId);
        await bot.sendMessage(chatId, 
            `üìä –°–ª–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è: ${count}\n\n` +
            (count > 0 ? 'üí™ –ù–∞—á–Ω–∏—Ç–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –º–µ–Ω—é!' : 'üéâ –ù–∞ —Å–µ–≥–æ–¥–Ω—è —Å–ª–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –Ω–µ—Ç!')
        );
    } else {
        await bot.sendMessage(chatId, '‚ùå Google Sheets –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.');
    }
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö —Å–ª–æ–≤
bot.onText(/\/new/, async (msg) => {
    const chatId = msg.chat.id;
    if (sheetsService.initialized) {
        const learnedToday = getLearnedToday(chatId);
        const DAILY_LIMIT = 5;
        const newWords = await getUnlearnedNewWords(chatId);
        const count = newWords.length;
        
        if (learnedToday >= DAILY_LIMIT) {
            await bot.sendMessage(chatId, 
                `üéâ –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞!\n\n` +
                `üìä –ò–∑—É—á–µ–Ω–æ —Å–ª–æ–≤ —Å–µ–≥–æ–¥–Ω—è: ${learnedToday}/${DAILY_LIMIT}\n\n` +
                'üí° –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∑–∞–≤—Ç—Ä–∞ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Å–ª–æ–≤!'
            );
        } else if (count > 0) {
            await bot.sendMessage(chatId, 
                `üÜï –ù–æ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è: ${count}\n` +
                `üìä –ò–∑—É—á–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è: ${learnedToday}/${DAILY_LIMIT}\n\n` +
                'üí° –•–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –∏–∑—É—á–µ–Ω–∏–µ?',
                {
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: 'üéØ –ù–∞—á–∞—Ç—å –∏–∑—É—á–µ–Ω–∏–µ', callback_data: 'start_learning_from_command' }],
                            [{ text: 'üìä –¢–æ–ª—å–∫–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'show_new_stats_only' }]
                        ]
                    }
                }
            );
        } else {
            await bot.sendMessage(chatId, 
                `üéâ –ù–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–æ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –Ω–µ—Ç!\n\n` +
                `üìä –ò–∑—É—á–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è: ${learnedToday}/${DAILY_LIMIT}\n` +
                'üí° –î–æ–±–∞–≤–ª—è–π—Ç–µ –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –º–µ–Ω—é "‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ"'
            );
        }
    } else {
        await bot.sendMessage(chatId, '‚ùå Google Sheets –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.');
    }
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–∞ (–æ—Ç–ª–∞–¥–∫–∞)
bot.onText(/\/limit/, async (msg) => {
    const chatId = msg.chat.id;
    const learnedToday = getLearnedToday(chatId);
    const DAILY_LIMIT = 5;
    
    await bot.sendMessage(chatId, 
        `üìä **–°—Ç–∞—Ç—É—Å –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞:**\n\n` +
        `‚Ä¢ –ò–∑—É—á–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è: ${learnedToday}/${DAILY_LIMIT}\n` +
        `‚Ä¢ –û—Å—Ç–∞–ª–æ—Å—å —Å–ª–æ–≤: ${DAILY_LIMIT - learnedToday}\n` +
        `‚Ä¢ –õ–∏–º–∏—Ç –¥–æ—Å—Ç–∏–≥–Ω—É—Ç: ${learnedToday >= DAILY_LIMIT ? '‚úÖ –î–∞' : '‚ùå –ù–µ—Ç'}\n\n` +
        `üí° –õ–∏–º–∏—Ç —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 4:00`
    );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    const text = msg.text;

    if (!text || text.startsWith('/')) {
        return;
    }

    const userState = userStates.get(chatId);

    if (text === '‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ') {
        userStates.set(chatId, { state: 'waiting_english' });
        await showMainMenu(chatId, 'üá¨üáß –í–≤–µ–¥–∏—Ç–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ:');
    }
    else if (text === 'üìö –ü–æ–≤—Ç–æ—Ä–∏—Ç—å —Å–ª–æ–≤–∞') {
        await startReviewSession(chatId);
    }
    else if (text === 'üÜï –ù–æ–≤—ã–µ —Å–ª–æ–≤–∞') {
        await startNewWordsSession(chatId);
    }
    else if (text === 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞') {
        await showUserStats(chatId);
    }
    else if (userState?.state === 'waiting_english') {
        // ... —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤ ...
        const englishWord = text.trim().toLowerCase();
        console.log(`üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª–æ–≤–∞: "${englishWord}"`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–æ–≤
        if (!cambridgeService || !yandexService) {
            console.error('‚ùå –°–µ—Ä–≤–∏—Å—ã –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
            await showMainMenu(chatId, '‚ùå –°–µ—Ä–≤–∏—Å—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
            userStates.delete(chatId);
            return;
        }

        // –ë–æ–ª–µ–µ –≥–∏–±–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ
        if (!/^[a-zA-Z\s\-'\.]+$/.test(englishWord)) {
            await showMainMenu(chatId, 
                '‚ùå –≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ.\n' +
                '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º:'
            );
            return;
        }

        await showMainMenu(chatId, 'üîç –ò—â—É –ø–µ—Ä–µ–≤–æ–¥, —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é, –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ –∏ –ø—Ä–∏–º–µ—Ä—ã...');

        try {
            console.log(`üéØ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ –¥–ª—è: "${englishWord}"`);
            let audioId = null;
            let transcription = '';
            let audioUrl = '';
            let meanings = [];
            let translations = [];

            // ‚úÖ 1. –ü–û–õ–£–ß–ê–ï–ú –ü–ï–†–ï–í–û–î–´ –ò–ó CAMBRIDGE
            console.log('üìö –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º Cambridge Dictionary...');
            const cambridgeData = await cambridgeService.getWordData(englishWord);
            if (cambridgeData.meanings && cambridgeData.meanings.length > 0) {
                console.log(`‚úÖ Cambridge —É—Å–ø–µ—à–Ω–æ: ${cambridgeData.meanings.length} –∑–Ω–∞—á–µ–Ω–∏–π`);
                meanings = cambridgeData.meanings;
                translations = meanings.map(m => m.translation).filter((t, i, arr) => arr.indexOf(t) === i);
                // –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                console.log('üìù –ù–∞–π–¥–µ–Ω—ã –ø–µ—Ä–µ–≤–æ–¥—ã:', translations);
            } else {
                console.log('‚ùå Cambridge –Ω–µ –≤–µ—Ä–Ω—É–ª –ø–µ—Ä–µ–≤–æ–¥—ã');
                // –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ —Ä—É—á–Ω–æ–º—É –≤–≤–æ–¥—É
                meanings = [];
                translations = [];
            }

            // ‚úÖ 2. –ü–û–õ–£–ß–ê–ï–ú –¢–†–ê–ù–°–ö–†–ò–ü–¶–ò–Æ –ò –ê–£–î–ò–û –û–¢ –Ø–ù–î–ï–ö–°–ê
            console.log('üî§ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —É –Ø–Ω–¥–µ–∫—Å...');
            try {
                const yandexData = await yandexService.getTranscriptionAndAudio(englishWord);
                transcription = yandexData.transcription || '';
                audioUrl = yandexData.audioUrl || '';
                if (audioUrl) {
                    audioId = Date.now().toString();
                }
                console.log(`‚úÖ –Ø–Ω–¥–µ–∫—Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è: ${transcription}`);
            } catch (yandexError) {
                console.log(`‚ùå –Ø–Ω–¥–µ–∫—Å –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: ${yandexError.message}`);
                // Fallback –¥–ª—è –∞—É–¥–∏–æ
                audioUrl = `https://translate.google.com/translate_tts?ie=UTF-8&q=${encodeURIComponent(englishWord)}&tl=en-gb&client=tw-ob`;
                audioId = Date.now().toString();
            }

            // ‚úÖ 3. –°–û–•–†–ê–ù–Ø–ï–ú –†–ï–ó–£–õ–¨–¢–ê–¢–´
            userStates.set(chatId, {
                state: 'showing_transcription',
                tempWord: englishWord,
                tempTranscription: transcription,
                tempAudioUrl: audioUrl,
                tempAudioId: audioId,
                tempTranslations: translations,
                meanings: meanings,
                selectedTranslationIndices: []
            });

            // ‚úÖ 4. –§–û–†–ú–ò–†–£–ï–ú –°–û–û–ë–©–ï–ù–ò–ï –î–õ–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
            let message = `üìù –°–ª–æ–≤–æ: ${englishWord}`;
            if (transcription) {
                message += `\nüî§ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è: ${transcription}`;
            } else {
                message += `\n‚ùå –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`;
            }

            if (audioUrl) {
                message += `\n\nüéµ –î–æ—Å—Ç—É–ø–Ω–æ –∞—É–¥–∏–æ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ`;
            } else {
                message += `\n\n‚ùå –ê—É–¥–∏–æ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`;
            }

            if (translations.length > 0) {
                message += `\n\nüéØ –ù–∞–π–¥–µ–Ω–æ ${translations.length} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–µ—Ä–µ–≤–æ–¥–∞ –∏–∑ Cambridge Dictionary`;
                // ‚úÖ –ü–û–ö–ê–ó–´–í–ê–ï–ú –ù–ê–ô–î–ï–ù–ù–´–ï –ü–†–ò–ú–ï–†–´
                const totalExamples = meanings.reduce((total, meaning) => 
                    total + (meaning.examples ? meaning.examples.length : 0), 0
                );
                if (totalExamples > 0) {
                    message += `\nüìù –ù–∞–π–¥–µ–Ω–æ ${totalExamples} –ø—Ä–∏–º–µ—Ä–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è`;
                }
            } else {
                message += `\n\n‚ùå –ü–µ—Ä–µ–≤–æ–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ Cambridge Dictionary\n‚úèÔ∏è –í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–π –ø–µ—Ä–µ–≤–æ–¥`;
            }

            message += `\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
            await bot.sendMessage(chatId, message, getListeningKeyboard(audioId));
            await showMainMenu(chatId);

        } catch (error) {
            console.error('Error getting word data:', error);
            await showMainMenu(chatId, 
                '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å–ª–æ–≤–∞\n\n' +
                '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ —Å–ª–æ–≤–æ –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ.'
            );
            // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            userStates.delete(chatId);
        }
    }
    // –ò–ó–ú–ï–ù–ï–ù–û: –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–≤–æ–µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞
    else if (userState?.state === 'waiting_custom_translation') {
        const customTranslation = text.trim();
        if (!customTranslation) {
            await showMainMenu(chatId, '‚ùå –ü–µ—Ä–µ–≤–æ–¥ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥:');
            return;
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –ø—Ä–∏–º–µ—Ä–∞
        userStates.set(chatId, {
            ...userState,
            state: 'waiting_custom_example',
            customTranslation: customTranslation
        });

        await bot.sendMessage(chatId,
            `‚úÖ –í—ã –≤–≤–µ–ª–∏ –ø–µ—Ä–µ–≤–æ–¥: "${customTranslation}"\n\n` +
            'üìù –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):\n\n' +
            'üí° –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–∏–º–µ—Ä –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å —ç—Ç–∏–º —Å–ª–æ–≤–æ–º\n' +
            '‚è≠Ô∏è –ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –≤—ã–±–æ—Ä—É –ø–µ—Ä–µ–≤–æ–¥–æ–≤',
            getExampleInputKeyboard()
        );
    }
    else if (userState?.state === 'waiting_custom_example') {
        if (text === '‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å' || text === '‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ') {
            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–≤–æ–¥ –ø—Ä–∏–º–µ—Ä–∞
            await processCustomTranslationWithoutExample(chatId, userState);
            return;
        }

        const example = text.trim();
        await processCustomTranslationWithExample(chatId, userState, example);
    }
    else if (userState?.state === 'waiting_manual_translation') {
        const translation = text.trim();
        if (!translation) {
            await showMainMenu(chatId, '‚ùå –ü–µ—Ä–µ–≤–æ–¥ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥:');
            return;
        }
        await saveWordWithMeanings(chatId, userState, [translation]);
    }
    else if (userState?.state === 'waiting_custom_translation_with_selected') {
        const customTranslation = text.trim();
        if (!customTranslation) {
            await showMainMenu(chatId, '‚ùå –ü–µ—Ä–µ–≤–æ–¥ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥:');
            return;
        }

        // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        const selectedTranslations = userState.selectedTranslationIndices
            .map(index => userState.tempTranslations[index]);

        // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º —Ä—É—á–Ω–æ–π –ø–µ—Ä–µ–≤–æ–¥ –∫ –≤—ã–±—Ä–∞–Ω–Ω—ã–º
        const allTranslations = [...selectedTranslations, customTranslation];
        console.log(`üìù –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã: –≤—ã–±—Ä–∞–Ω–Ω—ã–µ = ${selectedTranslations.join(', ')}, —Ä—É—á–Ω–æ–π = ${customTranslation}, –≤—Å–µ = ${allTranslations.join(', ')}`);
        
        await saveWordWithMeanings(chatId, userState, allTranslations);
    }
    else {
        await showMainMenu(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:');
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ inline –∫–Ω–æ–ø–æ–∫
bot.on('callback_query', async (callbackQuery) => {
    const chatId = callbackQuery.message.chat.id;
    const data = callbackQuery.data;
    const userState = userStates.get(chatId);

    await bot.answerCallbackQuery(callbackQuery.id);

    if (data.startsWith('audio_')) {
        const audioId = data.replace('audio_', '');
        const audioUrl = userState?.tempAudioUrl;
        const englishWord = userState?.tempWord;

        if (audioUrl && englishWord) {
            try {
                await bot.editMessageReplyMarkup(
                    { inline_keyboard: [] },
                    { chat_id: chatId, message_id: callbackQuery.message.message_id }
                );
                await bot.sendAudio(chatId, audioUrl, {
                    caption: `üîä –ë—Ä–∏—Ç–∞–Ω—Å–∫–æ–µ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ: ${englishWord}`
                });
                await bot.sendMessage(chatId, 'üéµ –í—ã –ø—Ä–æ—Å–ª—É—à–∞–ª–∏ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ. –•–æ—Ç–∏—Ç–µ –≤—ã–±—Ä–∞—Ç—å –ø–µ—Ä–µ–≤–æ–¥?', getAfterAudioKeyboard());
            } catch (error) {
                console.error('Error sending audio:', error);
                await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏ –∞—É–¥–∏–æ.');
            }
        } else {
            await bot.sendMessage(chatId, '‚ùå –ê—É–¥–∏–æ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è —ç—Ç–æ–≥–æ —Å–ª–æ–≤–∞.');
        }
    }
    else if (data === 'enter_translation') {
        if (userState?.state === 'showing_transcription') {
            try {
                await bot.editMessageReplyMarkup(
                    { inline_keyboard: [] },
                    { chat_id: chatId, message_id: callbackQuery.message.message_id }
                );

                // ‚úÖ –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø–µ—Ä–µ–≤–æ–¥—ã –æ—Ç Cambridge
                if (userState.tempTranslations && userState.tempTranslations.length > 0) {
                    userStates.set(chatId, {
                        ...userState,
                        state: 'choosing_translation',
                        selectedTranslationIndices: []
                    });

                    let translationMessage = 'üéØ **–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥—ã –∏–∑ Cambridge Dictionary:**\n\n' +
                        `üá¨üáß ${userState.tempWord}`;
                    if (userState.tempTranscription) {
                        translationMessage += `\nüî§ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è: ${userState.tempTranscription}`;
                    }
                    translationMessage += '\n\nüí° –ù–∞–∂–º–∏—Ç–µ "üîç –ü–æ–¥—Ä–æ–±–Ω–µ–µ" —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏ –ø—Ä–∏–º–µ—Ä—ã';

                    await bot.sendMessage(chatId, translationMessage,
                        getTranslationSelectionKeyboard(userState.tempTranslations, userState.meanings, [])
                    );
                } else {
                    // ‚úÖ –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ï—Å–ª–∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –Ω–µ—Ç, —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é —Å–≤–æ–µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞
                    userStates.set(chatId, {
                        ...userState,
                        state: 'waiting_custom_translation'
                    });

                    let translationMessage = '‚úèÔ∏è Cambridge Dictionary –Ω–µ –Ω–∞—à–µ–ª –ø–µ—Ä–µ–≤–æ–¥–æ–≤\n\n' +
                        '–î–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–π –ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è —Å–ª–æ–≤–∞:\n\n' +
                        `üá¨üáß ${userState.tempWord}`;
                    if (userState.tempTranscription) {
                        translationMessage += `\nüî§ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è: ${userState.tempTranscription}`;
                    }
                    translationMessage += '\n\nüí° –ü–æ—Å–ª–µ –≤–≤–æ–¥–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –≤—ã —Å–º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è';

                    await showMainMenu(chatId, translationMessage);
                }
            } catch (error) {
                console.error('Error in enter_translation:', error);
                await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞');
            }
        }
    }
    else if (data.startsWith('toggle_translation_')) {
        const translationIndex = parseInt(data.replace('toggle_translation_', ''));
        if (userState?.state === 'choosing_translation' && userState.tempTranslations[translationIndex]) {
            try {
                let selectedIndices = [...(userState.selectedTranslationIndices || [])];
                if (selectedIndices.includes(translationIndex)) {
                    selectedIndices = selectedIndices.filter(idx => idx !== translationIndex);
                } else {
                    selectedIndices.push(translationIndex);
                }

                userStates.set(chatId, {
                    ...userState,
                    selectedTranslationIndices: selectedIndices
                });

                await bot.editMessageReplyMarkup(
                    getTranslationSelectionKeyboard(userState.tempTranslations, userState.meanings, selectedIndices).reply_markup,
                    { chat_id: chatId, message_id: callbackQuery.message.message_id }
                );
            } catch (error) {
                console.error('Error toggling translation:', error);
            }
        }
    }
    else if (data.startsWith('details_')) {
        const translationIndex = parseInt(data.replace('details_', ''));
        if (userState?.state === 'choosing_translation' && userState.tempTranslations[translationIndex]) {
            try {
                const translation = userState.tempTranslations[translationIndex];
                const meaning = userState.meanings.find(m => m.translation === translation);

                if (meaning) {
                    let detailsMessage = `üîç **–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ–≤–æ–¥–∞:**\n\n`;
                    detailsMessage += `üá¨üáß **–°–ª–æ–≤–æ:** ${userState.tempWord}\n`;
                    detailsMessage += `üá∑üá∫ **–ü–µ—Ä–µ–≤–æ–¥:** ${translation}\n\n`;

                    if (meaning.englishDefinition) {
                        detailsMessage += `üìñ **–ê–Ω–≥–ª–∏–π—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ:**\n${meaning.englishDefinition}\n\n`;
                    }

                    if (meaning.examples && meaning.examples.length > 0) {
                        detailsMessage += `üìù **–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:**\n`;
                        meaning.examples.forEach((example, index) => {
                            if (index < 3) { // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 3 –ø—Ä–∏–º–µ—Ä–∞
                                detailsMessage += `\n${index + 1}. ${example.english}`;
                                if (example.russian) {
                                    detailsMessage += `\n   ${example.russian}`;
                                }
                            }
                        });
                    }

                    await bot.sendMessage(chatId, detailsMessage, {
                        reply_markup: {
                            inline_keyboard: [
                                [{ text: 'üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –ø–µ—Ä–µ–≤–æ–¥–æ–≤', callback_data: 'back_to_translations' }]
                            ]
                        }
                    });
                } else {
                    await bot.sendMessage(chatId, '‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–µ—Ä–µ–≤–æ–¥–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
                }
            } catch (error) {
                console.error('Error showing details:', error);
                await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π');
            }
        }
    }
    else if (data === 'back_to_translations') {
        if (userState?.state === 'choosing_translation') {
            try {
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –ø–µ—Ä–µ–≤–æ–¥–æ–≤
                let translationMessage = 'üéØ **–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥—ã –∏–∑ Cambridge Dictionary:**\n\n' +
                    `üá¨üáß ${userState.tempWord}`;
                if (userState.tempTranscription) {
                    translationMessage += `\nüî§ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è: ${userState.tempTranscription}`;
                }
                translationMessage += '\n\nüí° –ù–∞–∂–º–∏—Ç–µ "üîç –ü–æ–¥—Ä–æ–±–Ω–µ–µ" —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏ –ø—Ä–∏–º–µ—Ä—ã';

                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –ø–µ—Ä–µ–≤–æ–¥–æ–≤
                await bot.sendMessage(chatId, translationMessage,
                    getTranslationSelectionKeyboard(userState.tempTranslations, userState.meanings, userState.selectedTranslationIndices)
                );

                // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏ (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ)
                try {
                    await bot.deleteMessage(chatId, callbackQuery.message.message_id);
                } catch (deleteError) {
                    console.log('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...');
                }
            } catch (error) {
                console.error('Error going back:', error);
            }
        }
    }
    else if (data === 'save_selected_translations') {
        if (userState?.state === 'choosing_translation' && userState.selectedTranslationIndices.length > 0) {
            try {
                const selectedTranslations = userState.selectedTranslationIndices
                    .map(index => userState.tempTranslations[index]);

                // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                await saveWordWithMeanings(chatId, userState, selectedTranslations);
                await bot.deleteMessage(chatId, callbackQuery.message.message_id);
            } catch (error) {
                console.error('Error saving translations:', error);
                await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–ª–æ–≤–∞');
            }
        }
    }
    else if (data === 'custom_translation') {
        if (userState?.state === 'choosing_translation') {
            try {
                // –ò–ó–ú–ï–ù–ï–ù–û: –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –ø–µ—Ä–µ–≤–æ–¥–∞
                userStates.set(chatId, {
                    ...userState,
                    state: 'waiting_custom_translation'
                });

                let translationMessage = '‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –ø–µ—Ä–µ–≤–æ–¥–∞:\n\n' +
                    `üá¨üáß ${userState.tempWord}`;
                if (userState.tempTranscription) {
                    translationMessage += `\nüî§ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è: ${userState.tempTranscription}`;
                }
                translationMessage += '\n\nüí° –ü–æ—Å–ª–µ –≤–≤–æ–¥–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –≤—ã —Å–º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è';

                await bot.deleteMessage(chatId, callbackQuery.message.message_id);
                await showMainMenu(chatId, translationMessage);
            } catch (error) {
                console.error('Error in custom_translation:', error);
                await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞');
            }
        }
    }
    else if (data === 'cancel_translation') {
        if (userState) {
            try {
                await bot.editMessageReplyMarkup(
                    { inline_keyboard: [] },
                    { chat_id: chatId, message_id: callbackQuery.message.message_id }
                );

                userStates.set(chatId, {
                    ...userState,
                    state: 'showing_transcription'
                });

                let message = `üìù –°–ª–æ–≤–æ: ${userState.tempWord}`;
                if (userState.tempTranscription) {
                    message += `\nüî§ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è: ${userState.tempTranscription}`;
                }
                message += '\n\nüéµ –î–æ—Å—Ç—É–ø–Ω–æ –∞—É–¥–∏–æ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:';

                await bot.sendMessage(chatId, message, getListeningKeyboard(userState.tempAudioId));
                await showMainMenu(chatId);
            } catch (error) {
                console.error('Error canceling translation:', error);
                await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ');
            }
        }
    }
    // ‚úÖ –ù–û–í–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –ü–û–í–¢–û–†–ï–ù–ò–Ø
    else if (data === 'show_answer') {
        await showReviewAnswer(chatId);
    }
    else if (data.startsWith('review_')) {
        const rating = data.replace('review_', '');
        await processReviewRating(chatId, rating);
    }
    else if (data === 'skip_review') {
        if (userState?.state === 'review_session') {
            userState.currentReviewIndex++;
            await showNextReviewWord(chatId);
        }
    }
    else if (data === 'end_review') {
        if (userState?.state === 'review_session') {
            await completeReviewSession(chatId, userState);
        }
    }
    // ‚úÖ –ù–û–í–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –ò–ó–£–ß–ï–ù–ò–Ø –ù–û–í–´–• –°–õ–û–í
    else if (data === 'learned_word') {
        await processNewWordLearning(chatId, 'learned');
    }
    else if (data === 'need_repeat_word') {
        await processNewWordLearning(chatId, 'repeat');
    }
else if (data === 'skip_new_word') {
    const userState = userStates.get(chatId);
    if (userState?.state === 'learning_new_words') {
        // ‚úÖ –ü–ï–†–ï–ú–ï–©–ê–ï–ú —Ç–µ–∫—É—â–µ–µ —Å–ª–æ–≤–æ –≤ –∫–æ–Ω–µ—Ü –º–∞—Å—Å–∏–≤–∞ –ø—Ä–∏ –ø—Ä–æ–ø—É—Å–∫–µ
        const skippedWord = userState.newWords.splice(userState.currentWordIndex, 1)[0];
        userState.newWords.push(skippedWord);
        await showNextNewWord(chatId);
    }
}
else if (data === 'end_learning') {
    const userState = userStates.get(chatId);
    if (userState?.state === 'learning_new_words') {
        await completeNewWordsSession(chatId, userState);
    }
}
    // ‚úÖ –ù–û–í–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –ù–û–¢–ò–§–ò–ö–ê–¶–ò–ô
    else if (data === 'start_review_from_notification') {
        await bot.deleteMessage(chatId, callbackQuery.message.message_id);
        await startReviewSession(chatId);
    }
    else if (data === 'snooze_notification') {
        await bot.editMessageText(
            '‚è∞ –•–æ—Ä–æ—à–æ, –Ω–∞–ø–æ–º–Ω—é —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞!',
            {
                chat_id: chatId,
                message_id: callbackQuery.message.message_id
            }
        );
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –Ω–∞ 2 —á–∞—Å–∞
        setTimeout(async () => {
            await sendReviewNotification(chatId);
        }, 2 * 60 * 60 * 1000);
    }
    // ‚úÖ –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –ö–û–ú–ê–ù–î–´ /NEW
    else if (data === 'start_learning_from_command') {
        await bot.deleteMessage(chatId, callbackQuery.message.message_id);
        await startNewWordsSession(chatId);
    }
    else if (data === 'show_new_stats_only') {
        const count = await getUnlearnedNewWords(chatId).then(words => words.length);
        await bot.editMessageText(
            `üÜï –ù–æ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è: ${count}\n\n` +
            'üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "üÜï –ù–æ–≤—ã–µ —Å–ª–æ–≤–∞" –≤ –º–µ–Ω—é —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–∑—É—á–µ–Ω–∏–µ',
            {
                chat_id: chatId,
                message_id: callbackQuery.message.message_id
            }
        );
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.on('error', (error) => {
    console.error('Bot error:', error);
});

bot.on('polling_error', (error) => {
    console.error('Polling error:', error);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π
process.on('unhandledRejection', (reason, promise) => {
    console.error('‚ùå Unhandled Rejection at:', promise, 'reason:', reason);
});

process.on('uncaughtException', (error) => {
    console.error('‚ùå Uncaught Exception:', error);
});

// –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞
setTimeout(() => {
    startDailyNotifications();
}, 5000);

console.log('ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω: –í–µ—Ä—Å–∏—è —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π –∏–∑—É—á–µ–Ω–∏—è —Å–ª–æ–≤!');


