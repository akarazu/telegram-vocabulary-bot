import TelegramBot from 'node-telegram-bot-api';
import { GoogleSheetsService } from './services/google-sheets.js';
import { YandexDictionaryService } from './services/yandex-dictionary-service.js';
import { CambridgeDictionaryService } from './services/cambridge-dictionary-service.js';

const bot = new TelegramBot(process.env.BOT_TOKEN, { 
    polling: true 
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
let sheetsService, yandexService, cambridgeService;

try {
    sheetsService = new GoogleSheetsService();
    yandexService = new YandexDictionaryService();
    cambridgeService = new CambridgeDictionaryService();
    console.log('‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
} catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤:', error);
    // –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫–∏ —á—Ç–æ–±—ã –±–æ—Ç –Ω–µ –ø–∞–¥–∞–ª
    sheetsService = { initialized: false };
    yandexService = { getTranscriptionAndAudio: () => ({ transcription: '', audioUrl: '' }) };
    cambridgeService = { getWordData: () => ({ meanings: [] }) };
}

// –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const userStates = new Map();

// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
function getMainMenu() {
    return {
        reply_markup: {
            keyboard: [
                ['‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ']
            ],
            resize_keyboard: true
        }
    };
}

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è
function getListeningKeyboard(audioId) {
    return {
        reply_markup: {
            inline_keyboard: [
                [{ text: 'üîä –ü—Ä–æ—Å–ª—É—à–∞—Ç—å –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ', callback_data: `audio_${audioId}` }],
                [{ text: '‚û°Ô∏è –í—ã–±—Ä–∞—Ç—å –ø–µ—Ä–µ–≤–æ–¥', callback_data: 'enter_translation' }]
            ]
        }
    };
}

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ—Å–ª–µ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è
function getAfterAudioKeyboard() {
    return {
        reply_markup: {
            inline_keyboard: [
                [{ text: '‚úèÔ∏è –í—ã–±—Ä–∞—Ç—å –ø–µ—Ä–µ–≤–æ–¥', callback_data: 'enter_translation' }]
            ]
        }
    };
}

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–≤–æ–¥–∞ –ø—Ä–∏–º–µ—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"
function getExampleInputKeyboard() {
    return {
        reply_markup: {
            keyboard: [
                ['‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'],
                ['‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ']
            ],
            resize_keyboard: true
        }
    };
}

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ —Å –∫–Ω–æ–ø–∫–æ–π "–ü–æ–¥—Ä–æ–±–Ω–µ–µ" –¥–ª—è –≤—Å–µ—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤
function getTranslationSelectionKeyboard(translations, meanings, selectedIndices = []) {
    const translationButtons = [];

    translations.forEach((translation, index) => {
        const isSelected = selectedIndices.includes(index);
        
        let numberEmoji;
        if (index < 9) {
            numberEmoji = `${index + 1}Ô∏è‚É£`;
        } else {
            const number = index + 1;
            const digits = number.toString().split('');
            numberEmoji = digits.map(digit => {
                const digitEmojis = ['0Ô∏è‚É£', '1Ô∏è‚É£', '2Ô∏è‚É£', '3Ô∏è‚É£', '4Ô∏è‚É£', '5Ô∏è‚É£', '6Ô∏è‚É£', '7Ô∏è‚É£', '8Ô∏è‚É£', '9Ô∏è‚É£'];
                return digitEmojis[parseInt(digit)];
            }).join('');
        }
        
        const emoji = isSelected ? '‚úÖ' : numberEmoji;
        
        // –ù–∞—Ö–æ–¥–∏–º –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞
        const meaningForTranslation = meanings.find(meaning => meaning.translation === translation);
        const englishDefinition = meaningForTranslation?.englishDefinition || '';
        
        // –û—Å–Ω–æ–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞ —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º
        const mainButtonText = `${emoji} ${translation}`;
        
        // –í—Å–µ–≥–¥–∞ —Å–æ–∑–¥–∞–µ–º –¥–≤–µ –∫–Ω–æ–ø–∫–∏: –æ—Å–Ω–æ–≤–Ω—É—é –∏ "–ü–æ–¥—Ä–æ–±–Ω–µ–µ"
        const row = [
            { 
                text: mainButtonText, 
                callback_data: `toggle_translation_${index}` 
            },
            { 
                text: 'üîç –ü–æ–¥—Ä–æ–±–Ω–µ–µ', 
                callback_data: `details_${index}` 
            }
        ];
        
        translationButtons.push(row);
    });

    const actionButtons = [];
    
    if (selectedIndices.length > 0) {
        actionButtons.push([
            { 
                text: `üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å (${selectedIndices.length})`, 
                callback_data: 'save_selected_translations' 
            }
        ]);
    }
    
    actionButtons.push([
        { text: '‚úèÔ∏è –î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–π –ø–µ—Ä–µ–≤–æ–¥', callback_data: 'custom_translation' },
        { text: 'üîô –û—Ç–º–µ–Ω–∏—Ç—å', callback_data: 'cancel_translation' }
    ]);

    return {
        reply_markup: {
            inline_keyboard: [
                ...translationButtons,
                ...actionButtons
            ]
        }
    };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é
async function showMainMenu(chatId, text = '') {
    try {
        if (text && text.trim() !== '') {
            return await bot.sendMessage(chatId, text, getMainMenu());
        } else {
            return await bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', getMainMenu());
        }
    } catch (error) {
        console.error('‚ùå Error showing main menu:', error);
        // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –µ—Å–ª–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
        try {
            await bot.sendMessage(chatId, text || '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:');
        } catch (e) {
            console.error('‚ùå Critical error sending message:', e);
        }
    }
}

// ‚úÖ –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å JSON —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
async function saveWordWithMeanings(chatId, userState, selectedTranslations) {
    console.log(`üíæ Saving word with meanings:`, {
        word: userState.tempWord,
        selectedTranslations: selectedTranslations
    });
    
    let success = true;
    
    if (sheetsService.initialized) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã - —Ç–µ–ø–µ—Ä—å –ø–æ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º—É —Å–ª–æ–≤—É
        try {
            const existingWords = await sheetsService.getUserWords(chatId);
            const isDuplicate = existingWords.some(word => 
                word.english.toLowerCase() === userState.tempWord.toLowerCase()
            );
            
            if (isDuplicate) {
                await showMainMenu(chatId, 
                    `‚ùå –°–ª–æ–≤–æ "${userState.tempWord}" —É–∂–µ –µ—Å—Ç—å –≤ –≤–∞—à–µ–º —Å–ª–æ–≤–∞—Ä–µ!\n\n` +
                    '–ö–∞–∂–¥–æ–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–æ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑.'
                );
                userStates.delete(chatId);
                return;
            }
        } catch (error) {
            console.error('‚ùå Error checking duplicates:', error);
            // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–∂–µ –µ—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –Ω–µ —É–¥–∞–ª–∞—Å—å
        }
        
        // ‚úÖ –°–û–ó–î–ê–ï–ú –ú–ê–°–°–ò–í –ó–ù–ê–ß–ï–ù–ò–ô –î–õ–Ø JSON
        const meaningsData = [];
        
        selectedTranslations.forEach(translation => {
            // –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ Cambridge Dictionary
            const cambridgeMeanings = userState.meanings.filter(
                meaning => meaning.translation === translation
            );
            
            // –î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤ —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            if (cambridgeMeanings.length === 0) {
                meaningsData.push({
                    translation: translation,
                    example: '', // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∂–µ
                    partOfSpeech: '',
                    definition: ''
                });
            } else {
                // –î–ª—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –∏–∑ Cambridge –¥–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
                cambridgeMeanings.forEach(meaning => {
                    meaningsData.push({
                        translation: translation,
                        example: meaning.examples && meaning.examples.length > 0 
                            ? meaning.examples[0].english 
                            : '',
                        partOfSpeech: meaning.partOfSpeech || '',
                        definition: meaning.englishDefinition || ''
                    });
                });
            }
        });
        
        console.log(`üìù Meanings data for JSON:`, meaningsData);
        
        // ‚úÖ –°–û–•–†–ê–ù–Ø–ï–ú –í –ù–û–í–û–ú –§–û–†–ú–ê–¢–ï
        success = await sheetsService.addWordWithMeanings(
            chatId, 
            userState.tempWord, 
            userState.tempTranscription,
            userState.tempAudioUrl,
            meaningsData  // –ü–µ—Ä–µ–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –∑–Ω–∞—á–µ–Ω–∏–π
        );
    }
    
    // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    userStates.delete(chatId);
    
    if (success) {
        const transcriptionText = userState.tempTranscription ? ` [${userState.tempTranscription}]` : '';
        
        let successMessage = '‚úÖ –°–ª–æ–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–ª–æ–≤–∞—Ä—å!\n\n' +
            `üí¨ **${userState.tempWord}**${transcriptionText}\n\n` +
            '**–î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:**\n';
        
        selectedTranslations.forEach((translation, index) => {
            successMessage += `\n${index + 1}. ${translation}`;
        });
        
        successMessage += '\n\nüìö –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–≤—Ç–æ—Ä—è—Ç—å —Å–ª–æ–≤–æ —Ü–µ–ª–∏–∫–æ–º —Å —Ä–∞–∑–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏!';
        
        await showMainMenu(chatId, successMessage);
    } else {
        await showMainMenu(chatId, 
            '‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è\n\n–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–ª–æ–≤–æ –≤ —Å–ª–æ–≤–∞—Ä—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.'
        );
    }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞ –±–µ–∑ –ø—Ä–∏–º–µ—Ä–∞
async function processCustomTranslationWithoutExample(chatId, userState) {
    const newTranslations = [userState.customTranslation, ...userState.tempTranslations];
    
    const newMeaning = {
        translation: userState.customTranslation,
        englishDefinition: '',
        examples: []
    };
    
    const newMeanings = [newMeaning, ...userState.meanings];
    
    userStates.set(chatId, {
        ...userState,
        state: 'choosing_translation',
        tempTranslations: newTranslations,
        meanings: newMeanings,
        selectedTranslationIndices: [0]
    });
    
    const successMessage = `‚úÖ –í–∞—à –ø–µ—Ä–µ–≤–æ–¥ "${userState.customTranslation}" –¥–æ–±–∞–≤–ª–µ–Ω!\n\n` +
                          `üéØ –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥—ã –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å:\n` +
                          `‚úÖ –í–∞—à –ø–µ—Ä–µ–≤–æ–¥ –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã–π`;
    
    await bot.sendMessage(chatId, successMessage, 
        getTranslationSelectionKeyboard(newTranslations, newMeanings, [0])
    );
    
    await showMainMenu(chatId);
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞ —Å –ø—Ä–∏–º–µ—Ä–æ–º
async function processCustomTranslationWithExample(chatId, userState, example) {
    const newTranslations = [userState.customTranslation, ...userState.tempTranslations];
    
    const newMeaning = {
        translation: userState.customTranslation,
        englishDefinition: '',
        examples: example ? [{ english: example, russian: '' }] : []
    };
    
    const newMeanings = [newMeaning, ...userState.meanings];
    
    userStates.set(chatId, {
        ...userState,
        state: 'choosing_translation',
        tempTranslations: newTranslations,
        meanings: newMeanings,
        selectedTranslationIndices: [0]
    });
    
    let successMessage = `‚úÖ –í–∞—à –ø–µ—Ä–µ–≤–æ–¥ "${userState.customTranslation}" –¥–æ–±–∞–≤–ª–µ–Ω!\n\n`;
    
    if (example) {
        successMessage += `üìù –ü—Ä–∏–º–µ—Ä: ${example}\n\n`;
    }
    
    successMessage += `üéØ –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥—ã –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å:\n` +
                     `‚úÖ –í–∞—à –ø–µ—Ä–µ–≤–æ–¥ –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã–π`;
    
    await bot.sendMessage(chatId, successMessage, 
        getTranslationSelectionKeyboard(newTranslations, newMeanings, [0])
    );
    
    await showMainMenu(chatId);
}

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.onText(/\/start/, async (msg) => {
    const chatId = msg.chat.id;
    await showMainMenu(chatId, 
        'üìö –ê–Ω–≥–ª–æ-—Ä—É—Å—Å–∫–∏–π —Å–ª–æ–≤–∞—Ä—å\n' +
        'üî§ –° —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–µ–π –∏ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ–º\n' +
        'üá¨üáß –ë—Ä–∏—Ç–∞–Ω—Å–∫–∏–π –≤–∞—Ä–∏–∞–Ω—Ç\n' +
        'üìù –ö–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ —Ö—Ä–∞–Ω–∏—Ç—Å—è —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏\n' +
        'üîÑ –ò–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–æ–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ —Å–ª–æ–≤ —Ü–µ–ª–∏–∫–æ–º'
    );
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
bot.onText(/\/reset/, async (msg) => {
    const chatId = msg.chat.id;
    userStates.delete(chatId);
    await bot.sendMessage(chatId, '‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.');
    await showMainMenu(chatId);
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
bot.onText(/\/state/, async (msg) => {
    const chatId = msg.chat.id;
    const userState = userStates.get(chatId);
    await bot.sendMessage(chatId, `üìä –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: ${userState ? userState.state : '–Ω–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è'}`);
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
bot.onText(/\/migrate/, async (msg) => {
    const chatId = msg.chat.id;
    
    if (sheetsService.initialized) {
        await bot.sendMessage(chatId, 'üîÑ –ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç...');
        
        const success = await sheetsService.migrateOldDataToNewFormat(chatId);
        
        if (success) {
            await bot.sendMessage(chatId, '‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—Å–µ —Å–ª–æ–≤–∞ –≤ –Ω–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.');
        } else {
            await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö.');
        }
    } else {
        await bot.sendMessage(chatId, '‚ùå Google Sheets –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.');
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    const text = msg.text;

    if (!text || text.startsWith('/')) {
        return;
    }

    const userState = userStates.get(chatId);

    if (text === '‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ') {
        userStates.set(chatId, { state: 'waiting_english' });
        await showMainMenu(chatId, 'üá¨üáß –í–≤–µ–¥–∏—Ç–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ:');
    }
    else if (userState?.state === 'waiting_english') {
        const englishWord = text.trim().toLowerCase();
        
        console.log(`üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª–æ–≤–∞: "${englishWord}"`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–æ–≤
        if (!cambridgeService || !yandexService) {
            console.error('‚ùå –°–µ—Ä–≤–∏—Å—ã –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
            await showMainMenu(chatId, 
                '‚ùå –°–µ—Ä–≤–∏—Å—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
            );
            userStates.delete(chatId);
            return;
        }
        
        // –ë–æ–ª–µ–µ –≥–∏–±–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ
        if (!/^[a-zA-Z\s\-'\.]+$/.test(englishWord)) {
            await showMainMenu(chatId, 
                '‚ùå –≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ.\n' +
                '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º:'
            );
            return;
        }
        
        // –í—Ä–µ–º–µ–Ω–Ω–æ —É–±–∏—Ä–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        // if (sheetsService.initialized) {
        //     try {
        //         const existingWords = await sheetsService.getUserWords(chatId);
        //         const isDuplicate = existingWords.some(word => 
        //             word.english.toLowerCase() === englishWord.toLowerCase()
        //         );
        //         
        //         if (isDuplicate) {
        //             await showMainMenu(chatId, 
        //                 `‚ùå –°–ª–æ–≤–æ "${englishWord}" —É–∂–µ –µ—Å—Ç—å –≤ –≤–∞—à–µ–º —Å–ª–æ–≤–∞—Ä–µ!\n\n` +
        //                 '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ —Å–ª–æ–≤–æ:'
        //             );
        //             return;
        //         }
        //     } catch (error) {
        //         console.error('Error checking duplicates:', error);
        //     }
        // }
        
        await showMainMenu(chatId, 'üîç –ò—â—É –ø–µ—Ä–µ–≤–æ–¥, —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é, –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ –∏ –ø—Ä–∏–º–µ—Ä—ã...');
        
        try {
            console.log(`üéØ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ –¥–ª—è: "${englishWord}"`);
            
            let audioId = null;
            let transcription = '';
            let audioUrl = '';
            let meanings = [];
            let translations = [];

            // ‚úÖ 1. –ü–û–õ–£–ß–ê–ï–ú –ü–ï–†–ï–í–û–î–´ –ò–ó CAMBRIDGE
            console.log(`üìö –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º Cambridge Dictionary...`);
            const cambridgeData = await cambridgeService.getWordData(englishWord);
            
            if (cambridgeData.meanings && cambridgeData.meanings.length > 0) {
                console.log(`‚úÖ Cambridge —É—Å–ø–µ—à–Ω–æ: ${cambridgeData.meanings.length} –∑–Ω–∞—á–µ–Ω–∏–π`);
                meanings = cambridgeData.meanings;
                translations = meanings.map(m => m.translation).filter((t, i, arr) => arr.indexOf(t) === i);
                
                // –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                console.log(`üìù –ù–∞–π–¥–µ–Ω—ã –ø–µ—Ä–µ–≤–æ–¥—ã:`, translations);
            } else {
                console.log(`‚ùå Cambridge –Ω–µ –≤–µ—Ä–Ω—É–ª –ø–µ—Ä–µ–≤–æ–¥—ã`);
                // –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ —Ä—É—á–Ω–æ–º—É –≤–≤–æ–¥—É
                meanings = [];
                translations = [];
            }

            // ‚úÖ 2. –ü–û–õ–£–ß–ê–ï–ú –¢–†–ê–ù–°–ö–†–ò–ü–¶–ò–Æ –ò –ê–£–î–ò–û –û–¢ –Ø–ù–î–ï–ö–°–ê
            console.log(`üî§ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —É –Ø–Ω–¥–µ–∫—Å...`);
            try {
                const yandexData = await yandexService.getTranscriptionAndAudio(englishWord);
                transcription = yandexData.transcription || '';
                audioUrl = yandexData.audioUrl || '';
                
                if (audioUrl) {
                    audioId = Date.now().toString();
                }
                console.log(`‚úÖ –Ø–Ω–¥–µ–∫—Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è: ${transcription}`);
            } catch (yandexError) {
                console.log(`‚ùå –Ø–Ω–¥–µ–∫—Å –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: ${yandexError.message}`);
                // Fallback –¥–ª—è –∞—É–¥–∏–æ
                audioUrl = `https://translate.google.com/translate_tts?ie=UTF-8&q=${encodeURIComponent(englishWord)}&tl=en-gb&client=tw-ob`;
                audioId = Date.now().toString();
            }

            // ‚úÖ 3. –°–û–•–†–ê–ù–Ø–ï–ú –†–ï–ó–£–õ–¨–¢–ê–¢–´
            userStates.set(chatId, {
                state: 'showing_transcription',
                tempWord: englishWord,
                tempTranscription: transcription,
                tempAudioUrl: audioUrl,
                tempAudioId: audioId,
                tempTranslations: translations,
                meanings: meanings,
                selectedTranslationIndices: []
            });
            
            // ‚úÖ 4. –§–û–†–ú–ò–†–£–ï–ú –°–û–û–ë–©–ï–ù–ò–ï –î–õ–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
            let message = `üìù –°–ª–æ–≤–æ: ${englishWord}`;
            
            if (transcription) {
                message += `\nüî§ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è: ${transcription}`;
            } else {
                message += `\n‚ùå –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`;
            }
            
            if (audioUrl) {
                message += `\n\nüéµ –î–æ—Å—Ç—É–ø–Ω–æ –∞—É–¥–∏–æ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ`;
            } else {
                message += `\n\n‚ùå –ê—É–¥–∏–æ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`;
            }

            if (translations.length > 0) {
                message += `\n\nüéØ –ù–∞–π–¥–µ–Ω–æ ${translations.length} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–µ—Ä–µ–≤–æ–¥–∞ –∏–∑ Cambridge Dictionary`;
                
                // ‚úÖ –ü–û–ö–ê–ó–´–í–ê–ï–ú –ù–ê–ô–î–ï–ù–ù–´–ï –ü–†–ò–ú–ï–†–´
                const totalExamples = meanings.reduce((total, meaning) => 
                    total + (meaning.examples ? meaning.examples.length : 0), 0
                );
                if (totalExamples > 0) {
                    message += `\nüìù –ù–∞–π–¥–µ–Ω–æ ${totalExamples} –ø—Ä–∏–º–µ—Ä–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è`;
                }
            } else {
                message += `\n\n‚ùå –ü–µ—Ä–µ–≤–æ–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ Cambridge Dictionary\n‚úèÔ∏è –í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–π –ø–µ—Ä–µ–≤–æ–¥`;
            }
            
            message += `\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
            
            await bot.sendMessage(chatId, message, getListeningKeyboard(audioId));
            await showMainMenu(chatId);
            
        } catch (error) {
            console.error('Error getting word data:', error);
            await showMainMenu(chatId, 
                '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å–ª–æ–≤–∞\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ —Å–ª–æ–≤–æ –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ.'
            );
            // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            userStates.delete(chatId);
        }
    }
    // –ò–ó–ú–ï–ù–ï–ù–û: –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–≤–æ–µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞
    else if (userState?.state === 'waiting_custom_translation') {
        const customTranslation = text.trim();
        
        if (!customTranslation) {
            await showMainMenu(chatId, '‚ùå –ü–µ—Ä–µ–≤–æ–¥ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥:');
            return;
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –ø—Ä–∏–º–µ—Ä–∞
        userStates.set(chatId, {
            ...userState,
            state: 'waiting_custom_example',
            customTranslation: customTranslation
        });
        
        await bot.sendMessage(chatId, 
            `‚úÖ –í—ã –≤–≤–µ–ª–∏ –ø–µ—Ä–µ–≤–æ–¥: "${customTranslation}"\n\n` +
            `üìù –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):\n\n` +
            `üí° –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–∏–º–µ—Ä –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å —ç—Ç–∏–º —Å–ª–æ–≤–æ–º\n` +
            `‚è≠Ô∏è –ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –≤—ã–±–æ—Ä—É –ø–µ—Ä–µ–≤–æ–¥–æ–≤`,
            getExampleInputKeyboard()
        );
    }
    else if (userState?.state === 'waiting_custom_example') {
        if (text === '‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å' || text === '‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ') {
            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–≤–æ–¥ –ø—Ä–∏–º–µ—Ä–∞
            await processCustomTranslationWithoutExample(chatId, userState);
            return;
        }
        
        const example = text.trim();
        await processCustomTranslationWithExample(chatId, userState, example);
    }
    else if (userState?.state === 'waiting_manual_translation') {
        const translation = text.trim();
        
        if (!translation) {
            await showMainMenu(chatId, '‚ùå –ü–µ—Ä–µ–≤–æ–¥ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥:');
            return;
        }
        
        await saveWordWithMeanings(chatId, userState, [translation]);
    }
    else if (userState?.state === 'waiting_custom_translation_with_selected') {
        const customTranslation = text.trim();
        
        if (!customTranslation) {
            await showMainMenu(chatId, '‚ùå –ü–µ—Ä–µ–≤–æ–¥ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥:');
            return;
        }
        
        // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        const selectedTranslations = userState.selectedTranslationIndices
            .map(index => userState.tempTranslations[index]);
        
        // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º —Ä—É—á–Ω–æ–π –ø–µ—Ä–µ–≤–æ–¥ –∫ –≤—ã–±—Ä–∞–Ω–Ω—ã–º
        const allTranslations = [...selectedTranslations, customTranslation];
        
        console.log(`üìù –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã: –≤—ã–±—Ä–∞–Ω–Ω—ã–µ = ${selectedTranslations.join(', ')}, —Ä—É—á–Ω–æ–π = ${customTranslation}, –≤—Å–µ = ${allTranslations.join(', ')}`);
        
        await saveWordWithMeanings(chatId, userState, allTranslations);
    }
    else {
        await showMainMenu(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:');
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ inline –∫–Ω–æ–ø–æ–∫
bot.on('callback_query', async (callbackQuery) => {
    const chatId = callbackQuery.message.chat.id;
    const data = callbackQuery.data;
    const userState = userStates.get(chatId);

    await bot.answerCallbackQuery(callbackQuery.id);

    if (data.startsWith('audio_')) {
        const audioId = data.replace('audio_', '');
        const audioUrl = userState?.tempAudioUrl;
        const englishWord = userState?.tempWord;
        
        if (audioUrl && englishWord) {
            try {
                await bot.editMessageReplyMarkup(
                    { inline_keyboard: [] },
                    { chat_id: chatId, message_id: callbackQuery.message.message_id }
                );

                await bot.sendAudio(chatId, audioUrl, {
                    caption: `üîä –ë—Ä–∏—Ç–∞–Ω—Å–∫–æ–µ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ: ${englishWord}`
                });
                
                await bot.sendMessage(chatId, 
                    'üéµ –í—ã –ø—Ä–æ—Å–ª—É—à–∞–ª–∏ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ. –•–æ—Ç–∏—Ç–µ –≤—ã–±—Ä–∞—Ç—å –ø–µ—Ä–µ–≤–æ–¥?',
                    getAfterAudioKeyboard()
                );
                
            } catch (error) {
                console.error('Error sending audio:', error);
                await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏ –∞—É–¥–∏–æ.');
            }
        } else {
            await bot.sendMessage(chatId, '‚ùå –ê—É–¥–∏–æ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è —ç—Ç–æ–≥–æ —Å–ª–æ–≤–∞.');
        }
    }
    else if (data === 'enter_translation') {
        if (userState?.state === 'showing_transcription') {
            try {
                await bot.editMessageReplyMarkup(
                    { inline_keyboard: [] },
                    { chat_id: chatId, message_id: callbackQuery.message.message_id }
                );

                // ‚úÖ –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø–µ—Ä–µ–≤–æ–¥—ã –æ—Ç Cambridge
                if (userState.tempTranslations && userState.tempTranslations.length > 0) {
                    userStates.set(chatId, {
                        ...userState,
                        state: 'choosing_translation',
                        selectedTranslationIndices: []
                    });

                    let translationMessage = 'üéØ **–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥—ã –∏–∑ Cambridge Dictionary:**\n\n' +
                        `üá¨üáß ${userState.tempWord}`;
                    
                    if (userState.tempTranscription) {
                        translationMessage += `\nüî§ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è: ${userState.tempTranscription}`;
                    }

                    translationMessage += '\n\nüí° –ù–∞–∂–º–∏—Ç–µ "üîç –ü–æ–¥—Ä–æ–±–Ω–µ–µ" —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏ –ø—Ä–∏–º–µ—Ä—ã';

                    await bot.sendMessage(chatId, translationMessage, 
                        getTranslationSelectionKeyboard(userState.tempTranslations, userState.meanings, [])
                    );
                    
                } else {
                    // ‚úÖ –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ï—Å–ª–∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –Ω–µ—Ç, —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é —Å–≤–æ–µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞
                    userStates.set(chatId, {
                        ...userState,
                        state: 'waiting_custom_translation'
                    });
                    
                    let translationMessage = '‚úèÔ∏è Cambridge Dictionary –Ω–µ –Ω–∞—à–µ–ª –ø–µ—Ä–µ–≤–æ–¥–æ–≤\n\n' +
                        '–î–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–π –ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è —Å–ª–æ–≤–∞:\n\n' +
                        `üá¨üáß ${userState.tempWord}`;
                    
                    if (userState.tempTranscription) {
                        translationMessage += `\nüî§ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è: ${userState.tempTranscription}`;
                    }
                    
                    translationMessage += '\n\nüí° –ü–æ—Å–ª–µ –≤–≤–æ–¥–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –≤—ã —Å–º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è';
                    
                    await showMainMenu(chatId, translationMessage);
                }
            } catch (error) {
                console.error('Error in enter_translation:', error);
                await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞');
            }
        }
    }
    else if (data.startsWith('toggle_translation_')) {
        const translationIndex = parseInt(data.replace('toggle_translation_', ''));
        
        if (userState?.state === 'choosing_translation' && userState.tempTranslations[translationIndex]) {
            try {
                let selectedIndices = [...(userState.selectedTranslationIndices || [])];
                
                if (selectedIndices.includes(translationIndex)) {
                    selectedIndices = selectedIndices.filter(idx => idx !== translationIndex);
                } else {
                    selectedIndices.push(translationIndex);
                }
                
                userStates.set(chatId, {
                    ...userState,
                    selectedTranslationIndices: selectedIndices
                });
                
                await bot.editMessageReplyMarkup(
                    getTranslationSelectionKeyboard(userState.tempTranslations, userState.meanings, selectedIndices).reply_markup,
                    {
                        chat_id: chatId,
                        message_id: callbackQuery.message.message_id
                    }
                );
                
            } catch (error) {
                console.error('Error toggling translation:', error);
            }
        }
    }
    else if (data.startsWith('details_')) {
        const translationIndex = parseInt(data.replace('details_', ''));
        
        if (userState?.state === 'choosing_translation' && userState.tempTranslations[translationIndex]) {
            try {
                const translation = userState.tempTranslations[translationIndex];
                const meaning = userState.meanings.find(m => m.translation === translation);
                
                if (meaning) {
                    let detailsMessage = `üîç **–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ–≤–æ–¥–∞:**\n\n`;
                    detailsMessage += `üá¨üáß **–°–ª–æ–≤–æ:** ${userState.tempWord}\n`;
                    detailsMessage += `üá∑üá∫ **–ü–µ—Ä–µ–≤–æ–¥:** ${translation}\n\n`;
                    
                    if (meaning.englishDefinition) {
                        detailsMessage += `üìñ **–ê–Ω–≥–ª–∏–π—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ:**\n${meaning.englishDefinition}\n\n`;
                    }
                    
                    if (meaning.examples && meaning.examples.length > 0) {
                        detailsMessage += `üìù **–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:**\n`;
                        meaning.examples.forEach((example, index) => {
                            if (index < 3) { // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 3 –ø—Ä–∏–º–µ—Ä–∞
                                detailsMessage += `\n${index + 1}. ${example.english}`;
                                if (example.russian) {
                                    detailsMessage += `\n   ${example.russian}`;
                                }
                            }
                        });
                    }
                    
                    await bot.sendMessage(chatId, detailsMessage, {
                        reply_markup: {
                            inline_keyboard: [
                                [{ text: 'üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –ø–µ—Ä–µ–≤–æ–¥–æ–≤', callback_data: 'back_to_translations' }]
                            ]
                        }
                    });
                } else {
                    await bot.sendMessage(chatId, '‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–µ—Ä–µ–≤–æ–¥–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
                }
                
            } catch (error) {
                console.error('Error showing details:', error);
                await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π');
            }
        }
    }
    else if (data === 'back_to_translations') {
        if (userState?.state === 'choosing_translation') {
            try {
                await bot.deleteMessage(chatId, callbackQuery.message.message_id);
                // –°–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏ –æ—Å—Ç–∞–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω—ã–º
            } catch (error) {
                console.error('Error going back:', error);
            }
        }
    }
    else if (data === 'save_selected_translations') {
        if (userState?.state === 'choosing_translation' && userState.selectedTranslationIndices.length > 0) {
            try {
                const selectedTranslations = userState.selectedTranslationIndices
                    .map(index => userState.tempTranslations[index]);
                
                // ‚úÖ –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                await saveWordWithMeanings(chatId, userState, selectedTranslations);
                
                await bot.deleteMessage(chatId, callbackQuery.message.message_id);
            } catch (error) {
                console.error('Error saving translations:', error);
                await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–ª–æ–≤–∞');
            }
        }
    }
    else if (data === 'custom_translation') {
        if (userState?.state === 'choosing_translation') {
            try {
                // –ò–ó–ú–ï–ù–ï–ù–û: –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –ø–µ—Ä–µ–≤–æ–¥–∞
                userStates.set(chatId, {
                    ...userState,
                    state: 'waiting_custom_translation'
                });
                
                let translationMessage = '‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –ø–µ—Ä–µ–≤–æ–¥–∞:\n\n' +
                    `üá¨üáß ${userState.tempWord}`;
                
                if (userState.tempTranscription) {
                    translationMessage += `\nüî§ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è: ${userState.tempTranscription}`;
                }
                
                translationMessage += '\n\nüí° –ü–æ—Å–ª–µ –≤–≤–æ–¥–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –≤—ã —Å–º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è';
                
                await bot.deleteMessage(chatId, callbackQuery.message.message_id);
                
                await showMainMenu(chatId, translationMessage);
            } catch (error) {
                console.error('Error in custom_translation:', error);
                await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞');
            }
        }
    }
    else if (data === 'cancel_translation') {
        if (userState) {
            try {
                await bot.editMessageReplyMarkup(
                    { inline_keyboard: [] },
                    { chat_id: chatId, message_id: callbackQuery.message.message_id }
                );

                userStates.set(chatId, { ...userState, state: 'showing_transcription' });
                
                let message = `üìù –°–ª–æ–≤–æ: ${userState.tempWord}`;
                
                if (userState.tempTranscription) {
                    message += `\nüî§ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è: ${userState.tempTranscription}`;
                }
                
                message += '\n\nüéµ –î–æ—Å—Ç—É–ø–Ω–æ –∞—É–¥–∏–æ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:';
                
                await bot.sendMessage(chatId, message, getListeningKeyboard(userState.tempAudioId));
                await showMainMenu(chatId);
            } catch (error) {
                console.error('Error canceling translation:', error);
                await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ');
            }
        }
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.on('error', (error) => {
    console.error('Bot error:', error);
});

bot.on('polling_error', (error) => {
    console.error('Polling error:', error);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π
process.on('unhandledRejection', (reason, promise) => {
    console.error('‚ùå Unhandled Rejection at:', promise, 'reason:', reason);
});

process.on('uncaughtException', (error) => {
    console.error('‚ùå Uncaught Exception:', error);
});

console.log('ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è');
