import TelegramBot from 'node-telegram-bot-api';
import { GoogleSheetsService } from './services/google-sheets.js';
import { TranscriptionService } from './services/transcription-service.js';

const bot = new TelegramBot(process.env.BOT_TOKEN, { 
    polling: true 
});

const sheetsService = new GoogleSheetsService();
const transcriptionService = new TranscriptionService();
const userStates = new Map();

// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
function getMainMenu() {
    return {
        reply_markup: {
            keyboard: [
                ['‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ']
            ],
            resize_keyboard: true
        }
    };
}

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è
function getListeningKeyboard(audioUrl) {
    const keyboard = [];
    
    if (audioUrl) {
        keyboard.push([{ text: 'üîä –ü—Ä–æ—Å–ª—É—à–∞—Ç—å –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ', callback_data: `listen_${audioUrl}` }]);
    }
    
    keyboard.push([{ text: '‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è', callback_data: 'continue' }]);
    
    return {
        reply_markup: {
            inline_keyboard: keyboard
        }
    };
}

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.onText(/\/start/, (msg) => {
    const chatId = msg.chat.id;
    bot.sendMessage(chatId, 
        'üìö –ê–Ω–≥–ª–æ-—Ä—É—Å—Å–∫–∏–π —Å–ª–æ–≤–∞—Ä—å\n' +
        'üî§ –° —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–µ–π –∏ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ–º\n' +
        'üá¨üáß –ë—Ä–∏—Ç–∞–Ω—Å–∫–∏–π –≤–∞—Ä–∏–∞–Ω—Ç',
        getMainMenu()
    );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    const text = msg.text;

    if (text === '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ') {
        userStates.set(chatId, { state: 'waiting_english' });
        bot.sendMessage(chatId, 'üá¨üáß –í–≤–µ–¥–∏—Ç–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ:');
    }
    else {
        const userState = userStates.get(chatId);
        
        if (userState?.state === 'waiting_english') {
            const englishWord = text.trim();
            
            bot.sendMessage(chatId, 'üîç –ò—â—É —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –∏ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ...');
            
            const result = await transcriptionService.getUKTranscription(englishWord);
            
            userStates.set(chatId, {
                state: 'showing_transcription',
                tempWord: englishWord,
                tempTranscription: result.transcription,
                tempAudioUrl: result.audioUrl
            });
            
            let message = `–°–ª–æ–≤–æ: <b>${englishWord}</b>`;
            
            if (result.transcription) {
                message += `\nüî§ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è: <code>${result.transcription}</code>`;
            } else {
                message += `\n‚ùå –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`;
            }
            
            if (result.audioUrl) {
                message += `\n\nüéµ –î–æ—Å—Ç—É–ø–Ω–æ –∞—É–¥–∏–æ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ`;
            }
            
            message += `\n\n–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥:`;
            
            bot.sendMessage(chatId, message, {
                parse_mode: 'HTML',
                ...getListeningKeyboard(result.audioUrl)
            });
        }
        else if (userState?.state === 'waiting_translation') {
            const success = await sheetsService.addWord(
                chatId, 
                userState.tempWord, 
                userState.tempTranscription, 
                text.trim(),
                userState.tempAudioUrl
            );
            
            userStates.delete(chatId);
            
            if (success) {
                const transcriptionText = userState.tempTranscription ? ` [${userState.tempTranscription}]` : '';
                bot.sendMessage(chatId, 
                    `‚úÖ –°–ª–æ–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!\n\n` +
                    `üí¨ ${userState.tempWord}${transcriptionText} - ${text}`,
                    getMainMenu()
                );
            } else {
                bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è', getMainMenu());
            }
        }
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ inline –∫–Ω–æ–ø–æ–∫
bot.on('callback_query', async (callbackQuery) => {
    const chatId = callbackQuery.message.chat.id;
    const data = callbackQuery.data;
    const userState = userStates.get(chatId);

    if (data.startsWith('listen_')) {
        const audioUrl = data.replace('listen_', '');
        
        try {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await bot.sendAudio(chatId, audioUrl, {
                caption: 'üîä –ë—Ä–∏—Ç–∞–Ω—Å–∫–æ–µ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ'
            });
            
            // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏
            await bot.answerCallbackQuery(callbackQuery.id, {
                text: '–ê—É–¥–∏–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ'
            });
            
        } catch (error) {
            console.error('Error sending audio:', error);
            await bot.answerCallbackQuery(callbackQuery.id, {
                text: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ'
            });
        }
    }
    else if (data === 'continue') {
        if (userState?.state === 'showing_transcription') {
            // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –ø–µ—Ä–µ–≤–æ–¥–∞
            userStates.set(chatId, {
                ...userState,
                state: 'waiting_translation'
            });
            
            await bot.editMessageText(
                `–°–ª–æ–≤–æ: <b>${userState.tempWord}</b>\n` +
                (userState.tempTranscription ? `–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è: <code>${userState.tempTranscription}</code>\n\n` : '\n') +
                '–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥:',
                {
                    chat_id: chatId,
                    message_id: callbackQuery.message.message_id,
                    parse_mode: 'HTML'
                }
            );
            
            await bot.answerCallbackQuery(callbackQuery.id);
        }
    }
});

console.log('ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ–º –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è');
