import TelegramBot from 'node-telegram-bot-api';
import { GoogleSheetsService } from './services/google-sheets.js';
import { TranscriptionService } from './services/transcription-service.js';

const bot = new TelegramBot(process.env.BOT_TOKEN, { 
    polling: true 
});

const sheetsService = new GoogleSheetsService();
const transcriptionService = new TranscriptionService();

// –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const userStates = new Map();

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è audio URLs (–≤—Ä–µ–º–µ–Ω–Ω–æ–µ)
const audioUrlStorage = new Map();

// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
function getMainMenu() {
    return {
        reply_markup: {
            keyboard: [
                ['‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ']
            ],
            resize_keyboard: true
        }
    };
}

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è
function getListeningKeyboard(audioId) {
    return {
        reply_markup: {
            inline_keyboard: [
                [{ text: 'üîä –ü—Ä–æ—Å–ª—É—à–∞—Ç—å –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ', callback_data: `audio_${audioId}` }],
                [{ text: '‚û°Ô∏è –í–≤–µ—Å—Ç–∏ –ø–µ—Ä–µ–≤–æ–¥', callback_data: 'enter_translation' }]
            ]
        }
    };
}

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ—Å–ª–µ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è
function getAfterAudioKeyboard(audioId) {
    return {
        reply_markup: {
            inline_keyboard: [
                [{ text: 'üîä –ü—Ä–æ—Å–ª—É—à–∞—Ç—å –µ—â–µ —Ä–∞–∑', callback_data: `audio_${audioId}` }],
                [{ text: '‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –ø–µ—Ä–µ–≤–æ–¥', callback_data: 'enter_translation' }],
                [{ text: 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ª–æ–≤—É', callback_data: 'back_to_word' }]
            ]
        }
    };
}

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.onText(/\/start/, (msg) => {
    const chatId = msg.chat.id;
    bot.sendMessage(chatId, 
        'üìö –ê–Ω–≥–ª–æ-—Ä—É—Å—Å–∫–∏–π —Å–ª–æ–≤–∞—Ä—å\n' +
        'üî§ –° —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–µ–π –∏ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ–º\n' +
        'üá¨üáß –ë—Ä–∏—Ç–∞–Ω—Å–∫–∏–π –≤–∞—Ä–∏–∞–Ω—Ç',
        getMainMenu()
    );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    const text = msg.text;

    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
    if (text.startsWith('/')) return;

    if (text === '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ') {
        userStates.set(chatId, { state: 'waiting_english' });
        bot.sendMessage(chatId, 'üá¨üáß –í–≤–µ–¥–∏—Ç–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ:');
    }
    else {
        const userState = userStates.get(chatId);
        
        if (userState?.state === 'waiting_english') {
            const englishWord = text.trim();
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ
            if (!/^[a-zA-Z\s\-']+$/.test(englishWord)) {
                bot.sendMessage(chatId, 
                    '‚ùå –≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ.\n' +
                    '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º:'
                );
                return;
            }
            
            bot.sendMessage(chatId, 'üîç –ò—â—É —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –∏ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ...');
            
            const result = await transcriptionService.getUKTranscription(englishWord);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º audioUrl –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
            let audioId = null;
            if (result.audioUrl) {
                audioId = Date.now().toString();
                audioUrlStorage.set(audioId, result.audioUrl);
                
                // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç
                setTimeout(() => {
                    audioUrlStorage.delete(audioId);
                }, 10 * 60 * 1000);
            }
            
            userStates.set(chatId, {
                state: 'showing_transcription',
                tempWord: englishWord,
                tempTranscription: result.transcription,
                tempAudioUrl: result.audioUrl,
                tempAudioId: audioId,
                originalMessageId: msg.message_id + 2 // ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
            });
            
            let message = `üìù –°–ª–æ–≤–æ: <b>${englishWord}</b>`;
            
            if (result.transcription) {
                message += `\nüî§ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è: <code>${result.transcription}</code>`;
            } else {
                message += `\n‚ùå –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`;
            }
            
            if (result.audioUrl) {
                message += `\n\nüéµ –î–æ—Å—Ç—É–ø–Ω–æ –∞—É–¥–∏–æ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ`;
            }
            
            message += `\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
            
            const sentMessage = await bot.sendMessage(chatId, message, {
                parse_mode: 'HTML',
                ...getListeningKeyboard(audioId)
            });
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
            userStates.set(chatId, {
                ...userStates.get(chatId),
                controlsMessageId: sentMessage.message_id
            });
        }
        else if (userState?.state === 'waiting_translation') {
            // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –ø–µ—Ä–µ–≤–æ–¥
            const success = await sheetsService.addWord(
                chatId, 
                userState.tempWord, 
                userState.tempTranscription, 
                text.trim(),
                userState.tempAudioUrl
            );
            
            // –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
            if (userState.tempAudioId) {
                audioUrlStorage.delete(userState.tempAudioId);
            }
            userStates.delete(chatId);
            
            if (success) {
                const transcriptionText = userState.tempTranscription ? ` [${userState.tempTranscription}]` : '';
                await bot.sendMessage(chatId, 
                    `‚úÖ –°–ª–æ–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–ª–æ–≤–∞—Ä—å!\n\n` +
                    `üí¨ <b>${userState.tempWord}</b>${transcriptionText} - ${text}`,
                    { 
                        parse_mode: 'HTML',
                        ...getMainMenu() 
                    }
                );
            } else {
                await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è', getMainMenu());
            }
        }
        else if (!userState) {
            // –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            await bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', getMainMenu());
        }
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ inline –∫–Ω–æ–ø–æ–∫
bot.on('callback_query', async (callbackQuery) => {
    const chatId = callbackQuery.message.chat.id;
    const data = callbackQuery.data;
    const userState = userStates.get(chatId);

    if (data.startsWith('audio_')) {
        const audioId = data.replace('audio_', '');
        const audioUrl = audioUrlStorage.get(audioId);
        
        if (audioUrl) {
            try {
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await bot.sendAudio(chatId, audioUrl, {
                    caption: 'üîä –ë—Ä–∏—Ç–∞–Ω—Å–∫–æ–µ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ'
                });
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ—Å–ª–µ –∞—É–¥–∏–æ
                await bot.sendMessage(chatId, 
                    'üéµ –í—ã –ø—Ä–æ—Å–ª—É—à–∞–ª–∏ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ. –ß—Ç–æ –¥–∞–ª—å—à–µ?',
                    getAfterAudioKeyboard(audioId)
                );
                
                // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏
                await bot.answerCallbackQuery(callbackQuery.id, {
                    text: '–ê—É–¥–∏–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ'
                });
                
            } catch (error) {
                console.error('Error sending audio:', error);
                await bot.answerCallbackQuery(callbackQuery.id, {
                    text: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ'
                });
            }
        } else {
            await bot.answerCallbackQuery(callbackQuery.id, {
                text: '–ê—É–¥–∏–æ –±–æ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ'
            });
        }
    }
    else if (data === 'enter_translation') {
        if (userState?.state === 'showing_transcription') {
            // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –ø–µ—Ä–µ–≤–æ–¥–∞
            userStates.set(chatId, {
                ...userState,
                state: 'waiting_translation'
            });
            
            // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
            await bot.editMessageText(
                `‚úèÔ∏è <b>–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥</b>\n\n` +
                `–°–ª–æ–≤–æ: <b>${userState.tempWord}</b>\n` +
                (userState.tempTranscription ? `–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è: <code>${userState.tempTranscription}</code>\n\n` : '\n') +
                '–ù–∞–ø–∏—à–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º:',
                {
                    chat_id: chatId,
                    message_id: userState.controlsMessageId || callbackQuery.message.message_id,
                    parse_mode: 'HTML',
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: 'üîô –û—Ç–º–µ–Ω–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ', callback_data: 'cancel' }]
                        ]
                    }
                }
            );
            
            await bot.answerCallbackQuery(callbackQuery.id, {
                text: '–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥'
            });
        }
    }
    else if (data === 'back_to_word') {
        if (userState?.state === 'showing_transcription') {
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é —Å–æ —Å–ª–æ–≤–æ–º
            const message = `üìù –°–ª–æ–≤–æ: <b>${userState.tempWord}</b>\n` +
                (userState.tempTranscription ? `üî§ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è: <code>${userState.tempTranscription}</code>\n\n` : '\n') +
                'üéµ –î–æ—Å—Ç—É–ø–Ω–æ –∞—É–¥–∏–æ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ\n\n' +
                '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:';
            
            await bot.sendMessage(chatId, message, {
                parse_mode: 'HTML',
                ...getListeningKeyboard(userState.tempAudioId)
            });
            
            await bot.answerCallbackQuery(callbackQuery.id, {
                text: '–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ª–æ–≤—É'
            });
        }
    }
    else if (data === 'cancel') {
        // –û—Ç–º–µ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞
        if (userState?.tempAudioId) {
            audioUrlStorage.delete(userState.tempAudioId);
        }
        userStates.delete(chatId);
        
        await bot.editMessageText(
            '‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ',
            {
                chat_id: chatId,
                message_id: callbackQuery.message.message_id
            }
        );
        
        await bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', getMainMenu());
        await bot.answerCallbackQuery(callbackQuery.id);
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.on('error', (error) => {
    console.error('Bot error:', error);
});

bot.on('polling_error', (error) => {
    console.error('Polling error:', error);
});

console.log('ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è');
