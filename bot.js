import TelegramBot from 'node-telegram-bot-api';
import { GoogleSheetsService } from './services/google-sheets.js';
import { TranscriptionService } from './services/transcription-service.js';

const bot = new TelegramBot(process.env.BOT_TOKEN, { 
    polling: true 
});

const sheetsService = new GoogleSheetsService();
const transcriptionService = new TranscriptionService();

// –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const userStates = new Map();

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∞—É–¥–∏–æ –ø–æ —Å–ª–æ–≤–∞–º
const audioPlaybackTracker = new Map();

// –¢–∞–π–º–µ—Ä—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏ –º–µ–∂–¥—É –∞—É–¥–∏–æ
const audioCooldowns = new Map();

// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
function getMainMenu() {
    return {
        reply_markup: {
            keyboard: [
                ['‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ']
            ],
            resize_keyboard: true
        }
    };
}

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è
function getListeningKeyboard(audioId) {
    return {
        reply_markup: {
            inline_keyboard: [
                [{ text: 'üîä –ü—Ä–æ—Å–ª—É—à–∞—Ç—å –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ', callback_data: `audio_${audioId}` }],
                [{ text: '‚û°Ô∏è –í–≤–µ—Å—Ç–∏ –ø–µ—Ä–µ–≤–æ–¥', callback_data: 'enter_translation' }]
            ]
        }
    };
}

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ—Å–ª–µ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è (–±–µ–∑ –∫–Ω–æ–ø–∫–∏ "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ª–æ–≤—É")
function getAfterAudioKeyboard() {
    return {
        reply_markup: {
            inline_keyboard: [
                [{ text: '‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –ø–µ—Ä–µ–≤–æ–¥', callback_data: 'enter_translation' }]
            ]
        }
    };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ—Ç–º–µ—Ç–∫–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∞—É–¥–∏–æ
function canPlayAudio(englishWord, chatId) {
    const key = `${chatId}_${englishWord.toLowerCase()}`;
    
    if (audioPlaybackTracker.has(key)) {
        return false;
    }
    
    audioPlaybackTracker.set(key, true);
    setTimeout(() => {
        audioPlaybackTracker.delete(key);
    }, 30000);
    
    return true;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—É–ª–¥–∞—É–Ω–∞ –º–µ–∂–¥—É –∞—É–¥–∏–æ
function canSendAudio(chatId) {
    const lastAudioTime = audioCooldowns.get(chatId);
    if (!lastAudioTime) return true;
    
    const timeSinceLastAudio = Date.now() - lastAudioTime;
    return timeSinceLastAudio > 5000; // 5 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –∞—É–¥–∏–æ
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –∞–≤—Ç–æ–≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
async function sendAudioSafe(chatId, audioUrl, englishWord) {
    try {
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É–ª–¥–∞—É–Ω –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
        audioCooldowns.set(chatId, Date.now());
        
        // 1. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ-—Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –ü–ï–†–ï–î –∞—É–¥–∏–æ
        await bot.sendMessage(chatId, `üîä –ü—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ —Å–ª–æ–≤–∞: "${englishWord}"`, {
            reply_markup: {
                inline_keyboard: [[
                    { text: '‚è∏Ô∏è –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∞—É–¥–∏–æ', callback_data: 'audio_divider' }
                ]]
            }
        });

        // 2. –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ —á—Ç–æ–±—ã —Ä–∞–∑–æ—Ä–≤–∞—Ç—å –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É
        await new Promise(resolve => setTimeout(resolve, 500));

        // 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ
        await bot.sendAudio(chatId, audioUrl, {
            caption: 'üéß –ù–∞–∂–º–∏—Ç–µ –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è',
            title: englishWord,
            performer: '–ë—Ä–∏—Ç–∞–Ω—Å–∫–æ–µ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ'
        });

        // 4. –ñ–¥–µ–º –µ—â–µ –Ω–µ–º–Ω–æ–≥–æ
        await new Promise(resolve => setTimeout(resolve, 500));

        // 5. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ-—Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –ü–û–°–õ–ï –∞—É–¥–∏–æ
        await bot.sendMessage(chatId, '‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ', {
            reply_markup: {
                inline_keyboard: [[
                    { text: '‚úÖ –ê—É–¥–∏–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ', callback_data: 'audio_complete' }
                ]]
            }
        });

        return true;
    } catch (error) {
        console.error('Error sending safe audio:', error);
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫—É–ª–¥–∞—É–Ω –ø—Ä–∏ –æ—à–∏–±–∫–µ
        audioCooldowns.delete(chatId);
        return false;
    }
}

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.onText(/\/start/, (msg) => {
    const chatId = msg.chat.id;
    bot.sendMessage(chatId, 
        'üìö –ê–Ω–≥–ª–æ-—Ä—É—Å—Å–∫–∏–π —Å–ª–æ–≤–∞—Ä—å\n' +
        'üî§ –° —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–µ–π –∏ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ–º\n' +
        'üá¨üáß –ë—Ä–∏—Ç–∞–Ω—Å–∫–∏–π –≤–∞—Ä–∏–∞–Ω—Ç',
        getMainMenu()
    );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    const text = msg.text;

    if (text.startsWith('/')) return;

    const userState = userStates.get(chatId);

    if (text === '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ') {
        userStates.set(chatId, { state: 'waiting_english' });
        bot.sendMessage(chatId, 'üá¨üáß –í–≤–µ–¥–∏—Ç–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ:');
    }
    else if (userState?.state === 'waiting_english') {
        const englishWord = text.trim();
        
        if (!/^[a-zA-Z\s\-']+$/.test(englishWord)) {
            bot.sendMessage(chatId, 
                '‚ùå –≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ.\n' +
                '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º:'
            );
            return;
        }
        
        bot.sendMessage(chatId, 'üîç –ò—â—É —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –∏ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ...');
        
        const result = await transcriptionService.getUKTranscription(englishWord);
        
        let audioId = null;
        if (result.audioUrl) {
            audioId = Date.now().toString();
        }
        
        userStates.set(chatId, {
            state: 'showing_transcription',
            tempWord: englishWord,
            tempTranscription: result.transcription,
            tempAudioUrl: result.audioUrl,
            tempAudioId: audioId
        });
        
        let message = `üìù –°–ª–æ–≤–æ: <b>${englishWord}</b>`;
        
        if (result.transcription) {
            message += `\nüî§ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è: <code>${result.transcription}</code>`;
        } else {
            message += `\n‚ùå –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`;
        }
        
        if (result.audioUrl) {
            message += `\n\nüéµ –î–æ—Å—Ç—É–ø–Ω–æ –∞—É–¥–∏–æ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ`;
        }
        
        message += `\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
        
        await bot.sendMessage(chatId, message, {
            parse_mode: 'HTML',
            ...getListeningKeyboard(audioId)
        });
    }
    else if (userState?.state === 'waiting_translation') {
        const translation = text.trim();
        
        if (!translation) {
            bot.sendMessage(chatId, '‚ùå –ü–µ—Ä–µ–≤–æ–¥ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥:');
            return;
        }
        
        const success = await sheetsService.addWord(
            chatId, 
            userState.tempWord, 
            userState.tempTranscription,
            translation,
            userState.tempAudioUrl
        );
        
        userStates.delete(chatId);
        
        if (success) {
            const transcriptionText = userState.tempTranscription ? ` [${userState.tempTranscription}]` : '';
            
            await bot.sendMessage(chatId, 
                `‚úÖ <b>–°–ª–æ–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–ª–æ–≤–∞—Ä—å!</b>\n\n` +
                `üí¨ ${userState.tempWord}${transcriptionText} - <b>${translation}</b>\n\n` +
                `–¢–µ–ø–µ—Ä—å –æ–Ω–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è.`,
                { 
                    parse_mode: 'HTML',
                    ...getMainMenu() 
                }
            );
        } else {
            await bot.sendMessage(chatId, 
                '‚ùå <b>–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è</b>\n\n–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–ª–æ–≤–æ –≤ —Å–ª–æ–≤–∞—Ä—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
                { 
                    parse_mode: 'HTML',
                    ...getMainMenu() 
                }
            );
        }
    }
    else {
        await bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', getMainMenu());
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ inline –∫–Ω–æ–ø–æ–∫
bot.on('callback_query', async (callbackQuery) => {
    const chatId = callbackQuery.message.chat.id;
    const data = callbackQuery.data;
    const userState = userStates.get(chatId);

    await bot.answerCallbackQuery(callbackQuery.id);

    if (data.startsWith('audio_')) {
        const audioId = data.replace('audio_', '');
        const audioUrl = userState?.tempAudioUrl;
        const englishWord = userState?.tempWord;
        
        if (audioUrl && englishWord) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–ª–¥–∞—É–Ω –º–µ–∂–¥—É –∞—É–¥–∏–æ
            if (!canSendAudio(chatId)) {
                await bot.answerCallbackQuery(callbackQuery.id, {
                    text: '‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∞—É–¥–∏–æ',
                    show_alert: true
                });
                return;
            }
            
            if (!canPlayAudio(englishWord, chatId)) {
                await bot.answerCallbackQuery(callbackQuery.id, {
                    text: 'üîá –ê—É–¥–∏–æ —É–∂–µ –±—ã–ª–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–æ. –ú–æ–∂–Ω–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥.',
                    show_alert: true
                });
                return;
            }
            
            try {
                // –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                await bot.editMessageReplyMarkup(
                    { inline_keyboard: [] },
                    {
                        chat_id: chatId,
                        message_id: callbackQuery.message.message_id
                    }
                );

                // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É –∞—É–¥–∏–æ
                const success = await sendAudioSafe(chatId, audioUrl, englishWord);
                
                if (success) {
                    // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                    await new Promise(resolve => setTimeout(resolve, 1000));
                    
                    await bot.sendMessage(chatId, 
                        'üéµ –ü—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –•–æ—Ç–∏—Ç–µ –≤–≤–µ—Å—Ç–∏ –ø–µ—Ä–µ–≤–æ–¥?',
                        getAfterAudioKeyboard()
                    );
                }
                
            } catch (error) {
                console.error('Error in audio playback:', error);
                const key = `${chatId}_${englishWord.toLowerCase()}`;
                audioPlaybackTracker.delete(key);
                audioCooldowns.delete(chatId);
            }
        }
    }
    else if (data === 'audio_divider' || data === 'audio_complete') {
        // –ü—Ä–æ—Å—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏
        await bot.answerCallbackQuery(callbackQuery.id, {
            text: 'üéß –ê—É–¥–∏–æ –≥–æ—Ç–æ–≤–æ –∫ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—é',
            show_alert: false
        });
    }
    else if (data === 'enter_translation') {
        if (userState?.state === 'showing_transcription') {
            await bot.editMessageReplyMarkup(
                { inline_keyboard: [] },
                {
                    chat_id: chatId,
                    message_id: callbackQuery.message.message_id
                }
            );

            userStates.set(chatId, {
                ...userState,
                state: 'waiting_translation'
            });
            
            let translationMessage = `‚úèÔ∏è <b>–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è —Å–ª–æ–≤–∞:</b>\n\n` +
                `üá¨üáß <b>${userState.tempWord}</b>`;
            
            if (userState.tempTranscription) {
                translationMessage += `\nüî§ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è: <code>${userState.tempTranscription}</code>`;
            }
            
            translationMessage += `\n\nüìù <i>–ù–∞–ø–∏—à–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ–º</i>`;
            
            await bot.sendMessage(chatId, translationMessage, {
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'üîô –û—Ç–º–µ–Ω–∏—Ç—å', callback_data: 'cancel_translation' }]
                    ]
                }
            });
        }
    }
    else if (data === 'cancel_translation') {
        if (userState) {
            await bot.editMessageReplyMarkup(
                { inline_keyboard: [] },
                {
                    chat_id: chatId,
                    message_id: callbackQuery.message.message_id
                }
            );

            userStates.set(chatId, {
                ...userState,
                state: 'showing_transcription'
            });
            
            const message = `üìù –°–ª–æ–≤–æ: <b>${userState.tempWord}</b>\n` +
                (userState.tempTranscription ? `üî§ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è: <code>${userState.tempTranscription}</code>\n\n` : '\n') +
                'üéµ –î–æ—Å—Ç—É–ø–Ω–æ –∞—É–¥–∏–æ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ\n\n' +
                '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:';
            
            await bot.sendMessage(chatId, message, {
                parse_mode: 'HTML',
                ...getListeningKeyboard(userState.tempAudioId)
            });
        }
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.on('error', (error) => {
    console.error('Bot error:', error);
});

bot.on('polling_error', (error) => {
    console.error('Polling error:', error);
});

console.log('ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –∑–∞—â–∏—Ç–æ–π –æ—Ç –∞–≤—Ç–æ–≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∞—É–¥–∏–æ');
