import TelegramBot from 'node-telegram-bot-api';
import { GoogleSheetsService } from './services/google-sheets.js';
import { YandexDictionaryService } from './services/yandex-dictionary-service.js';
import { CambridgeDictionaryService } from './services/cambridge-dictionary-service.js';
import { FSRSService } from './services/fsrs-service.js';
import { BatchSheetsService } from './services/batch-sheets-service.js';

const bot = new TelegramBot(process.env.BOT_TOKEN, { polling: true });

// –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –ª–µ–Ω–∏–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
let sheetsService, yandexService, cambridgeService, fsrsService, batchSheetsService;
let servicesInitialized = false;

// –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
const cache = new Map();
const CACHE_TTL = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç

// –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: —É–º–µ–Ω—å—à–µ–Ω–∏–µ –ª–æ–≥–æ–≤ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ
const isProduction = process.env.NODE_ENV === 'production';

function optimizedLog(message, data = null) {
    if (!isProduction) {
        if (data) {
            console.log(message, data);
        } else {
            console.log(message);
        }
    } else {
        const importantMessages = ['‚ùå', '‚úÖ', 'üîî', 'üéØ', 'üí∞', '‚è∞'];
        if (importantMessages.some(emoji => message.includes(emoji))) {
            console.log(message);
        }
    }
}

async function initializeServices() {
    if (servicesInitialized) return;
    
    try {
        sheetsService = new GoogleSheetsService();
        batchSheetsService = new BatchSheetsService(sheetsService);
        yandexService = new YandexDictionaryService();
        cambridgeService = new CambridgeDictionaryService();
        fsrsService = new FSRSService();
        
        servicesInitialized = true;
        optimizedLog('‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
    } catch (error) {
        optimizedLog('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤:', error);
        // –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫–∏ —á—Ç–æ–±—ã –±–æ—Ç –Ω–µ –ø–∞–¥–∞–ª
        sheetsService = { 
            initialized: false,
            hasWordsForReview: () => false,
            getReviewWordsCount: () => 0,
            getUserWords: () => []
        };
        yandexService = { getTranscriptionAndAudio: () => ({ transcription: '', audioUrl: '' }) };
        cambridgeService = { getWordData: () => ({ meanings: [] }) };
        fsrsService = new FSRSService();
        batchSheetsService = {
            updateWordReviewBatch: async () => true,
            flushAll: async () => {}
        };
    }
}

// –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const userStates = new Map();

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –Ω–æ—Ç–∏—Ñ–∏–∫–∞—Ü–∏–π
const notificationScheduler = new Map();

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞ –∏–∑—É—á–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤
const dailyLearnedWords = new Map();

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —Å–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –£–ñ–ï –ò–ó–£–ß–ï–ù–´ (–ø–µ—Ä–µ—à–ª–∏ –≤ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ)
const learnedWords = new Map();

// –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å–ª–æ–≤
async function getCachedUserWords(chatId) {
    const cacheKey = `words_${chatId}`;
    const cached = cache.get(cacheKey);
    
    if (cached && Date.now() - cached.timestamp < CACHE_TTL) {
        return cached.data;
    }
    
    await initializeServices();
    const words = await sheetsService.getUserWords(chatId);
    cache.set(cacheKey, {
        data: words,
        timestamp: Date.now()
    });
    
    return words;
}

// –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞
setInterval(() => {
    const now = Date.now();
    for (const [key, value] of cache.entries()) {
        if (now - value.timestamp > CACHE_TTL) {
            cache.delete(key);
        }
    }
    // –û—á–∏—â–∞–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const inactiveTime = 30 * 60 * 1000; // 30 –º–∏–Ω—É—Ç
    for (const [chatId, state] of userStates.entries()) {
        if (now - (state.lastActivity || 0) > inactiveTime) {
            userStates.delete(chatId);
            optimizedLog(`üßπ –û—á–∏—â–µ–Ω –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${chatId}`);
        }
    }
}, 10 * 60 * 1000);

function updateUserActivity(chatId) {
    const state = userStates.get(chatId);
    if (state) {
        state.lastActivity = Date.now();
    }
}

// ‚úÖ –§–£–ù–ö–¶–ò–Ø: –û—Ç–º–µ—Ç–∫–∞ —Å–ª–æ–≤–∞ –∫–∞–∫ –∏–∑—É—á–µ–Ω–Ω–æ–≥–æ
function markWordAsLearned(chatId, englishWord) {
    if (!learnedWords.has(chatId)) {
        learnedWords.set(chatId, new Set());
    }
    
    const userLearnedWords = learnedWords.get(chatId);
    userLearnedWords.add(englishWord.toLowerCase());
    optimizedLog(`üéì –°–ª–æ–≤–æ "${englishWord}" –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –ò–ó–£–ß–ï–ù–ù–û–ï –¥–ª—è ${chatId}, –≤—Å–µ–≥–æ: ${userLearnedWords.size}`);
}

// ‚úÖ –§–£–ù–ö–¶–ò–Ø: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑—É—á–µ–Ω–æ –ª–∏ —Å–ª–æ–≤–æ
function isWordLearned(chatId, englishWord) {
    if (!learnedWords.has(chatId)) {
        learnedWords.set(chatId, new Set());
        return false;
    }
    const userLearnedWords = learnedWords.get(chatId);
    return userLearnedWords.has(englishWord.toLowerCase());
}

// ‚úÖ –§–£–ù–ö–¶–ò–Ø: –°–±—Ä–æ—Å –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞
function resetDailyLimit() {
    const now = new Date();
    const currentHour = now.getHours();
    
    if (currentHour === 4) {
        dailyLearnedWords.clear();
        optimizedLog('üîÑ –°–±—Ä–æ—à–µ–Ω –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –∏–∑—É—á–µ–Ω–∏—è —Å–ª–æ–≤');
    }
}

// –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –æ–¥–∏–Ω –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤–º–µ—Å—Ç–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö
let lastLimitReset = 0;
let lastCacheCleanup = 0;
setInterval(() => {
    const now = Date.now();
    if (now - lastLimitReset >= 60 * 60 * 1000) {
        resetDailyLimit();
        lastLimitReset = now;
    }
}, 60 * 1000);

// ‚úÖ –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–∑—É—á–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤ —Å–µ–≥–æ–¥–Ω—è
async function getLearnedToday(chatId) {
    try {
        const userWords = await getCachedUserWords(chatId);
        const today = new Date();
        today.setHours(0, 0, 0, 0);
        
        const learnedToday = userWords.filter(word => {
            if (word.interval <= 1) return false;
            
            try {
                let reviewDate;
                if (word.lastReview && word.lastReview.trim() !== '') {
                    reviewDate = new Date(word.lastReview);
                } else {
                    const nextReview = new Date(word.nextReview);
                    reviewDate = new Date(nextReview);
                    reviewDate.setDate(reviewDate.getDate() - (word.interval || 1));
                }
                
                const reviewDay = new Date(reviewDate.getFullYear(), reviewDate.getMonth(), reviewDate.getDate());
                const isLearnedToday = reviewDay.getTime() === today.getTime();
                
                if (isLearnedToday) {
                    optimizedLog(`‚úÖ –°–ª–æ–≤–æ "${word.english}" –∏–∑—É—á–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è: –∏–Ω—Ç–µ—Ä–≤–∞–ª=${word.interval}, LastReview=${word.lastReview || '–Ω–µ—Ç'}, —Ä–∞—Å—á–µ—Ç–Ω–∞—è –¥–∞—Ç–∞=${reviewDate}`);
                }
                
                return isLearnedToday;
            } catch (error) {
                optimizedLog(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–ª–æ–≤–∞ "${word.english}":`, error);
                return false;
            }
        }).length;

        optimizedLog(`üìä –°–ª–æ–≤ –∏–∑—É—á–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è –¥–ª—è ${chatId}: ${learnedToday}`);
        return learnedToday;
        
    } catch (error) {
        optimizedLog('‚ùå Error getting learned today:', error);
        return 0;
    }
}

// –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å–ª–æ–≤–∞—Ä–µ–π
const dictionaryCache = new Map();

async function getCachedWordData(englishWord) {
    const cacheKey = `dict_${englishWord.toLowerCase()}`;
    const cached = dictionaryCache.get(cacheKey);
    
    if (cached) {
        return cached;
    }
    
    await initializeServices();
    
    try {
        const result = await Promise.race([
            cambridgeService.getWordData(englishWord),
            new Promise((_, reject) => 
                setTimeout(() => reject(new Error('Timeout')), 10000)
            )
        ]);
        
        dictionaryCache.set(cacheKey, result);
        
        if (dictionaryCache.size > 1000) {
            const firstKey = dictionaryCache.keys().next().value;
            dictionaryCache.delete(firstKey);
        }
        
        return result;
    } catch (error) {
        optimizedLog(`‚ùå Dictionary error for "${englishWord}":`, error.message);
        return { meanings: [] };
    }
}

// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
function getMainMenu() {
    return {
        reply_markup: {
            keyboard: [
                ['‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ', 'üìö –ü–æ–≤—Ç–æ—Ä–∏—Ç—å —Å–ª–æ–≤–∞'],
                ['üÜï –ù–æ–≤—ã–µ —Å–ª–æ–≤–∞', 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞']
            ],
            resize_keyboard: true
        }
    };
}

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è
function getListeningKeyboard(audioId) {
    return {
        reply_markup: {
            inline_keyboard: [
                [{ text: 'üîä –ü—Ä–æ—Å–ª—É—à–∞—Ç—å –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ', callback_data: `audio_${audioId}` }],
                [{ text: '‚û°Ô∏è –í—ã–±—Ä–∞—Ç—å –ø–µ—Ä–µ–≤–æ–¥', callback_data: 'enter_translation' }]
            ]
        }
    };
}

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ—Å–ª–µ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è
function getAfterAudioKeyboard() {
    return {
        reply_markup: {
            inline_keyboard: [
                [{ text: '‚úèÔ∏è –í—ã–±—Ä–∞—Ç—å –ø–µ—Ä–µ–≤–æ–¥', callback_data: 'enter_translation' }]
            ]
        }
    };
}

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–≤–æ–¥–∞ –ø—Ä–∏–º–µ—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"
function getExampleInputKeyboard() {
    return {
        reply_markup: {
            keyboard: [
                ['‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'],
                ['‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ']
            ],
            resize_keyboard: true
        }
    };
}

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ —Å –∫–Ω–æ–ø–∫–æ–π "–ü–æ–¥—Ä–æ–±–Ω–µ–µ" –¥–ª—è –≤—Å–µ—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤
function getTranslationSelectionKeyboard(translations, meanings, selectedIndices = []) {
    const translationButtons = [];
    translations.forEach((translation, index) => {
        const isSelected = selectedIndices.includes(index);
        let numberEmoji;
        if (index < 9) {
            numberEmoji = `${index + 1}Ô∏è‚É£`;
        } else {
            const number = index + 1;
            const digits = number.toString().split('');
            numberEmoji = digits.map(digit => {
                const digitEmojis = ['0Ô∏è‚É£', '1Ô∏è‚É£', '2Ô∏è‚É£', '3Ô∏è‚É£', '4Ô∏è‚É£', '5Ô∏è‚É£', '6Ô∏è‚É£', '7Ô∏è‚É£', '8Ô∏è‚É£', '9Ô∏è‚É£'];
                return digitEmojis[parseInt(digit)];
            }).join('');
        }
        const emoji = isSelected ? '‚úÖ' : numberEmoji;
        
        // –ù–∞—Ö–æ–¥–∏–º –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞
        const meaningForTranslation = meanings.find(meaning => meaning.translation === translation);
        const englishDefinition = meaningForTranslation?.englishDefinition || '';
        
        // –û—Å–Ω–æ–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞ —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º
        const mainButtonText = `${emoji} ${translation}`;
        
        // –í—Å–µ–≥–¥–∞ —Å–æ–∑–¥–∞–µ–º –¥–≤–µ –∫–Ω–æ–ø–∫–∏: –æ—Å–Ω–æ–≤–Ω—É—é –∏ "–ü–æ–¥—Ä–æ–±–Ω–µ–µ"
        const row = [
            { text: mainButtonText, callback_data: `toggle_translation_${index}` },
            { text: 'üîç –ü–æ–¥—Ä–æ–±–Ω–µ–µ', callback_data: `details_${index}` }
        ];
        translationButtons.push(row);
    });

    const actionButtons = [];
    if (selectedIndices.length > 0) {
        actionButtons.push([
            { text: `üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å (${selectedIndices.length})`, callback_data: 'save_selected_translations' }
        ]);
    }
    actionButtons.push([
        { text: '‚úèÔ∏è –î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–π –ø–µ—Ä–µ–≤–æ–¥', callback_data: 'custom_translation' },
        { text: 'üîô –û—Ç–º–µ–Ω–∏—Ç—å', callback_data: 'cancel_translation' }
    ]);

    return {
        reply_markup: {
            inline_keyboard: [
                ...translationButtons,
                ...actionButtons
            ]
        }
    };
}

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è —Å–ª–æ–≤
function getReviewKeyboard() {
    return {
        reply_markup: {
            inline_keyboard: [
                [
                    { text: 'üò£ –ó–∞–±—ã–ª', callback_data: 'review_again' },
                    { text: 'üòì –¢—Ä—É–¥–Ω–æ', callback_data: 'review_hard' }
                ],
                [
                    { text: 'üòä –•–æ—Ä–æ—à–æ', callback_data: 'review_good' },
                    { text: 'üéâ –õ–µ–≥–∫–æ', callback_data: 'review_easy' }
                ],
                [
                    { text: '‚è≠Ô∏è –°–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ', callback_data: 'skip_review' }
                ]
            ]
        }
    };
}

// ‚úÖ –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –ö–õ–ê–í–ò–ê–¢–£–†–ê: –ó–∞–º–µ–Ω—è–µ–º "–°–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ" –Ω–∞ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Å–ª–æ–≤–æ"
function getNewWordsKeyboard() {
    return {
        reply_markup: {
            inline_keyboard: [
                [{ text: '‚úÖ –í—ã—É—á–∏–ª', callback_data: 'learned_word' }],
                [{ text: 'üîÑ –ù—É–∂–Ω–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å', callback_data: 'need_repeat_word' }],
                [{ text: '‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Å–ª–æ–≤–æ', callback_data: 'skip_new_word' }],
                [{ text: '‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –∏–∑—É—á–µ–Ω–∏–µ', callback_data: 'end_learning' }]
            ]
        }
    };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é
async function showMainMenu(chatId, text = '') {
    try {
        if (text && text.trim() !== '') {
            return await bot.sendMessage(chatId, text, getMainMenu());
        } else {
            return await bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', getMainMenu());
        }
    } catch (error) {
        optimizedLog('‚ùå Error showing main menu:', error);
        try {
            await bot.sendMessage(chatId, text || '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:');
        } catch (e) {
            optimizedLog('‚ùå Critical error sending message:', e);
        }
    }
}

// ‚úÖ –§–£–ù–ö–¶–ò–Ø: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å JSON —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
async function saveWordWithMeanings(chatId, userState, selectedTranslations) {
    optimizedLog('üíæ Saving word with meanings:', { 
        word: userState.tempWord, 
        selectedTranslations: selectedTranslations 
    });
    
    let success = true;
    
    if (servicesInitialized && sheetsService.initialized) {
        try {
            const existingWords = await getCachedUserWords(chatId);
            const isDuplicate = existingWords.some(word => 
                word.english.toLowerCase() === userState.tempWord.toLowerCase()
            );
            
            if (isDuplicate) {
                await showMainMenu(chatId, 
                    `‚ùå –°–ª–æ–≤–æ "${userState.tempWord}" —É–∂–µ –µ—Å—Ç—å –≤ –≤–∞—à–µ–º —Å–ª–æ–≤–∞—Ä–µ!\n\n` +
                    '–ö–∞–∂–¥–æ–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–æ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑.'
                );
                userStates.delete(chatId);
                return;
            }
        } catch (error) {
            optimizedLog('‚ùå Error checking duplicates:', error);
        }

        const meaningsData = [];
        selectedTranslations.forEach(translation => {
            const cambridgeMeanings = userState.meanings.filter(
                meaning => meaning.translation === translation
            );
            
            if (cambridgeMeanings.length === 0) {
                meaningsData.push({
                    translation: translation,
                    example: '',
                    partOfSpeech: '',
                    definition: ''
                });
            } else {
                cambridgeMeanings.forEach(meaning => {
                    meaningsData.push({
                        translation: translation,
                        example: meaning.examples && meaning.examples.length > 0 ? meaning.examples[0].english : '',
                        partOfSpeech: meaning.partOfSpeech || '',
                        definition: meaning.englishDefinition || ''
                    });
                });
            }
        });

        optimizedLog('üìù Meanings data for JSON:', meaningsData);

        success = await sheetsService.addWordWithMeanings(
            chatId,
            userState.tempWord,
            userState.tempTranscription,
            userState.tempAudioUrl,
            meaningsData
        );
    }

    userStates.delete(chatId);

    if (success) {
        const transcriptionText = userState.tempTranscription ? ` [${userState.tempTranscription}]` : '';
        let successMessage = '‚úÖ –°–ª–æ–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–ª–æ–≤–∞—Ä—å!\n\n' +
            `üí¨ **${userState.tempWord}**${transcriptionText}\n\n` +
            '**–î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:**\n';
        
        selectedTranslations.forEach((translation, index) => {
            successMessage += `\n${index + 1}. ${translation}`;
        });
        
        successMessage += '\n\nüìö –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏–∑—É—á–∞—Ç—å —Å–ª–æ–≤–æ –≤ —Ä–∞–∑–¥–µ–ª–µ "üÜï –ù–æ–≤—ã–µ —Å–ª–æ–≤–∞"!';
        await showMainMenu(chatId, successMessage);
    } else {
        await showMainMenu(chatId, 
            '‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è\n\n' +
            '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–ª–æ–≤–æ –≤ —Å–ª–æ–≤–∞—Ä—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.'
        );
    }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞ –±–µ–∑ –ø—Ä–∏–º–µ—Ä–∞
async function processCustomTranslationWithoutExample(chatId, userState) {
    const newTranslations = [userState.customTranslation, ...userState.tempTranslations];
    const newMeaning = {
        translation: userState.customTranslation,
        englishDefinition: '',
        examples: []
    };
    const newMeanings = [newMeaning, ...userState.meanings];
    
    userStates.set(chatId, {
        ...userState,
        state: 'choosing_translation',
        tempTranslations: newTranslations,
        meanings: newMeanings,
        selectedTranslationIndices: [0]
    });

    const successMessage = `‚úÖ –í–∞—à –ø–µ—Ä–µ–≤–æ–¥ "${userState.customTranslation}" –¥–æ–±–∞–≤–ª–µ–Ω!\n\n` +
        'üéØ –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥—ã –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å:\n' +
        '‚úÖ –í–∞—à –ø–µ—Ä–µ–≤–æ–¥ –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã–π';
    
    await bot.sendMessage(chatId, successMessage, 
        getTranslationSelectionKeyboard(newTranslations, newMeanings, [0])
    );
    await showMainMenu(chatId);
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞ —Å –ø—Ä–∏–º–µ—Ä–æ–º
async function processCustomTranslationWithExample(chatId, userState, example) {
    const newTranslations = [userState.customTranslation, ...userState.tempTranslations];
    const newMeaning = {
        translation: userState.customTranslation,
        englishDefinition: '',
        examples: example ? [{ english: example, russian: '' }] : []
    };
    const newMeanings = [newMeaning, ...userState.meanings];
    
    userStates.set(chatId, {
        ...userState,
        state: 'choosing_translation',
        tempTranslations: newTranslations,
        meanings: newMeanings,
        selectedTranslationIndices: [0]
    });

    let successMessage = `‚úÖ –í–∞—à –ø–µ—Ä–µ–≤–æ–¥ "${userState.customTranslation}" –¥–æ–±–∞–≤–ª–µ–Ω!\n\n`;
    if (example) {
        successMessage += `üìù –ü—Ä–∏–º–µ—Ä: ${example}\n\n`;
    }
    successMessage += 'üéØ –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥—ã –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å:\n' +
        '‚úÖ –í–∞—à –ø–µ—Ä–µ–≤–æ–¥ –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã–π';
    
    await bot.sendMessage(chatId, successMessage, 
        getTranslationSelectionKeyboard(newTranslations, newMeanings, [0])
    );
    await showMainMenu(chatId);
}

// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü—Ä–æ–≤–µ—Ä–∫–∞ –µ—Å—Ç—å –ª–∏ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
async function hasWordsForReview(userId) {
    if (!servicesInitialized || !sheetsService.initialized) {
        return false;
    }
    
    try {
        const userWords = await getCachedUserWords(userId);
        const now = new Date();
        
        const hasReviewWords = userWords.some(word => {
            if (!word.nextReview || word.status !== 'active') return false;
            
            try {
                const nextReviewDate = new Date(word.nextReview);
                return nextReviewDate <= now;
            } catch (error) {
                optimizedLog(`‚ùå Error checking word "${word.english}"`);
                return false;
            }
        });

        return hasReviewWords;
        
    } catch (error) {
        optimizedLog('‚ùå Error checking words for review:', error.message);
        return false;
    }
}

// –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –±–∞—Ç—á–∏–Ω–≥ –Ω–æ—Ç–∏—Ñ–∏–∫–∞—Ü–∏–π
async function sendBatchNotifications(userIds) {
    const BATCH_SIZE = 10;
    const DELAY_BETWEEN_BATCHES = 2000;
    
    for (let i = 0; i < userIds.length; i += BATCH_SIZE) {
        const batch = userIds.slice(i, i + BATCH_SIZE);
        
        await Promise.allSettled(
            batch.map(chatId => sendReviewNotification(chatId))
        );
        
        if (i + BATCH_SIZE < userIds.length) {
            await new Promise(resolve => setTimeout(resolve, DELAY_BETWEEN_BATCHES));
        }
    }
}

// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ—Ç–∏—Ñ–∏–∫–∞—Ü–∏–π
async function checkAndSendNotifications() {
    optimizedLog('üîî Checking notifications for all users...');
    
    if (!servicesInitialized || !sheetsService.initialized) {
        optimizedLog('‚ùå Sheets service not initialized, skipping notifications');
        return;
    }
    
    try {
        const activeUsers = await sheetsService.getAllActiveUsers();
        optimizedLog(`üìã Found ${activeUsers.length} active users`);
        
        // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –±–∞—Ç—á–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        const userWordsMap = await sheetsService.getMultipleUsersWords(activeUsers);
        
        let sentCount = 0;
        const notificationPromises = [];
        
        for (const userId of activeUsers) {
            try {
                const userScheduler = notificationScheduler.get(userId);
                if (userScheduler?.disabled) {
                    optimizedLog(`‚è∏Ô∏è Notifications disabled for today for user ${userId}`);
                    continue;
                }
                
                const today = new Date().toDateString();
                if (userScheduler?.date === today && userScheduler?.sent) {
                    optimizedLog(`‚úÖ Notification already sent today for user ${userId}`);
                    continue;
                }
                
                const userWords = userWordsMap.get(userId) || [];
                const hasReviewWords = userWords.some(word => {
                    if (!word.nextReview || word.status !== 'active') return false;
                    try {
                        const nextReviewDate = new Date(word.nextReview);
                        return nextReviewDate <= new Date();
                    } catch (error) {
                        return false;
                    }
                });
                
                if (hasReviewWords) {
                    notificationPromises.push(sendReviewNotification(userId));
                }
                
            } catch (userError) {
                optimizedLog(`‚ùå Error processing user ${userId}:`, userError);
            }
        }
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –±–∞—Ç—á–∞–º–∏
        const results = await Promise.allSettled(notificationPromises);
        sentCount = results.filter(r => r.status === 'fulfilled' && r.value).length;
        
        optimizedLog(`üì¢ Notification check completed: ${sentCount} sent`);
        
    } catch (error) {
        optimizedLog('‚ùå Error in notification check:', error);
    }
}

// –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: —É–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–æ—Ç–∏—Ñ–∏–∫–∞—Ü–∏–π
let lastNotificationCheck = 0;
function startOptimizedNotifications() {
    optimizedLog('üí∞ –ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–æ—Ç–∏—Ñ–∏–∫–∞—Ü–∏–π...');
    
    // –û—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞ –≤–º–µ—Å—Ç–æ 30 –º–∏–Ω—É—Ç
    setInterval(async () => {
        const now = Date.now();
        if (now - lastNotificationCheck >= 2 * 60 * 60 * 1000) {
            await checkAndSendNotifications().catch(console.error);
            lastNotificationCheck = now;
        }
    }, 60 * 1000);
    
    scheduleMorningNotification();
    scheduleActiveHoursNotifications();
}

function scheduleActiveHoursNotifications() {
    const now = new Date();
    const nextCheck = new Date();
    
    nextCheck.setHours(9, 0, 0, 0);
    if (now >= nextCheck) {
        nextCheck.setDate(nextCheck.getDate() + 1);
    }
    
    const timeUntilCheck = nextCheck.getTime() - now.getTime();
    
    setTimeout(() => {
        let checkCount = 0;
        const dayInterval = setInterval(() => {
            const currentHour = new Date().getHours();
            if (currentHour >= 9 && currentHour <= 21) {
                checkAndSendNotifications().catch(console.error);
                checkCount++;
                
                if (checkCount >= 4 || currentHour >= 21) {
                    clearInterval(dayInterval);
                    scheduleActiveHoursNotifications();
                }
            }
        }, 4 * 60 * 60 * 1000);
        
    }, timeUntilCheck);
}

// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ—Ç–∏—Ñ–∏–∫–∞—Ü–∏–π –æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–∏
async function sendReviewNotification(chatId) {
    try {
        const hasWords = await hasWordsForReview(chatId);
        
        if (hasWords) {
            const wordsCount = await sheetsService.getReviewWordsCount(chatId);
            const userWords = await getCachedUserWords(chatId);
            
            const newWords = userWords.filter(word => word.interval === 1).length;
            const reviewWords = userWords.filter(word => word.interval > 1).length;
            
            let message = 'üîî **–í—Ä–µ–º—è —É—á–∏—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–π!**\n\n';
            
            if (wordsCount > 0) {
                message += `üìö **–ì–æ—Ç–æ–≤–æ –∫ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—é:** ${wordsCount} —Å–ª–æ–≤\n`;
            }
            
            if (newWords > 0) {
                message += `üÜï **–ù–æ–≤—ã—Ö —Å–ª–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–æ:** ${newWords}\n`;
            }
            
            message += `\nüí™ **–ü–æ—Ç—Ä–∞—Ç—å—Ç–µ –≤—Å–µ–≥–æ 5-10 –º–∏–Ω—É—Ç:**\n`;
            message += `‚Ä¢ –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∏–∑—É—á–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞\n`;
            message += `‚Ä¢ –ò–∑—É—á–∏—Ç–µ –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞\n`;
            message += `‚Ä¢ –£–∫—Ä–µ–ø–∏—Ç–µ –ø–∞–º—è—Ç—å\n\n`;
            
            message += '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:';
            
            const keyboard = {
                reply_markup: {
                    inline_keyboard: []
                }
            };
            
            if (wordsCount > 0) {
                keyboard.reply_markup.inline_keyboard.push([
                    { text: `üìö –ü–æ–≤—Ç–æ—Ä–∏—Ç—å —Å–ª–æ–≤–∞ (${wordsCount})`, callback_data: 'start_review_from_notification' }
                ]);
            }
            
            if (newWords > 0) {
                keyboard.reply_markup.inline_keyboard.push([
                    { text: `üÜï –ò–∑—É—á–∏—Ç—å –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞ (${newWords})`, callback_data: 'start_learning_from_notification' }
                ]);
            }
            
            keyboard.reply_markup.inline_keyboard.push([
                { text: '‚è∞ –ù–∞–ø–æ–º–Ω–∏—Ç—å –ø–æ–∑–∂–µ', callback_data: 'snooze_notification' },
                { text: 'üö´ –û—Ç–∫–ª—é—á–∏—Ç—å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è', callback_data: 'disable_today' }
            ]);
            
            await bot.sendMessage(chatId, message, keyboard);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–ø—Ä–∞–≤–∫–∏
            const today = new Date().toDateString();
            notificationScheduler.set(chatId, {
                date: today,
                sent: true,
                disabled: false
            });
            
            optimizedLog(`‚úÖ Sent notification to ${chatId}: ${wordsCount} words for review, ${newWords} new words`);
            return true;
        } else {
            optimizedLog(`‚ÑπÔ∏è No words for review for ${chatId}, skipping notification`);
            return false;
        }
    } catch (error) {
        optimizedLog('‚ùå Error sending review notification:', error);
        return false;
    }
}

// ‚úÖ –£–õ–£–ß–®–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –£—Ç—Ä–µ–Ω–Ω—è—è –Ω–æ—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
function scheduleMorningNotification() {
    const now = new Date();
    const nextMorning = new Date();
    
    nextMorning.setHours(9, 0, 0, 0);
    
    if (now >= nextMorning) {
        nextMorning.setDate(nextMorning.getDate() + 1);
    }
    
    const timeUntilMorning = nextMorning.getTime() - now.getTime();
    
    optimizedLog(`‚è∞ Morning notification scheduled for ${nextMorning.toLocaleString()}`);
    
    setTimeout(() => {
        optimizedLog('üåÖ Sending morning notifications...');
        checkAndSendNotifications();
        scheduleMorningNotification();
    }, timeUntilMorning);
}

// ‚úÖ –§–£–ù–ö–¶–ò–Ø: –ù–∞—á–∞–ª–æ —Å–µ—Å—Å–∏–∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
async function startReviewSession(chatId) {
    await initializeServices();
    
    if (!sheetsService.initialized) {
        await bot.sendMessage(chatId, '‚ùå Google Sheets –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.');
        return;
    }

    try {
        const wordsToReview = await sheetsService.getWordsForReview(chatId);
        
        if (wordsToReview.length === 0) {
            await bot.sendMessage(chatId, 
                'üéâ –û—Ç–ª–∏—á–Ω–æ! –ù–∞ —Å–µ–≥–æ–¥–Ω—è —Å–ª–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –Ω–µ—Ç.\n\n' +
                '–í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∑–∞–≤—Ç—Ä–∞ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π —Å–µ—Å—Å–∏–∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è.'
            );
            return;
        }

        userStates.set(chatId, {
            state: 'review_session',
            reviewWords: wordsToReview,
            currentReviewIndex: 0,
            reviewedCount: 0,
            lastActivity: Date.now()
        });

        await showNextReviewWord(chatId);
        
    } catch (error) {
        optimizedLog('‚ùå Error starting review session:', error);
        await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ª–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è.');
    }
}

// ‚úÖ –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü–æ–∫–∞–∑ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
async function showNextReviewWord(chatId) {
    const userState = userStates.get(chatId);
    if (!userState || userState.state !== 'review_session') return;

    const { reviewWords, currentReviewIndex, reviewedCount } = userState;
    
    if (currentReviewIndex >= reviewWords.length) {
        userState.currentReviewIndex = 0;
    }

    const word = reviewWords[userState.currentReviewIndex];
    const progress = `${userState.currentReviewIndex + 1}/${reviewWords.length} (${userState.reviewedCount} –æ—Ü–µ–Ω–µ–Ω–æ)`;
    
    let message = `üìö –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ —Å–ª–æ–≤ ${progress}\n\n`;
    message += `üá¨üáß **${word.english}**\n`;
    
    if (word.transcription) {
        message += `üî§ ${word.transcription}\n`;
    }
    
    message += `\nüí° –í—Å–ø–æ–º–Ω–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ –∏ –Ω–∞–∂–º–∏—Ç–µ "–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç"`;

    await bot.sendMessage(chatId, message, {
        reply_markup: {
            inline_keyboard: [
                [{ text: 'üëÄ –ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç', callback_data: 'show_answer' }],
                [{ text: '‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data: 'skip_review' }],
                [{ text: '‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ', callback_data: 'end_review' }]
            ]
        }
    });
}

// ‚úÖ –§–£–ù–ö–¶–ò–Ø: –ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
async function showReviewAnswer(chatId) {
    const userState = userStates.get(chatId);
    if (!userState || userState.state !== 'review_session') return;

    const word = userState.reviewWords[userState.currentReviewIndex];
    
    let message = `üìö **–û—Ç–≤–µ—Ç:**\n\n`;
    message += `üá¨üáß **${word.english}**\n`;
    
    if (word.transcription) {
        message += `üî§ ${word.transcription}\n`;
    }
    
    message += `\nüá∑üá∫ **–ü–µ—Ä–µ–≤–æ–¥—ã:**\n`;
    word.meanings.forEach((meaning, index) => {
        message += `\n${index + 1}. ${meaning.translation}`;
        if (meaning.definition) {
            message += ` - ${meaning.definition}`;
        }
        if (meaning.example && meaning.example.trim() !== '') {
            message += `\n   üìù *–ü—Ä–∏–º–µ—Ä:* ${meaning.example}`;
        }
    });

    if (word.audioUrl) {
        try {
            await bot.sendAudio(chatId, word.audioUrl, {
                caption: 'üîä –ü—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ'
            });
        } catch (error) {
            optimizedLog('‚ùå Audio not available for review word');
        }
    }

    await bot.sendMessage(chatId, message, getReviewKeyboard());
}

// ‚úÖ –§–£–ù–ö–¶–ò–Ø: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ü–µ–Ω–∫–∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
async function processReviewRating(chatId, rating) {
    const userState = userStates.get(chatId);
    if (!userState || userState.state !== 'review_session') return;

    const word = userState.reviewWords[userState.currentReviewIndex];
    
    try {
        const cardData = {
            due: new Date(word.nextReview),
            stability: word.stability || 0,
            difficulty: word.difficulty || 0,
            elapsed_days: word.elapsed_days || 0,
            scheduled_days: word.scheduled_days || 0,
            reps: word.reps || 0,
            lapses: word.lapses || 0,
            state: word.state || 0,
            last_review: word.last_review ? new Date(word.last_review) : undefined
        };

        const fsrsData = fsrsService.reviewCard(cardData, rating);

        // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞—Ç—á–∏–Ω–≥ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        const success = await batchSheetsService.updateWordReviewBatch(
            chatId,
            word.english,
            fsrsData.card.interval || word.interval,
            fsrsData.card.due || word.nextReview,
            new Date()
        );

        if (success) {
            userState.reviewedCount++;
            userState.currentReviewIndex++;
            userState.lastActivity = Date.now();
            
            if (userState.currentReviewIndex >= userState.reviewWords.length) {
                userState.currentReviewIndex = 0;
            }
            
            await showNextReviewWord(chatId);
        } else {
            await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.');
        }

    } catch (error) {
        optimizedLog('‚ùå Error processing review rating:', error);
        await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ü–µ–Ω–∫–∏.');
    }
}

// ‚úÖ –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
async function completeReviewSession(chatId, userState) {
    const totalWords = userState.reviewWords.length;
    const reviewedCount = userState.reviewedCount;
    
    userStates.delete(chatId);

    let message = 'üéâ **–°–µ—Å—Å–∏—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**\n\n';
    message += `üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n`;
    message += `‚Ä¢ –í—Å–µ–≥–æ —Å–ª–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è: ${totalWords}\n`;
    message += `‚Ä¢ –ü–æ–≤—Ç–æ—Ä–µ–Ω–æ: ${reviewedCount}\n`;
    
    if (reviewedCount > 0) {
        const progressPercentage = Math.round((reviewedCount / totalWords) * 100);
        message += `‚Ä¢ –ü—Ä–æ–≥—Ä–µ—Å—Å: ${progressPercentage}%\n\n`;
    } else {
        message += `\n`;
    }
    
    message += `üí° –í—ã –º–æ–∂–µ—Ç–µ:\n`;
    message += `‚Ä¢ –ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è\n`;
    message += `‚Ä¢ –ò–∑—É—á–∏—Ç—å –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞\n`;
    message += `‚Ä¢ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n`;
    
    await bot.sendMessage(chatId, message, getMainMenu());
}

// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ù–∞—á–∞–ª–æ —Å–µ—Å—Å–∏–∏ –∏–∑—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Å–ª–æ–≤
async function startNewWordsSession(chatId) {
    await initializeServices();
    
    if (!sheetsService.initialized) {
        await bot.sendMessage(chatId, '‚ùå Google Sheets –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.');
        return;
    }

    try {
        const learnedToday = await getLearnedToday(chatId);
        const DAILY_LIMIT = 5;
        
        optimizedLog(`üîç –°—Ç–∞—Ä—Ç —Å–µ—Å—Å–∏–∏ –∏–∑—É—á–µ–Ω–∏—è –¥–ª—è ${chatId}, –∏–∑—É—á–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è: ${learnedToday}/${DAILY_LIMIT}`);

        if (learnedToday >= DAILY_LIMIT) {
            await bot.sendMessage(chatId, 
                `üéâ –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞!\n\n` +
                `üìä –ò–∑—É—á–µ–Ω–æ —Å–ª–æ–≤ —Å–µ–≥–æ–¥–Ω—è: ${learnedToday}/${DAILY_LIMIT}\n\n` +
                'üí° –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∑–∞–≤—Ç—Ä–∞ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Å–ª–æ–≤!\n' +
                'üìö –ú–æ–∂–µ—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —É–∂–µ –∏–∑—É—á–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞\n\n' +
                'üîÑ –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /reset_progress —á—Ç–æ–±—ã —Å–±—Ä–æ—Å–∏—Ç—å –ª–∏–º–∏—Ç'
            );
            return;
        }

        const availableNewWords = await getAvailableNewWordsForToday(chatId, learnedToday);
        
        if (availableNewWords.length === 0) {
            await bot.sendMessage(chatId, 
                `üéâ –ù–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–æ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –Ω–µ—Ç!\n\n` +
                `üìä –ò–∑—É—á–µ–Ω–æ —Å–ª–æ–≤ —Å–µ–≥–æ–¥–Ω—è: ${learnedToday}/${DAILY_LIMIT}\n\n` +
                'üí° –í—ã –º–æ–∂–µ—Ç–µ:\n' +
                '‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –º–µ–Ω—é "‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ"\n' +
                '‚Ä¢ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å —É–∂–µ –∏–∑—É—á–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞\n' +
                '‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /reset_progress —á—Ç–æ–±—ã —Å–±—Ä–æ—Å–∏—Ç—å –ª–∏–º–∏—Ç'
            );
            return;
        }

        userStates.set(chatId, {
            state: 'learning_new_words',
            newWords: availableNewWords,
            currentWordIndex: 0,
            learnedCount: 0,
            originalWordsCount: availableNewWords.length,
            lastActivity: Date.now()
        });

        optimizedLog(`üéØ –ù–∞—á–∞—Ç–∞ —Å–µ—Å—Å–∏—è –∏–∑—É—á–µ–Ω–∏—è –¥–ª—è ${chatId}, –¥–æ—Å—Ç—É–ø–Ω–æ —Å–ª–æ–≤: ${availableNewWords.length}`);
        await showNextNewWord(chatId);
        
    } catch (error) {
        optimizedLog('‚ùå Error starting new words session:', error);
        await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–æ–≤—ã—Ö —Å–ª–æ–≤.');
    }
}

// ‚úÖ –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–æ–≤—ã—Ö —Å–ª–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
async function getAvailableNewWordsForToday(chatId, alreadyLearnedToday) {
    if (!servicesInitialized || !sheetsService.initialized) {
        return [];
    }
    
    try {
        const userWords = await getCachedUserWords(chatId);
        const DAILY_LIMIT = 5;
        
        optimizedLog(`üîç –ü–æ–∏—Å–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–æ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è ${chatId}, —É–∂–µ –∏–∑—É—á–µ–Ω–æ: ${alreadyLearnedToday}`);

        const unlearnedWords = userWords.filter(word => {
            if (!word.nextReview || word.status !== 'active') return false;
            
            try {
                const isNewWord = word.interval === 1;
                const isNotLearned = !isWordLearned(chatId, word.english);
                return isNewWord && isNotLearned;
            } catch (error) {
                optimizedLog(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–ª–æ–≤–∞ "${word.english}"`);
                return false;
            }
        });

        optimizedLog(`üìä –ù–∞–π–¥–µ–Ω–æ –Ω–µ –∏–∑—É—á–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤: ${unlearnedWords.length}`);

        unlearnedWords.sort((a, b) => new Date(b.createdDate) - new Date(a.createdDate));

        const remainingSlots = Math.max(0, DAILY_LIMIT - alreadyLearnedToday);
        const result = unlearnedWords.slice(0, remainingSlots);
        
        optimizedLog(`üéØ –ë—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω–æ: ${result.length} —Å–ª–æ–≤ (–æ—Å—Ç–∞–ª–æ—Å—å —Å–ª–æ—Ç–æ–≤: ${remainingSlots})`);
        return result;
        
    } catch (error) {
        optimizedLog('‚ùå Error getting available new words:', error);
        return [];
    }
}

// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü–æ–∫–∞–∑ —Å–ª–µ–¥—É—é—â–µ–≥–æ –Ω–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞
async function showNextNewWord(chatId) {
    const userState = userStates.get(chatId);
    if (!userState || userState.state !== 'learning_new_words') return;

    const { newWords, currentWordIndex } = userState;
    
    if (newWords.length === 0) {
        await completeNewWordsSession(chatId, userState);
        return;
    }

    if (currentWordIndex >= newWords.length) {
        userState.currentWordIndex = 0;
    }

    const word = newWords[userState.currentWordIndex];
    
    const currentLearnedToday = await getLearnedToday(chatId);
    const remainingSlots = Math.max(0, 5 - currentLearnedToday);
    
    const currentPosition = userState.currentWordIndex + 1;
    const totalWords = newWords.length;
    const progress = `${currentPosition}/${totalWords}`;
    
    let message = `üÜï –ò–∑—É—á–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Å–ª–æ–≤ ${progress}\n\n`;
    message += `üìä –ò–∑—É—á–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è: ${currentLearnedToday}/5\n\n`;
    message += `üá¨üáß **${word.english}**\n`;
    
    if (word.transcription) {
        message += `üî§ ${word.transcription}\n`;
    }
    
    message += `\nüá∑üá∫ **–ü–µ—Ä–µ–≤–æ–¥—ã:**\n`;
    
    word.meanings.forEach((meaning, index) => {
        message += `\n${index + 1}. ${meaning.translation}`;
        if (meaning.definition) {
            message += ` - ${meaning.definition}`;
        }
        
        if (meaning.example && meaning.example.trim() !== '') {
            message += `\n   üìù *–ü—Ä–∏–º–µ—Ä:* ${meaning.example}`;
        }
    });

    if (word.audioUrl) {
        try {
            await bot.sendAudio(chatId, word.audioUrl, {
                caption: 'üîä –ü—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ'
            });
        } catch (error) {
            optimizedLog('‚ùå Audio not available for new word');
        }
    }

    await bot.sendMessage(chatId, message, getNewWordsKeyboard());
}

// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞
async function processNewWordLearning(chatId, action) {
    const userState = userStates.get(chatId);
    if (!userState || userState.state !== 'learning_new_words') return;

    const word = userState.newWords[userState.currentWordIndex];
    
    try {
        if (action === 'learned') {
            const newInterval = 2;
            const nextReview = new Date(Date.now() + newInterval * 24 * 60 * 60 * 1000);
            const today = new Date();
            
            optimizedLog(`üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–ª–æ–≤–∞ "${word.english}" –∫–∞–∫ –∏–∑—É—á–µ–Ω–Ω–æ–≥–æ —Å–µ–≥–æ–¥–Ω—è: ${today}`);
            
            // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞—Ç—á–∏–Ω–≥ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            const success = await batchSheetsService.updateWordReviewBatch(
                chatId,
                word.english,
                newInterval,
                nextReview,
                today
            );

            if (success) {
                userState.learnedCount++;
                markWordAsLearned(chatId, word.english);
                optimizedLog(`üìö –°–ª–æ–≤–æ "${word.english}" –∏–∑—É—á–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è: ${today}`);
                
                userState.newWords.splice(userState.currentWordIndex, 1);
                
                optimizedLog(`‚úÖ –°–ª–æ–≤–æ "${word.english}" —É–¥–∞–ª–µ–Ω–æ –∏–∑ —Å–ø–∏—Å–∫–∞. –û—Å—Ç–∞–ª–æ—Å—å —Å–ª–æ–≤: ${userState.newWords.length}`);
                
                const currentLearnedToday = await getLearnedToday(chatId);
                optimizedLog(`üìà –ü–æ—Å–ª–µ –∏–∑—É—á–µ–Ω–∏—è "${word.english}": ${currentLearnedToday}/5 –∏–∑—É—á–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è`);
                
                if (currentLearnedToday >= 5) {
                    await bot.sendMessage(chatId, 
                        `üéâ –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞ –≤ 5 —Å–ª–æ–≤!\n\n` +
                        `üìä –ò–∑—É—á–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è: ${currentLearnedToday}/5\n\n` +
                        'üí° –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∑–∞–≤—Ç—Ä–∞ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Å–ª–æ–≤.'
                    );
                    await completeNewWordsSession(chatId, userState);
                    return;
                }
                
            } else {
                optimizedLog(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è —Å–ª–æ–≤–∞ "${word.english}"`);
                await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å–ª–æ–≤–∞.');
                return;
            }
            
        } else if (action === 'repeat') {
            optimizedLog(`üîÑ –°–ª–æ–≤–æ "${word.english}" –æ—Å—Ç–∞–ª–æ—Å—å –≤ –Ω–æ–≤—ã—Ö —Å–ª–æ–≤–∞—Ö –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è`);
            userState.currentWordIndex++;
            userState.lastActivity = Date.now();
            
        } else if (action === 'skip') {
            const skippedWord = userState.newWords.splice(userState.currentWordIndex, 1)[0];
            userState.newWords.push(skippedWord);
            optimizedLog(`‚è≠Ô∏è –°–ª–æ–≤–æ "${skippedWord.english}" –ø—Ä–æ–ø—É—â–µ–Ω–æ –∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–æ –≤ –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞`);
            userState.lastActivity = Date.now();
        }
        
        if (userState.currentWordIndex >= userState.newWords.length) {
            userState.currentWordIndex = 0;
            optimizedLog(`üîÑ –ò–Ω–¥–µ–∫—Å —Å–±—Ä–æ—à–µ–Ω –≤ 0 (–¥–æ—Å—Ç–∏–≥–Ω—É—Ç –∫–æ–Ω–µ—Ü –º–∞—Å—Å–∏–≤–∞)`);
        }
        
        if (userState.newWords.length === 0) {
            optimizedLog(`üéØ –í—Å–µ —Å–ª–æ–≤–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏`);
            await completeNewWordsSession(chatId, userState);
            return;
        }
        
        optimizedLog(`üîÑ –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–ª–æ–≤—É. –¢–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å: ${userState.currentWordIndex}, –≤—Å–µ–≥–æ —Å–ª–æ–≤: ${userState.newWords.length}`);
        await showNextNewWord(chatId);

    } catch (error) {
        optimizedLog('‚ùå Error processing new word learning:', error);
        await bot.sendMessage(chatId, 
            '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.\n' +
            '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /debug_stats –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏.'
        );
    }
}

// ‚úÖ –û–ë–ù–û–í–õ–Ø–ï–ú –§–£–ù–ö–¶–ò–Æ: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –∏–∑—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Å–ª–æ–≤
async function completeNewWordsSession(chatId, userState) {
    const currentLearnedToday = await getLearnedToday(chatId);
    const originalWordsCount = userState.originalWordsCount || (userState.newWords ? userState.newWords.length + userState.learnedCount : userState.learnedCount);
    const learnedCount = userState.learnedCount;
    
    userStates.delete(chatId);

    let message = 'üéâ **–°–µ—Å—Å–∏—è –∏–∑—É—á–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**\n\n';
    message += `üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n`;
    message += `‚Ä¢ –í—Å–µ–≥–æ –Ω–æ–≤—ã—Ö —Å–ª–æ–≤: ${originalWordsCount}\n`;
    message += `‚Ä¢ –ò–∑—É—á–µ–Ω–æ –≤ —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏: ${learnedCount}\n`;
    message += `‚Ä¢ –í—Å–µ–≥–æ –∏–∑—É—á–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è: ${currentLearnedToday}/5\n`;
    message += `‚Ä¢ –û—Ç–ª–æ–∂–µ–Ω–æ: ${originalWordsCount - learnedCount}\n\n`;
    
    if (currentLearnedToday >= 5) {
        message += `‚úÖ –î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –¥–æ—Å—Ç–∏–≥–Ω—É—Ç!\n`;
        message += `üí° –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∑–∞–≤—Ç—Ä–∞ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Å–ª–æ–≤.\n\n`;
    } else if (learnedCount === originalWordsCount && originalWordsCount > 0) {
        message += `üí™ –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –í—ã –∏–∑—É—á–∏–ª–∏ –≤—Å–µ –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞!\n\n`;
        message += `üîÑ –≠—Ç–∏ —Å–ª–æ–≤–∞ –ø–æ—è–≤—è—Ç—Å—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –∑–∞–≤—Ç—Ä–∞.`;
    } else if (originalWordsCount > 0) {
        message += `üí° –û—Å—Ç–∞–≤—à–∏–µ—Å—è —Å–ª–æ–≤–∞ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑.\n\n`;
    }
    
    const reviewWordsCount = await sheetsService.getReviewWordsCount(chatId);
    if (reviewWordsCount > 0) {
        message += `\nüìö –°–ª–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è: ${reviewWordsCount}\n`;
        message += `–ú–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –º–µ–Ω—é!`;
    }
    
    await bot.sendMessage(chatId, message, getMainMenu());
}

// ‚úÖ –û–ë–ù–û–í–õ–Ø–ï–ú –§–£–ù–ö–¶–ò–Æ: –ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å –≤—Ä–µ–º–µ–Ω–µ–º
async function showUserStats(chatId) {
    await initializeServices();
    
    if (!sheetsService.initialized) {
        await bot.sendMessage(chatId, '‚ùå Google Sheets –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.');
        return;
    }

    try {
        const userWords = await getCachedUserWords(chatId);
        const activeWords = userWords.filter(word => word.status === 'active');
        const reviewWordsCount = await sheetsService.getReviewWordsCount(chatId);
        
        const unlearnedWords = await getAllUnlearnedWords(chatId);
        const newWordsCount = unlearnedWords.length;
        
        const learnedToday = await getLearnedToday(chatId);
        const DAILY_LIMIT = 5;
        const remainingToday = Math.max(0, DAILY_LIMIT - learnedToday);
        
        let message = 'üìä **–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n\n';
        message += `üìö –í—Å–µ–≥–æ —Å–ª–æ–≤ –≤ —Å–ª–æ–≤–∞—Ä–µ: ${activeWords.length}\n`;
        message += `üîÑ –°–ª–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è: ${reviewWordsCount}\n`;
        message += `üÜï –ù–æ–≤—ã—Ö —Å–ª–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–æ: ${newWordsCount}\n`;
        message += `üìÖ –ò–∑—É—á–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è: ${learnedToday}/${DAILY_LIMIT}\n`;
        
        if (remainingToday > 0) {
            message += `üéØ –û—Å—Ç–∞–ª–æ—Å—å –∏–∑—É—á–∏—Ç—å —Å–µ–≥–æ–¥–Ω—è: ${remainingToday} —Å–ª–æ–≤\n`;
        } else {
            message += `‚úÖ –î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –¥–æ—Å—Ç–∏–≥–Ω—É—Ç!\n`;
        }
        
        if (activeWords.length > 0) {
            const now = new Date();
            
            const wordsWithFutureReview = activeWords
                .filter(word => word.interval > 1 && word.nextReview)
                .map(word => {
                    try {
                        const nextReview = new Date(word.nextReview);
                        const daysUntil = Math.ceil((nextReview - now) / (1000 * 60 * 60 * 24));
                        return { word: word.english, daysUntil, nextReview };
                    } catch (error) {
                        return null;
                    }
                })
                .filter(item => item !== null && item.daysUntil >= 0)
                .sort((a, b) => a.daysUntil - b.daysUntil);

            if (wordsWithFutureReview.length > 0) {
                const nearestReview = wordsWithFutureReview[0];
                const formattedDate = formatConcreteDate(nearestReview.nextReview);
                message += `\n‚è∞ **–ë–ª–∏–∂–∞–π—à–µ–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ:** ${formattedDate}\n`;
                
                const reviewSchedule = {};
                wordsWithFutureReview.forEach(item => {
                    const dateKey = formatConcreteDate(item.nextReview);
                    reviewSchedule[dateKey] = (reviewSchedule[dateKey] || 0) + 1;
                });

                if (Object.keys(reviewSchedule).length > 0) {
                    message += `\nüìÖ **–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π:**\n`;
                    
                    const sortedDates = Object.keys(reviewSchedule).sort((a, b) => {
                        const dateA = new Date(a.split(' ')[0].split('.').reverse().join('-'));
                        const dateB = new Date(b.split(' ')[0].split('.').reverse().join('-'));
                        return dateA - dateB;
                    });
                    
                    sortedDates.slice(0, 5).forEach(date => {
                        message += `‚Ä¢ ${date}: ${reviewSchedule[date]} —Å–ª–æ–≤\n`;
                    });
                    
                    if (sortedDates.length > 5) {
                        const remainingWords = Object.values(reviewSchedule).slice(5).reduce((a, b) => a + b, 0);
                        message += `‚Ä¢ –ò –µ—â–µ ${remainingWords} —Å–ª–æ–≤ –≤ —Å–ª–µ–¥—É—é—â–∏–µ –¥–Ω–∏\n`;
                    }
                }
            } else {
                message += `\n‚è∞ **–ë–ª–∏–∂–∞–π—à–µ–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ:** –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö\n`;
            }
            
            const intervals = {
                '–ù–æ–≤—ã–µ': 0,
                '–ö–æ—Ä–æ—Ç–∫–∏–µ (2-3–¥)': 0,
                '–°—Ä–µ–¥–Ω–∏–µ (4-7–¥)': 0,
                '–î–æ–ª–≥–∏–µ (8+–¥)': 0
            };
            
            activeWords.forEach(word => {
                const interval = word.interval || 1;
                if (interval === 1) intervals['–ù–æ–≤—ã–µ']++;
                else if (interval <= 3) intervals['–ö–æ—Ä–æ—Ç–∫–∏–µ (2-3–¥)']++;
                else if (interval <= 7) intervals['–°—Ä–µ–¥–Ω–∏–µ (4-7–¥)']++;
                else intervals['–î–æ–ª–≥–∏–µ (8+–¥)']++;
            });
            
            message += `\nüìà **–ò–Ω—Ç–µ—Ä–≤–∞–ª—ã –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è:**\n`;
            message += `‚Ä¢ –ù–æ–≤—ã–µ: ${intervals['–ù–æ–≤—ã–µ']} —Å–ª–æ–≤\n`;
            message += `‚Ä¢ –ö–æ—Ä–æ—Ç–∫–∏–µ: ${intervals['–ö–æ—Ä–æ—Ç–∫–∏–µ (2-3–¥)']} —Å–ª–æ–≤\n`;
            message += `‚Ä¢ –°—Ä–µ–¥–Ω–∏–µ: ${intervals['–°—Ä–µ–¥–Ω–∏–µ (4-7–¥)']} —Å–ª–æ–≤\n`;
            message += `‚Ä¢ –î–æ–ª–≥–∏–µ: ${intervals['–î–æ–ª–≥–∏–µ (8+–¥)']} —Å–ª–æ–≤\n`;
            
            const learnedWordsCount = activeWords.filter(word => word.interval > 1).length;
            const progressPercentage = activeWords.length > 0 
                ? Math.round((learnedWordsCount / activeWords.length) * 100) 
                : 0;
                
            message += `\nüéì **–û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å:** ${learnedWordsCount}/${activeWords.length} (${progressPercentage}%)\n`;
        }
        
        message += `\nüí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**\n`;
        
        if (reviewWordsCount > 0) {
            message += `‚Ä¢ –ù–∞—á–Ω–∏—Ç–µ —Å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è —Å–ª–æ–≤ (${reviewWordsCount} —Å–ª–æ–≤ –∂–¥—É—Ç)\n`;
        }
        
        if (newWordsCount > 0 && remainingToday > 0) {
            message += `‚Ä¢ –ò–∑—É—á–∏—Ç–µ –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞ (–¥–æ—Å—Ç—É–ø–Ω–æ ${Math.min(newWordsCount, remainingToday)} –∏–∑ ${newWordsCount})\n`;
        } else if (newWordsCount > 0) {
            message += `‚Ä¢ –ù–æ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–æ—Å—Ç—É–ø–Ω—ã –∑–∞–≤—Ç—Ä–∞ (${newWordsCount} —Å–ª–æ–≤)\n`;
        }
        
        if (reviewWordsCount === 0 && newWordsCount === 0) {
            message += `üéâ –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –í—Å–µ —Å–ª–æ–≤–∞ –∏–∑—É—á–µ–Ω—ã!\n`;
            message += `‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –º–µ–Ω—é\n`;
        }

        await bot.sendMessage(chatId, message, getMainMenu());
        
    } catch (error) {
        optimizedLog('‚ùå Error showing stats:', error);
        await bot.sendMessage(chatId, 
            '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.\n' +
            '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /debug_progress –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏.'
        );
    }
}

// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–∞—Ç—ã —Å –≤—Ä–µ–º–µ–Ω–µ–º
function formatConcreteDate(date) {
    const now = new Date();
    const targetDate = new Date(date);
    
    const diffTime = targetDate - now;
    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
    const diffHours = Math.ceil(diffTime / (1000 * 60 * 60));
    
    const day = targetDate.getDate().toString().padStart(2, '0');
    const month = (targetDate.getMonth() + 1).toString().padStart(2, '0');
    const year = targetDate.getFullYear();
    
    const hours = targetDate.getHours().toString().padStart(2, '0');
    const minutes = targetDate.getMinutes().toString().padStart(2, '0');
    
    const daysOfWeek = ['–≤—Å', '–ø–Ω', '–≤—Ç', '—Å—Ä', '—á—Ç', '–ø—Ç', '—Å–±'];
    const dayOfWeek = daysOfWeek[targetDate.getDay()];
    
    if (diffDays === 0) {
        if (diffHours <= 1) {
            return `${hours}:${minutes} (—á–µ—Ä–µ–∑ ${diffHours} —á–∞—Å)`;
        } else if (diffHours <= 24) {
            return `${hours}:${minutes} (—á–µ—Ä–µ–∑ ${diffHours} —á–∞—Å–æ–≤)`;
        } else {
            return `${day}.${month}.${year} ${hours}:${minutes}`;
        }
    } else if (diffDays === 1) {
        return `${day}.${month}.${year} ${hours}:${minutes}`;
    } else if (diffDays === 2) {
        return `${day}.${month}.${year} ${hours}:${minutes}`;
    } else if (diffDays <= 7) {
        return `${day}.${month}.${year} ${hours}:${minutes} (${dayOfWeek}, —á–µ—Ä–µ–∑ ${diffDays} –¥–Ω.)`;
    } else {
        return `${day}.${month}.${year} ${hours}:${minutes} (${dayOfWeek})`;
    }
}

// ‚úÖ –î–û–ë–ê–í–õ–Ø–ï–ú –§–£–ù–ö–¶–ò–Æ: –ü–æ–ª—É—á–µ–Ω–∏–µ –í–°–ï–• –Ω–µ –∏–∑—É—á–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤ (–±–µ–∑ —É—á–µ—Ç–∞ –ª–∏–º–∏—Ç–∞)
async function getAllUnlearnedWords(chatId) {
    if (!servicesInitialized || !sheetsService.initialized) {
        return [];
    }
    
    try {
        const userWords = await getCachedUserWords(chatId);
        
        optimizedLog(`üîç –ü–æ–∏—Å–∫ –í–°–ï–• –Ω–µ –∏–∑—É—á–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤ –¥–ª—è ${chatId}`);

        const unlearnedWords = userWords.filter(word => {
            if (!word.nextReview || word.status !== 'active') return false;
            
            try {
                const isNewWord = word.interval === 1;
                const isNotLearned = !isWordLearned(chatId, word.english);
                return isNewWord && isNotLearned;
            } catch (error) {
                optimizedLog(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–ª–æ–≤–∞ "${word.english}"`);
                return false;
            }
        });

        optimizedLog(`üìä –ù–∞–π–¥–µ–Ω–æ –≤—Å–µ—Ö –Ω–µ –∏–∑—É—á–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤: ${unlearnedWords.length}`);
        
        unlearnedWords.sort((a, b) => new Date(b.createdDate) - new Date(a.createdDate));

        return unlearnedWords;
        
    } catch (error) {
        optimizedLog('‚ùå Error getting all unlearned words:', error);
        return [];
    }
}

// ‚úÖ –§–£–ù–ö–¶–ò–Ø: –ü–æ–ª—É—á–µ–Ω–∏–µ –ù–ï –ò–ó–£–ß–ï–ù–ù–´–• —Å–ª–æ–≤
async function getUnlearnedNewWords(chatId) {
    if (!servicesInitialized || !sheetsService.initialized) {
        return [];
    }
    
    try {
        const userWords = await getCachedUserWords(chatId);
        const learnedToday = await getLearnedToday(chatId);
        const DAILY_LIMIT = 5;
        
        optimizedLog(`üîç –ü–æ–∏—Å–∫ –Ω–æ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è ${chatId}, –∏–∑—É—á–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è: ${learnedToday}/${DAILY_LIMIT}`);

        const newWords = userWords.filter(word => {
            if (!word.nextReview || word.status !== 'active') return false;
            
            try {
                const isFirstInterval = word.interval === 1;
                const isNotLearned = !isWordLearned(chatId, word.english);
                
                if (isFirstInterval && isNotLearned) {
                    optimizedLog(`‚úÖ –°–ª–æ–≤–æ "${word.english}" - –Ω–æ–≤–æ–µ –∏ –Ω–µ –∏–∑—É—á–µ–Ω–æ`);
                }
                
                return isFirstInterval && isNotLearned;
            } catch (error) {
                optimizedLog(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–ª–æ–≤–∞ "${word.english}"`);
                return false;
            }
        });

        optimizedLog(`üìä –ù–∞–π–¥–µ–Ω–æ –Ω–µ –∏–∑—É—á–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤: ${newWords.length}`);

        newWords.sort((a, b) => new Date(b.createdDate) - new Date(a.createdDate));

        const remainingSlots = Math.max(0, DAILY_LIMIT - learnedToday);
        const result = newWords.slice(0, remainingSlots);
        
        optimizedLog(`üéØ –ë—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω–æ: ${result.length} —Å–ª–æ–≤ (–æ—Å—Ç–∞–ª–æ—Å—å —Å–ª–æ—Ç–æ–≤: ${remainingSlots})`);
        return result;
        
    } catch (error) {
        optimizedLog('‚ùå Error getting unlearned new words:', error);
        return [];
    }
}

// –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ (—Å–æ–∫—Ä–∞—â–µ–Ω—ã –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –º–µ—Å—Ç–∞)
bot.onText(/\/start/, async (msg) => {
    const chatId = msg.chat.id;
    await initializeServices();
    await showMainMenu(chatId, 
        'üìö –ê–Ω–≥–ª–æ-—Ä—É—Å—Å–∫–∏–π —Å–ª–æ–≤–∞—Ä—å\n' +
        'üî§ –° —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–µ–π –∏ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ–º\n' +
        'üá¨üáß –ë—Ä–∏—Ç–∞–Ω—Å–∫–∏–π –≤–∞—Ä–∏–∞–Ω—Ç\n' +
        'üìù –ö–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ —Ö—Ä–∞–Ω–∏—Ç—Å—è —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏\n' +
        'üîÑ **–£–º–Ω–æ–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–æ–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ**\n' +
        'üîî **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è**\n\n' +
        'üí° **–ö–∞–∫ —É—á–∏—Ç—å —Å–ª–æ–≤–∞:**\n' +
        '1. ‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ\n' +
        '2. üÜï –ò–∑—É—á–∏—Ç—å –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞ (5 –≤ –¥–µ–Ω—å)\n' +
        '3. üìö –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∏–∑—É—á–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞\n\n' +
        '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:'
    );
});

bot.onText(/\/review/, async (msg) => {
    const chatId = msg.chat.id;
    await startReviewSession(chatId);
});

bot.onText(/\/stats/, async (msg) => {
    const chatId = msg.chat.id;
    await showUserStats(chatId);
});

bot.onText(/\/new/, async (msg) => {
    const chatId = msg.chat.id;
    await startNewWordsSession(chatId);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    const text = msg.text;

    if (!text || text.startsWith('/')) {
        return;
    }

    await initializeServices();
    updateUserActivity(chatId);

    const userState = userStates.get(chatId);

    if (text === '‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ') {
        userStates.set(chatId, { state: 'waiting_english', lastActivity: Date.now() });
        await showMainMenu(chatId, 'üá¨üáß –í–≤–µ–¥–∏—Ç–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ:');
    }
    else if (text === 'üìö –ü–æ–≤—Ç–æ—Ä–∏—Ç—å —Å–ª–æ–≤–∞') {
        await startReviewSession(chatId);
    }
    else if (text === 'üÜï –ù–æ–≤—ã–µ —Å–ª–æ–≤–∞') {
        await startNewWordsSession(chatId);
    }
    else if (text === 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞') {
        await showUserStats(chatId);
    }
    else if (userState?.state === 'waiting_english') {
        const englishWord = text.trim().toLowerCase();
        optimizedLog(`üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª–æ–≤–∞: "${englishWord}"`);

        if (!cambridgeService || !yandexService) {
            optimizedLog('‚ùå –°–µ—Ä–≤–∏—Å—ã –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
            await showMainMenu(chatId, '‚ùå –°–µ—Ä–≤–∏—Å—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
            userStates.delete(chatId);
            return;
        }

        if (!/^[a-zA-Z\s\-'\.]+$/.test(englishWord)) {
            await showMainMenu(chatId, 
                '‚ùå –≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ.\n' +
                '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º:'
            );
            return;
        }

        await showMainMenu(chatId, 'üîç –ò—â—É –ø–µ—Ä–µ–≤–æ–¥, —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é, –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ –∏ –ø—Ä–∏–º–µ—Ä—ã...');

        try {
            optimizedLog(`üéØ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ –¥–ª—è: "${englishWord}"`);
            let audioId = null;
            let transcription = '';
            let audioUrl = '';
            let meanings = [];
            let translations = [];

            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            const cambridgeData = await getCachedWordData(englishWord);
            if (cambridgeData.meanings && cambridgeData.meanings.length > 0) {
                optimizedLog(`‚úÖ Cambridge —É—Å–ø–µ—à–Ω–æ: ${cambridgeData.meanings.length} –∑–Ω–∞—á–µ–Ω–∏–π`);
                meanings = cambridgeData.meanings;
                translations = meanings.map(m => m.translation).filter((t, i, arr) => arr.indexOf(t) === i);
                optimizedLog('üìù –ù–∞–π–¥–µ–Ω—ã –ø–µ—Ä–µ–≤–æ–¥—ã:', translations);
            } else {
                optimizedLog('‚ùå Cambridge –Ω–µ –≤–µ—Ä–Ω—É–ª –ø–µ—Ä–µ–≤–æ–¥—ã');
                meanings = [];
                translations = [];
            }

            // –Ø–Ω–¥–µ–∫—Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è
            optimizedLog('üî§ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —É –Ø–Ω–¥–µ–∫—Å...');
            try {
                const yandexData = await yandexService.getTranscriptionAndAudio(englishWord);
                transcription = yandexData.transcription || '';
                audioUrl = yandexData.audioUrl || '';
                if (audioUrl) {
                    audioId = Date.now().toString();
                }
                optimizedLog(`‚úÖ –Ø–Ω–¥–µ–∫—Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è: ${transcription}`);
            } catch (yandexError) {
                optimizedLog(`‚ùå –Ø–Ω–¥–µ–∫—Å –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: ${yandexError.message}`);
                audioUrl = `https://translate.google.com/translate_tts?ie=UTF-8&q=${encodeURIComponent(englishWord)}&tl=en-gb&client=tw-ob`;
                audioId = Date.now().toString();
            }

            userStates.set(chatId, {
                state: 'showing_transcription',
                tempWord: englishWord,
                tempTranscription: transcription,
                tempAudioUrl: audioUrl,
                tempAudioId: audioId,
                tempTranslations: translations,
                meanings: meanings,
                selectedTranslationIndices: [],
                lastActivity: Date.now()
            });

            let message = `üìù –°–ª–æ–≤–æ: ${englishWord}`;
            if (transcription) {
                message += `\nüî§ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è: ${transcription}`;
            } else {
                message += `\n‚ùå –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`;
            }

            if (audioUrl) {
                message += `\n\nüéµ –î–æ—Å—Ç—É–ø–Ω–æ –∞—É–¥–∏–æ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ`;
            } else {
                message += `\n\n‚ùå –ê—É–¥–∏–æ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`;
            }

            if (translations.length > 0) {
                message += `\n\nüéØ –ù–∞–π–¥–µ–Ω–æ ${translations.length} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–µ—Ä–µ–≤–æ–¥–∞ –∏–∑ Cambridge Dictionary`;
                const totalExamples = meanings.reduce((total, meaning) => 
                    total + (meaning.examples ? meaning.examples.length : 0), 0
                );
                if (totalExamples > 0) {
                    message += `\nüìù –ù–∞–π–¥–µ–Ω–æ ${totalExamples} –ø—Ä–∏–º–µ—Ä–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è`;
                }
            } else {
                message += `\n\n‚ùå –ü–µ—Ä–µ–≤–æ–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ Cambridge Dictionary\n‚úèÔ∏è –í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–π –ø–µ—Ä–µ–≤–æ–¥`;
            }

            message += `\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
            await bot.sendMessage(chatId, message, getListeningKeyboard(audioId));
            await showMainMenu(chatId);

        } catch (error) {
            optimizedLog('Error getting word data:', error);
            await showMainMenu(chatId, 
                '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å–ª–æ–≤–∞\n\n' +
                '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ —Å–ª–æ–≤–æ –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ.'
            );
            userStates.delete(chatId);
        }
    }
    // –û—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π...
    else {
        await showMainMenu(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:');
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback_query (—Å–æ–∫—Ä–∞—â–µ–Ω–∞)
bot.on('callback_query', async (callbackQuery) => {
    const chatId = callbackQuery.message.chat.id;
    const data = callbackQuery.data;
    
    await initializeServices();
    updateUserActivity(chatId);

    await bot.answerCallbackQuery(callbackQuery.id);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö callback_data...
    if (data === 'show_answer') {
        await showReviewAnswer(chatId);
    }
    else if (data.startsWith('review_')) {
        const rating = data.replace('review_', '');
        await processReviewRating(chatId, rating);
    }
    else if (data === 'skip_review') {
        const userState = userStates.get(chatId);
        if (userState?.state === 'review_session') {
            userState.currentReviewIndex++;
            userState.lastActivity = Date.now();
            
            if (userState.currentReviewIndex >= userState.reviewWords.length) {
                userState.currentReviewIndex = 0;
            }
            
            await showNextReviewWord(chatId);
        }
    }
    else if (data === 'learned_word') {
        await processNewWordLearning(chatId, 'learned');
    }
    else if (data === 'need_repeat_word') {
        await processNewWordLearning(chatId, 'repeat');
    }
    else if (data === 'skip_new_word') {
        const userState = userStates.get(chatId);
        if (userState?.state === 'learning_new_words') {
            const skippedWord = userState.newWords.splice(userState.currentWordIndex, 1)[0];
            userState.newWords.push(skippedWord);
            userState.lastActivity = Date.now();
            await showNextNewWord(chatId);
        }
    }
    // ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback_data
});

// Graceful shutdown
async function gracefulShutdown() {
    optimizedLog('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –±–∞—Ç—á–∏ –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º...');
    
    if (batchSheetsService) {
        await batchSheetsService.flushAll();
    }
    
    bot.stopPolling();
    optimizedLog('‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã, –≤—ã—Ö–æ–¥');
    process.exit(0);
}

process.on('SIGINT', async () => {
    optimizedLog('üîÑ –ü–æ–ª—É—á–µ–Ω SIGINT, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...');
    await gracefulShutdown();
});

process.on('SIGTERM', async () => {
    optimizedLog('üîÑ –ü–æ–ª—É—á–µ–Ω SIGTERM, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...');
    await gracefulShutdown();
});

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–æ—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
setTimeout(() => {
    startOptimizedNotifications();
}, 5000);

optimizedLog('ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω: –í–µ—Ä—Å–∏—è —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è–º–∏ –¥–ª—è Railways!');

