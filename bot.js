import TelegramBot from 'node-telegram-bot-api';
import { GoogleSheetsService } from './services/google-sheets.js';
import { TranscriptionService } from './services/transcription-service.js';

const bot = new TelegramBot(process.env.BOT_TOKEN, { 
    polling: true 
});

const sheetsService = new GoogleSheetsService();
const transcriptionService = new TranscriptionService();

// –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const userStates = new Map();

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –∞—É–¥–∏–æ –≤ –∫–∞–∂–¥–æ–º —á–∞—Ç–µ
const sentAudios = new Map();

// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
function getMainMenu() {
    return {
        reply_markup: {
            keyboard: [
                ['‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ']
            ],
            resize_keyboard: true
        }
    };
}

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è
function getListeningKeyboard(audioId) {
    return {
        reply_markup: {
            inline_keyboard: [
                [{ text: 'üîä –ü—Ä–æ—Å–ª—É—à–∞—Ç—å –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ', callback_data: `audio_${audioId}` }],
                [{ text: '‚û°Ô∏è –í–≤–µ—Å—Ç–∏ –ø–µ—Ä–µ–≤–æ–¥', callback_data: 'enter_translation' }]
            ]
        }
    };
}

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ—Å–ª–µ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è
function getAfterAudioKeyboard() {
    return {
        reply_markup: {
            inline_keyboard: [
                [{ text: '‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –ø–µ—Ä–µ–≤–æ–¥', callback_data: 'enter_translation' }]
            ]
        }
    };
}

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
function getTranslationSelectionKeyboard(translations, selectedIndices = []) {
    const translationButtons = translations.map((translation, index) => {
        const isSelected = selectedIndices.includes(index);
        const emoji = isSelected ? '‚úÖ' : `${index + 1}Ô∏è‚É£`;
        return [
            { 
                text: `${emoji} ${translation}`, 
                callback_data: `toggle_translation_${index}` 
            }
        ];
    });

    const actionButtons = [];
    
    // –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
    if (selectedIndices.length > 0) {
        actionButtons.push([
            { 
                text: `üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å (${selectedIndices.length})`, 
                callback_data: 'save_selected_translations' 
            }
        ]);
    }
    
    actionButtons.push([
        { text: '‚úèÔ∏è –î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–π –ø–µ—Ä–µ–≤–æ–¥', callback_data: 'custom_translation' },
        { text: 'üîô –û—Ç–º–µ–Ω–∏—Ç—å', callback_data: 'cancel_translation' }
    ]);

    return {
        reply_markup: {
            inline_keyboard: [
                ...translationButtons,
                ...actionButtons
            ]
        }
    };
}

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –ø–µ—Ä–µ–≤–æ–¥–∞
function getManualTranslationKeyboard() {
    return {
        reply_markup: {
            inline_keyboard: [
                [{ text: 'üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥', callback_data: 'save_manual_translation' }],
                [{ text: 'üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É', callback_data: 'back_to_selection' }]
            ]
        }
    };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é
function showMainMenu(chatId, text = '') {
    if (text && text.trim() !== '') {
        return bot.sendMessage(chatId, text, getMainMenu());
    } else {
        return bot.sendMessage(chatId, ' ', getMainMenu());
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –µ—Å—Ç—å –ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∞—É–¥–∏–æ –≤ —á–∞—Ç–µ
function hasPreviousAudios(chatId, currentAudioUrl) {
    if (!sentAudios.has(chatId)) {
        return false;
    }
    
    const chatAudios = sentAudios.get(chatId);
    const previousAudios = chatAudios.filter(audio => audio.url !== currentAudioUrl);
    return previousAudios.length > 0;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞—É–¥–∏–æ –≤ –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
function addAudioToHistory(chatId, audioUrl, word) {
    if (!sentAudios.has(chatId)) {
        sentAudios.set(chatId, []);
    }
    
    const chatAudios = sentAudios.get(chatId);
    const existingAudioIndex = chatAudios.findIndex(audio => audio.url === audioUrl);
    
    if (existingAudioIndex !== -1) {
        chatAudios[existingAudioIndex] = { url: audioUrl, word: word, timestamp: Date.now() };
    } else {
        chatAudios.push({ url: audioUrl, word: word, timestamp: Date.now() });
    }
    
    if (chatAudios.length > 10) {
        chatAudios.shift();
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–ª–æ–≤–∞ —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º
async function saveWordWithTranslation(chatId, userState, translation) {
    let success = true;
    
    if (sheetsService.initialized) {
        const existingWords = await sheetsService.getUserWords(chatId);
        const isDuplicate = existingWords.some(word => 
            word.english.toLowerCase() === userState.tempWord.toLowerCase()
        );
        
        if (isDuplicate) {
            showMainMenu(chatId, 
                `‚ùå –°–ª–æ–≤–æ "${userState.tempWord}" —É–∂–µ –±—ã–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–ª–æ–≤–∞—Ä—å!\n\n` +
                '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.'
            );
            userStates.delete(chatId);
            return;
        }
        
        success = await sheetsService.addWord(
            chatId, 
            userState.tempWord, 
            userState.tempTranscription,
            translation,
            userState.tempAudioUrl
        );
    }
    
    userStates.delete(chatId);
    
    if (success) {
        const transcriptionText = userState.tempTranscription ? ` [${userState.tempTranscription}]` : '';
        
        showMainMenu(chatId, 
            '‚úÖ –°–ª–æ–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–ª–æ–≤–∞—Ä—å!\n\n' +
            `üí¨ ${userState.tempWord}${transcriptionText} - ${translation}\n\n` +
            '–¢–µ–ø–µ—Ä—å –æ–Ω–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è.'
        );
    } else {
        showMainMenu(chatId, 
            '‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è\n\n–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–ª–æ–≤–æ –≤ —Å–ª–æ–≤–∞—Ä—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.'
        );
    }
}

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.onText(/\/start/, (msg) => {
    const chatId = msg.chat.id;
    showMainMenu(chatId, 
        'üìö –ê–Ω–≥–ª–æ-—Ä—É—Å—Å–∫–∏–π —Å–ª–æ–≤–∞—Ä—å\n' +
        'üî§ –° —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–µ–π –∏ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ–º\n' +
        'üá¨üáß –ë—Ä–∏—Ç–∞–Ω—Å–∫–∏–π –≤–∞—Ä–∏–∞–Ω—Ç'
    );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    const text = msg.text;

    if (text.startsWith('/')) return;

    const userState = userStates.get(chatId);

    if (text === '‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ') {
        userStates.set(chatId, { state: 'waiting_english' });
        showMainMenu(chatId, 'üá¨üáß –í–≤–µ–¥–∏—Ç–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ:');
    }
    else if (userState?.state === 'waiting_english') {
        const englishWord = text.trim().toLowerCase();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ
        if (!/^[a-zA-Z\s\-']+$/.test(englishWord)) {
            showMainMenu(chatId, 
                '‚ùå –≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ.\n' +
                '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º:'
            );
            return;
        }
        
        // –ü–†–û–í–ï–†–ö–ê GOOGLE SHEETS –ò –î–£–ë–õ–ò–ö–ê–¢–û–í
        if (!sheetsService.initialized) {
            showMainMenu(chatId, 
                '‚ùå –°–µ—Ä–≤–∏—Å —Å–ª–æ–≤–∞—Ä—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω\n\n' +
                '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤.'
            );
            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
        } else {
            const existingWords = await sheetsService.getUserWords(chatId);
            const isDuplicate = existingWords.some(word => 
                word.english.toLowerCase() === englishWord.toLowerCase()
            );
            
            if (isDuplicate) {
                showMainMenu(chatId, 
                    `‚ùå –°–ª–æ–≤–æ "${englishWord}" —É–∂–µ –µ—Å—Ç—å –≤ –≤–∞—à–µ–º —Å–ª–æ–≤–∞—Ä–µ!\n\n` +
                    '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ —Å–ª–æ–≤–æ:'
                );
                return;
            }
        }
        
        showMainMenu(chatId, 'üîç –ò—â—É —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é, –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ –∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–µ—Ä–µ–≤–æ–¥–∞...');
        
        const result = await transcriptionService.getUKTranscription(englishWord);
        
        let audioId = null;
        if (result.audioUrl) {
            audioId = Date.now().toString();
        }
        
        userStates.set(chatId, {
            state: 'showing_transcription',
            tempWord: englishWord,
            tempTranscription: result.transcription,
            tempAudioUrl: result.audioUrl,
            tempAudioId: audioId,
            tempTranslations: result.translations || [],
            selectedTranslationIndices: [] // –ù–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
        });
        
        let message = `üìù –°–ª–æ–≤–æ: ${englishWord}`;
        
        if (result.transcription) {
            message += `\nüî§ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è: ${result.transcription}`;
        } else {
            message += `\n‚ùå –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`;
        }
        
        if (result.audioUrl) {
            message += `\n\nüéµ –î–æ—Å—Ç—É–ø–Ω–æ –∞—É–¥–∏–æ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ`;
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–µ—Ä–µ–≤–æ–¥–∞
        if (result.translations && result.translations.length > 0) {
            message += `\n\nüéØ –ù–∞–π–¥–µ–Ω–æ ${result.translations.length} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–µ—Ä–µ–≤–æ–¥–∞`;
        }
        
        message += `\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
        
        await bot.sendMessage(chatId, message, getListeningKeyboard(audioId));
        showMainMenu(chatId);
    }
    else if (userState?.state === 'waiting_manual_translation') {
        const translation = text.trim();
        
        if (!translation) {
            showMainMenu(chatId, '‚ùå –ü–µ—Ä–µ–≤–æ–¥ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥:');
            return;
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä—É—á–Ω–æ–π –ø–µ—Ä–µ–≤–æ–¥
        await saveWordWithTranslation(chatId, userState, translation);
    }
    else {
        showMainMenu(chatId);
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ inline –∫–Ω–æ–ø–æ–∫
bot.on('callback_query', async (callbackQuery) => {
    const chatId = callbackQuery.message.chat.id;
    const data = callbackQuery.data;
    const userState = userStates.get(chatId);

    await bot.answerCallbackQuery(callbackQuery.id);

    if (data.startsWith('audio_')) {
        const audioId = data.replace('audio_', '');
        const audioUrl = userState?.tempAudioUrl;
        const englishWord = userState?.tempWord;
        
        if (audioUrl && englishWord) {
            try {
                await bot.editMessageReplyMarkup(
                    { inline_keyboard: [] },
                    { chat_id: chatId, message_id: callbackQuery.message.message_id }
                );

                addAudioToHistory(chatId, audioUrl, englishWord);
                const hasPrevious = hasPreviousAudios(chatId, audioUrl);
                
                await bot.sendAudio(chatId, audioUrl, {
                    caption: `üîä –ë—Ä–∏—Ç–∞–Ω—Å–∫–æ–µ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ: ${englishWord}`
                });

                if (hasPrevious) {
                    await bot.sendMessage(chatId,
                        '‚ö†Ô∏è –ß—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∞–≤—Ç–æ–≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è —Å—Ç–∞—Ä—ã—Ö –∞—É–¥–∏–æ:\n\n' +
                        'üì± –ù–∞ Android:\n' +
                        '‚Ä¢ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –ø–æ—Å–ª–µ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è\n' +
                        '‚Ä¢ –ò–ª–∏ –∑–∞–∫—Ä–æ–π—Ç–µ –ø–ª–µ–µ—Ä —Å–≤–∞–π–ø–æ–º –≤–Ω–∏–∑\n\n' +
                        'üì± –ù–∞ iOS:\n' +
                        '‚Ä¢ –°–≤–∞–π–ø–Ω–∏—Ç–µ –ø–ª–µ–µ—Ä –≤–Ω–∏–∑\n' +
                        '‚Ä¢ –ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–ó–∞–∫—Ä—ã—Ç—å"\n\n' +
                        'üí° –≠—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–∞—á–∞–ª–∏ –∏–≥—Ä–∞—Ç—å —Å—Ç–∞—Ä—ã–µ —Å–ª–æ–≤–∞'
                    );
                }
                
                await bot.sendMessage(chatId, 
                    'üéµ –í—ã –ø—Ä–æ—Å–ª—É—à–∞–ª–∏ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ. –•–æ—Ç–∏—Ç–µ –≤–≤–µ—Å—Ç–∏ –ø–µ—Ä–µ–≤–æ–¥?',
                    getAfterAudioKeyboard()
                );
                
                showMainMenu(chatId);
                
            } catch (error) {
                console.error('Error sending audio:', error);
            }
        }
    }
    else if (data === 'enter_translation') {
        if (userState?.state === 'showing_transcription') {
            await bot.editMessageReplyMarkup(
                { inline_keyboard: [] },
                { chat_id: chatId, message_id: callbackQuery.message.message_id }
            );

            // –ï–°–õ–ò –ï–°–¢–¨ –í–ê–†–ò–ê–ù–¢–´ –ü–ï–†–ï–í–û–î–ê - –ü–û–ö–ê–ó–´–í–ê–ï–ú –ò–• –° –í–û–ó–ú–û–ñ–ù–û–°–¢–¨–Æ –í–´–ë–û–†–ê
            if (userState.tempTranslations && userState.tempTranslations.length > 0) {
                userStates.set(chatId, {
                    ...userState,
                    state: 'choosing_translation',
                    selectedTranslationIndices: [] // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
                });

                let translationMessage = 'üéØ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–µ—Ä–µ–≤–æ–¥–∞ (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ):\n\n' +
                    `üá¨üáß ${userState.tempWord}`;
                
                if (userState.tempTranscription) {
                    translationMessage += `\nüî§ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è: ${userState.tempTranscription}`;
                }

                translationMessage += '\n\nüí° –ù–∞–∂–∏–º–∞–π—Ç–µ –Ω–∞ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è –≤—ã–±–æ—Ä–∞, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å"';

                await bot.sendMessage(chatId, translationMessage, 
                    getTranslationSelectionKeyboard(userState.tempTranslations, [])
                );
            } else {
                // –ï–°–õ–ò –í–ê–†–ò–ê–ù–¢–û–í –ù–ï–¢ - –ü–†–û–°–ò–ú –í–í–ï–°–¢–ò –í–†–£–ß–ù–£–Æ
                userStates.set(chatId, {
                    ...userState,
                    state: 'waiting_manual_translation'
                });
                
                let translationMessage = '‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è —Å–ª–æ–≤–∞:\n\n' +
                    `üá¨üáß ${userState.tempWord}`;
                
                if (userState.tempTranscription) {
                    translationMessage += `\nüî§ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è: ${userState.tempTranscription}`;
                }
                
                translationMessage += '\n\nüí° –ú–æ–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é\n–ù–∞–ø—Ä–∏–º–µ—Ä: —Å–æ–ª–Ω—Ü–µ, —Å–≤–µ—Ç–∏–ª–æ, —Å–æ–ª–Ω–µ—á–Ω—ã–π —Å–≤–µ—Ç';
                
                showMainMenu(chatId, translationMessage);
            }
        }
    }
    else if (data.startsWith('toggle_translation_')) {
        const translationIndex = parseInt(data.replace('toggle_translation_', ''));
        
        if (userState?.state === 'choosing_translation' && userState.tempTranslations[translationIndex]) {
            let selectedIndices = [...(userState.selectedTranslationIndices || [])];
            
            // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤—ã–±–æ—Ä
            if (selectedIndices.includes(translationIndex)) {
                // –£–±–∏—Ä–∞–µ–º –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö
                selectedIndices = selectedIndices.filter(idx => idx !== translationIndex);
            } else {
                // –î–æ–±–∞–≤–ª—è–µ–º –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ
                selectedIndices.push(translationIndex);
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            userStates.set(chatId, {
                ...userState,
                selectedTranslationIndices: selectedIndices
            });
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
            await bot.editMessageReplyMarkup(
                getTranslationSelectionKeyboard(userState.tempTranslations, selectedIndices).reply_markup,
                {
                    chat_id: chatId,
                    message_id: callbackQuery.message.message_id
                }
            );
        }
    }
    else if (data === 'save_selected_translations') {
        if (userState?.state === 'choosing_translation' && userState.selectedTranslationIndices.length > 0) {
            // –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã
            const selectedTranslations = userState.selectedTranslationIndices
                .map(index => userState.tempTranslations[index]);
            
            // –û–±—ä–µ–¥–∏–Ω—è–µ–º —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü–µ
            const translationToSave = selectedTranslations.join(', ');
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ª–æ–≤–æ
            await saveWordWithTranslation(chatId, userState, translationToSave);
            
            // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –ø–µ—Ä–µ–≤–æ–¥–æ–≤
            await bot.deleteMessage(chatId, callbackQuery.message.message_id);
        }
    }
    else if (data === 'custom_translation') {
        if (userState?.state === 'choosing_translation') {
            userStates.set(chatId, {
                ...userState,
                state: 'waiting_manual_translation'
            });
            
            let translationMessage = '‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –ø–µ—Ä–µ–≤–æ–¥–∞:\n\n' +
                `üá¨üáß ${userState.tempWord}`;
            
            if (userState.tempTranscription) {
                translationMessage += `\nüî§ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è: ${userState.tempTranscription}`;
            }
            
            translationMessage += '\n\nüí° –ú–æ–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é\n–ù–∞–ø—Ä–∏–º–µ—Ä: —Å–æ–ª–Ω—Ü–µ, —Å–≤–µ—Ç–∏–ª–æ, —Å–æ–ª–Ω–µ—á–Ω—ã–π —Å–≤–µ—Ç';
            
            // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º
            await bot.deleteMessage(chatId, callbackQuery.message.message_id);
            
            showMainMenu(chatId, translationMessage);
        }
    }
    else if (data === 'save_manual_translation') {
        // –≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ —Ç–µ–ø–µ—Ä—å –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, —Ç–∞–∫ –∫–∞–∫ —Ä—É—á–Ω–æ–π –ø–µ—Ä–µ–≤–æ–¥ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        await bot.answerCallbackQuery(callbackQuery.id, { text: '–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º' });
    }
    else if (data === 'back_to_selection') {
        if (userState?.state === 'waiting_manual_translation' && userState.tempTranslations.length > 0) {
            userStates.set(chatId, {
                ...userState,
                state: 'choosing_translation',
                selectedTranslationIndices: []
            });
            
            let translationMessage = 'üéØ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–µ—Ä–µ–≤–æ–¥–∞ (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ):\n\n' +
                `üá¨üáß ${userState.tempWord}`;
            
            if (userState.tempTranscription) {
                translationMessage += `\nüî§ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è: ${userState.tempTranscription}`;
            }

            translationMessage += '\n\nüí° –ù–∞–∂–∏–º–∞–π—Ç–µ –Ω–∞ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è –≤—ã–±–æ—Ä–∞, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å"';

            await bot.sendMessage(chatId, translationMessage, 
                getTranslationSelectionKeyboard(userState.tempTranslations, [])
            );
            showMainMenu(chatId);
        }
    }
    else if (data === 'cancel_translation') {
        if (userState) {
            await bot.editMessageReplyMarkup(
                { inline_keyboard: [] },
                { chat_id: chatId, message_id: callbackQuery.message.message_id }
            );

            userStates.set(chatId, { ...userState, state: 'showing_transcription' });
            
            let message = `üìù –°–ª–æ–≤–æ: ${userState.tempWord}`;
            
            if (userState.tempTranscription) {
                message += `\nüî§ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è: ${userState.tempTranscription}`;
            }
            
            message += '\n\nüéµ –î–æ—Å—Ç—É–ø–Ω–æ –∞—É–¥–∏–æ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:';
            
            await bot.sendMessage(chatId, message, getListeningKeyboard(userState.tempAudioId));
            showMainMenu(chatId);
        }
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.on('error', (error) => {
    console.error('Bot error:', error);
});

bot.on('polling_error', (error) => {
    console.error('Polling error:', error);
});

console.log('ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–≤');
