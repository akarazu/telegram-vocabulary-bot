import TelegramBot from 'node-telegram-bot-api';
import { GoogleSheetsService } from './services/google-sheets.js';
import { TranscriptionService } from './services/transcription-service.js';

const bot = new TelegramBot(process.env.BOT_TOKEN, { 
    polling: true 
});

const sheetsService = new GoogleSheetsService();
const transcriptionService = new TranscriptionService();

// –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const userStates = new Map();

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –∞—É–¥–∏–æ –≤ –∫–∞–∂–¥–æ–º —á–∞—Ç–µ
const sentAudios = new Map();

// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
function getMainMenu() {
    return {
        reply_markup: {
            keyboard: [
                ['‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ']
            ],
            resize_keyboard: true
        }
    };
}

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è
function getListeningKeyboard(audioId) {
    return {
        reply_markup: {
            inline_keyboard: [
                [{ text: 'üîä –ü—Ä–æ—Å–ª—É—à–∞—Ç—å –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ', callback_data: `audio_${audioId}` }],
                [{ text: '‚û°Ô∏è –í–≤–µ—Å—Ç–∏ –ø–µ—Ä–µ–≤–æ–¥', callback_data: 'enter_translation' }]
            ]
        }
    };
}

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ—Å–ª–µ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è (–±–µ–∑ –∫–Ω–æ–ø–∫–∏ "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ª–æ–≤—É")
function getAfterAudioKeyboard() {
    return {
        reply_markup: {
            inline_keyboard: [
                [{ text: '‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –ø–µ—Ä–µ–≤–æ–¥', callback_data: 'enter_translation' }]
            ]
        }
    };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –µ—Å—Ç—å –ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∞—É–¥–∏–æ –≤ —á–∞—Ç–µ
function hasPreviousAudios(chatId, currentAudioUrl) {
    if (!sentAudios.has(chatId)) {
        console.log(`‚ùå No audio history for chat ${chatId}`);
        return false;
    }
    
    const chatAudios = sentAudios.get(chatId);
    console.log(`üìä Audio history for chat ${chatId}:`, chatAudios);
    
    // –ò—â–µ–º –∞—É–¥–∏–æ, –∫–æ—Ç–æ—Ä—ã–µ –ù–ï —è–≤–ª—è—é—Ç—Å—è —Ç–µ–∫—É—â–∏–º
    const previousAudios = chatAudios.filter(audio => audio.url !== currentAudioUrl);
    console.log(`üîç Previous audios (excluding current):`, previousAudios);
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –¥—Ä—É–≥–æ–µ –∞—É–¥–∏–æ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º true
    const hasPrevious = previousAudios.length > 0;
    console.log(`üéØ Has previous audios: ${hasPrevious}`);
    
    return hasPrevious;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞—É–¥–∏–æ –≤ –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
function addAudioToHistory(chatId, audioUrl, word) {
    if (!sentAudios.has(chatId)) {
        sentAudios.set(chatId, []);
        console.log(`üÜï Created audio history for chat ${chatId}`);
    }
    
    const chatAudios = sentAudios.get(chatId);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–≥–æ –∞—É–¥–∏–æ –≤ –∏—Å—Ç–æ—Ä–∏–∏
    const existingAudioIndex = chatAudios.findIndex(audio => audio.url === audioUrl);
    if (existingAudioIndex !== -1) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –∞—É–¥–∏–æ
        chatAudios[existingAudioIndex] = {
            url: audioUrl,
            word: word,
            timestamp: Date.now()
        };
        console.log(`üîÑ Updated existing audio in history: ${word}`);
    } else {
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –∞—É–¥–∏–æ
        chatAudios.push({
            url: audioUrl,
            word: word,
            timestamp: Date.now()
        });
        console.log(`‚úÖ Added new audio to history: ${word}`);
    }
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ 10 –∞—É–¥–∏–æ (—á—Ç–æ–±—ã –Ω–µ –Ω–∞–∫–∞–ø–ª–∏–≤–∞—Ç—å)
    if (chatAudios.length > 10) {
        chatAudios.shift();
        console.log(`üßπ Trimmed audio history to 10 items`);
    }
    
    console.log(`üìã Current history size for chat ${chatId}: ${chatAudios.length}`);
}

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.onText(/\/start/, (msg) => {
    const chatId = msg.chat.id;
    bot.sendMessage(chatId, 
        'üìö –ê–Ω–≥–ª–æ-—Ä—É—Å—Å–∫–∏–π —Å–ª–æ–≤–∞—Ä—å\n' +
        'üî§ –° —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–µ–π –∏ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ–º\n' +
        'üá¨üáß –ë—Ä–∏—Ç–∞–Ω—Å–∫–∏–π –≤–∞—Ä–∏–∞–Ω—Ç',
        getMainMenu()
    );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    const text = msg.text;

    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
    if (text.startsWith('/')) return;

    const userState = userStates.get(chatId);

    if (text === '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ') {
        userStates.set(chatId, { state: 'waiting_english' });
        bot.sendMessage(chatId, 'üá¨üáß –í–≤–µ–¥–∏—Ç–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ:');
    }
    else if (userState?.state === 'waiting_english') {
        const englishWord = text.trim();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ
        if (!/^[a-zA-Z\s\-']+$/.test(englishWord)) {
            bot.sendMessage(chatId, 
                '‚ùå –≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ.\n' +
                '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º:'
            );
            return;
        }
        
        bot.sendMessage(chatId, 'üîç –ò—â—É —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –∏ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ...');
        
        const result = await transcriptionService.getUKTranscription(englishWord);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º audioUrl –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        let audioId = null;
        if (result.audioUrl) {
            audioId = Date.now().toString();
        }
        
        // –°–û–•–†–ê–ù–Ø–ï–ú –í–°–ï –î–ê–ù–ù–´–ï –í –°–û–°–¢–û–Ø–ù–ò–ò
        userStates.set(chatId, {
            state: 'showing_transcription',
            tempWord: englishWord,
            tempTranscription: result.transcription,
            tempAudioUrl: result.audioUrl,
            tempAudioId: audioId
        });
        
        let message = `üìù –°–ª–æ–≤–æ: <b>${englishWord}</b>`;
        
        if (result.transcription) {
            message += `\nüî§ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è: <code>${result.transcription}</code>`;
        } else {
            message += `\n‚ùå –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`;
        }
        
        if (result.audioUrl) {
            message += `\n\nüéµ –î–æ—Å—Ç—É–ø–Ω–æ –∞—É–¥–∏–æ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ`;
        }
        
        message += `\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
        
        await bot.sendMessage(chatId, message, {
            parse_mode: 'HTML',
            ...getListeningKeyboard(audioId)
        });
    }
    else if (userState?.state === 'waiting_translation') {
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –ø–µ—Ä–µ–≤–æ–¥
        const translation = text.trim();
        
        if (!translation) {
            bot.sendMessage(chatId, '‚ùå –ü–µ—Ä–µ–≤–æ–¥ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥:');
            return;
        }
        
        // –ò–°–ü–û–õ–¨–ó–£–ï–ú –°–û–•–†–ê–ù–ï–ù–ù–£–Æ –¢–†–ê–ù–°–ö–†–ò–ü–¶–ò–Æ –ò–ó –°–û–°–¢–û–Ø–ù–ò–Ø
        const success = await sheetsService.addWord(
            chatId, 
            userState.tempWord, 
            userState.tempTranscription,
            translation,
            userState.tempAudioUrl
        );
        
        // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ü–û–°–õ–ï —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        userStates.delete(chatId);
        
        if (success) {
            // –ò–°–ü–û–õ–¨–ó–£–ï–ú –¢–£ –ñ–ï –¢–†–ê–ù–°–ö–†–ò–ü–¶–ò–Æ –î–õ–Ø –°–û–û–ë–©–ï–ù–ò–Ø
            const transcriptionText = userState.tempTranscription ? ` [${userState.tempTranscription}]` : '';
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏
            await bot.sendMessage(chatId, 
                `‚úÖ <b>–°–ª–æ–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–ª–æ–≤–∞—Ä—å!</b>\n\n` +
                `üí¨ ${userState.tempWord}${transcriptionText} - <b>${translation}</b>\n\n` +
                `–¢–µ–ø–µ—Ä—å –æ–Ω–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è.`,
                { 
                    parse_mode: 'HTML',
                    ...getMainMenu() 
                }
            );
        } else {
            await bot.sendMessage(chatId, 
                '‚ùå <b>–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è</b>\n\n–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–ª–æ–≤–æ –≤ —Å–ª–æ–≤–∞—Ä—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
                { 
                    parse_mode: 'HTML',
                    ...getMainMenu() 
                }
            );
        }
    }
    else {
        // –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ò —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∫–æ–º–∞–Ω–¥–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', getMainMenu());
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ inline –∫–Ω–æ–ø–æ–∫
bot.on('callback_query', async (callbackQuery) => {
    const chatId = callbackQuery.message.chat.id;
    const data = callbackQuery.data;
    const userState = userStates.get(chatId);

    // –í—Å–µ–≥–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º callback –±–µ–∑ —Ç–µ–∫—Å—Ç–∞
    await bot.answerCallbackQuery(callbackQuery.id);

    if (data.startsWith('audio_')) {
        const audioId = data.replace('audio_', '');
        const audioUrl = userState?.tempAudioUrl;
        const englishWord = userState?.tempWord;
        
        if (audioUrl && englishWord) {
            try {
                console.log(`üéµ Processing audio for: ${englishWord}`);
                console.log(`üîó Audio URL: ${audioUrl}`);
                
                // –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                await bot.editMessageReplyMarkup(
                    { inline_keyboard: [] },
                    {
                        chat_id: chatId,
                        message_id: callbackQuery.message.message_id
                    }
                );

                // ‚úÖ –°–ù–ê–ß–ê–õ–ê –¥–æ–±–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ –≤ –∏—Å—Ç–æ—Ä–∏—é (–ø–µ—Ä–µ–¥ –ø—Ä–æ–≤–µ—Ä–∫–æ–π!)
                console.log(`üì• Adding audio to history...`);
                addAudioToHistory(chatId, audioUrl, englishWord);
                
                // ‚úÖ –¢–ï–ü–ï–†–¨ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∞—É–¥–∏–æ
                console.log(`üîç Checking for previous audios...`);
                const hasPrevious = hasPreviousAudios(chatId, audioUrl);
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await bot.sendAudio(chatId, audioUrl, {
                    caption: `üîä –ë—Ä–∏—Ç–∞–Ω—Å–∫–æ–µ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ: ${englishWord}`
                });

                // ‚úÖ –ï–°–õ–ò –ï–°–¢–¨ –ü–†–ï–î–´–î–£–©–ò–ï –ê–£–î–ò–û - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
                if (hasPrevious) {
                    console.log(`‚ö†Ô∏è Showing warning for previous audios`);
                    await bot.sendMessage(chatId,
                        '‚ö†Ô∏è **–ß—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∞–≤—Ç–æ–≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è —Å—Ç–∞—Ä—ã—Ö –∞—É–¥–∏–æ:**\n\n' +
                        'üì± **–ù–∞ Android:**\n' +
                        '‚Ä¢ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –ø–æ—Å–ª–µ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è\n' +
                        '‚Ä¢ –ò–ª–∏ –∑–∞–∫—Ä–æ–π—Ç–µ –ø–ª–µ–µ—Ä —Å–≤–∞–π–ø–æ–º –≤–Ω–∏–∑\n\n' +
                        'üì± **–ù–∞ iOS:**\n' +
                        '‚Ä¢ –°–≤–∞–π–ø–Ω–∏—Ç–µ –ø–ª–µ–µ—Ä –≤–Ω–∏–∑\n' +
                        '‚Ä¢ –ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–ó–∞–∫—Ä—ã—Ç—å"\n\n' +
                        'üí° *–≠—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–∞—á–∞–ª–∏ –∏–≥—Ä–∞—Ç—å —Å—Ç–∞—Ä—ã–µ —Å–ª–æ–≤–∞*',
                        { parse_mode: 'Markdown' }
                    );
                } else {
                    console.log(`‚úÖ No previous audios, skipping warning`);
                }
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ—Å–ª–µ –∞—É–¥–∏–æ
                await bot.sendMessage(chatId, 
                    'üéµ –í—ã –ø—Ä–æ—Å–ª—É—à–∞–ª–∏ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ. –•–æ—Ç–∏—Ç–µ –≤–≤–µ—Å—Ç–∏ –ø–µ—Ä–µ–≤–æ–¥?',
                    getAfterAudioKeyboard()
                );
                
            } catch (error) {
                console.error('Error sending audio:', error);
            }
        }
    }
    else if (data === 'enter_translation') {
        if (userState?.state === 'showing_transcription') {
            // –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            await bot.editMessageReplyMarkup(
                { inline_keyboard: [] },
                {
                    chat_id: chatId,
                    message_id: callbackQuery.message.message_id
                }
            );

            // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –ø–µ—Ä–µ–≤–æ–¥–∞ - –°–û–•–†–ê–ù–Ø–ï–ú –í–°–ï –î–ê–ù–ù–´–ï
            userStates.set(chatId, {
                ...userState,
                state: 'waiting_translation'
            });
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –ø–µ—Ä–µ–≤–æ–¥–∞
            let translationMessage = `‚úèÔ∏è <b>–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è —Å–ª–æ–≤–∞:</b>\n\n` +
                `üá¨üáß <b>${userState.tempWord}</b>`;
            
            if (userState.tempTranscription) {
                translationMessage += `\nüî§ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è: <code>${userState.tempTranscription}</code>`;
            }
            
            translationMessage += `\n\nüìù <i>–ù–∞–ø–∏—à–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ–º</i>`;
            
            await bot.sendMessage(chatId, translationMessage, {
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'üîô –û—Ç–º–µ–Ω–∏—Ç—å', callback_data: 'cancel_translation' }]
                    ]
                }
            });
        }
    }
    else if (data === 'cancel_translation') {
        // –û—Ç–º–µ–Ω–∞ –≤–≤–æ–¥–∞ –ø–µ—Ä–µ–≤–æ–¥–∞
        if (userState) {
            // –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–ø—Ä–æ—Å–æ–º –ø–µ—Ä–µ–≤–æ–¥–∞
            await bot.editMessageReplyMarkup(
                { inline_keyboard: [] },
                {
                    chat_id: chatId,
                    message_id: callbackQuery.message.message_id
                }
            );

            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –ø–æ–∫–∞–∑–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
            userStates.set(chatId, {
                ...userState,
                state: 'showing_transcription'
            });
            
            const message = `üìù –°–ª–æ–≤–æ: <b>${userState.tempWord}</b>\n` +
                (userState.tempTranscription ? `üî§ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è: <code>${userState.tempTranscription}</code>\n\n` : '\n') +
                'üéµ –î–æ—Å—Ç—É–ø–Ω–æ –∞—É–¥–∏–æ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ\n\n' +
                '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:';
            
            await bot.sendMessage(chatId, message, {
                parse_mode: 'HTML',
                ...getListeningKeyboard(userState.tempAudioId)
            });
        }
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.on('error', (error) => {
    console.error('Bot error:', error);
});

bot.on('polling_error', (error) => {
    console.error('Polling error:', error);
});

console.log('ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –ø–æ –∞—É–¥–∏–æ –∏—Å—Ç–æ—Ä–∏–∏');
