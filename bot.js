import TelegramBot from 'node-telegram-bot-api';
import { GoogleSheetsService } from './services/google-sheets.js';
import { YandexDictionaryService } from './services/yandex-dictionary-service.js';
import { CambridgeDictionaryService } from './services/cambridge-dictionary-service.js';
import { FSRSService } from './services/fsrs-service.js';
import { BatchSheetsService } from './services/batch-sheets-service.js';

const bot = new TelegramBot(process.env.BOT_TOKEN, { polling: true });

// –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –ª–µ–Ω–∏–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
let sheetsService, yandexService, cambridgeService, fsrsService, batchSheetsService;
let servicesInitialized = false;

// –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
const cache = new Map();
const CACHE_TTL = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç

// –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: —É–º–µ–Ω—å—à–µ–Ω–∏–µ –ª–æ–≥–æ–≤ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ
const isProduction = process.env.NODE_ENV === 'production';

function optimizedLog(message, data = null) {
    if (!isProduction) {
        if (data) {
            console.log(message, data);
        } else {
            console.log(message);
        }
    } else {
        const importantMessages = ['‚ùå', '‚úÖ', 'üîî', 'üéØ', 'üí∞', '‚è∞'];
        if (importantMessages.some(emoji => message.includes(emoji))) {
            console.log(message);
        }
    }
}

// ‚úÖ –£–õ–£–ß–®–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü–æ–∫–∞–∑–∞ –¥–µ—Ç–∞–ª–µ–π –ø–µ—Ä–µ–≤–æ–¥–∞
async function showTranslationDetails(chatId, translationIndex, userState) {
    try {
        const translation = userState.tempTranslations[translationIndex];
        
        // –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –ø–µ—Ä–µ–≤–æ–¥ –≤ meanings
        const meaning = userState.meanings.find(m => 
            m.translation && m.translation.trim() === translation.trim()
        );

        if (meaning) {
            let detailsMessage = `üîç **–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ–≤–æ–¥–∞:**\n\n`;
            detailsMessage += `üá¨üáß **–°–ª–æ–≤–æ:** ${userState.tempWord}\n`;
            detailsMessage += `üá∑üá∫ **–ü–µ—Ä–µ–≤–æ–¥:** ${translation}\n\n`;

            if (meaning.partOfSpeech && meaning.partOfSpeech.trim() !== '') {
                detailsMessage += `üî§ **–ß–∞—Å—Ç—å —Ä–µ—á–∏:** ${meaning.partOfSpeech}\n\n`;
            }

            if (meaning.englishDefinition && meaning.englishDefinition.trim() !== '') {
                detailsMessage += `üìñ **–ê–Ω–≥–ª–∏–π—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ:**\n${meaning.englishDefinition}\n\n`;
            }

            if (meaning.examples && meaning.examples.length > 0) {
                detailsMessage += `üìù **–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:**\n`;
                meaning.examples.forEach((example, index) => {
                    if (index < 3) { // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 3 –ø—Ä–∏–º–µ—Ä–∞
                        detailsMessage += `\n${index + 1}. ${example.english}`;
                        if (example.russian && example.russian.trim() !== '') {
                            detailsMessage += `\n   ${example.russian}`;
                        }
                    }
                });
            } else {
                detailsMessage += `üìù **–ü—Ä–∏–º–µ—Ä—ã:** –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n`;
            }

            await bot.sendMessage(chatId, detailsMessage, {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –ø–µ—Ä–µ–≤–æ–¥–æ–≤', callback_data: 'back_to_translations' }]
                    ]
                }
            });
        } else {
            await bot.sendMessage(chatId, 
                `‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–µ—Ä–µ–≤–æ–¥–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞\n\n` +
                `–ü–µ—Ä–µ–≤–æ–¥: "${translation}"\n` +
                `–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –ø–µ—Ä–µ–≤–æ–¥.`
            );
        }
    } catch (error) {
        optimizedLog('‚ùå Error showing translation details:', error);
        await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π –ø–µ—Ä–µ–≤–æ–¥–∞');
    }
}

function toMoscowTime(date) {
    if (!date) return date;
    
    try {
        const moscowOffset = 3 * 60 * 60 * 1000; // +3 —á–∞—Å–∞ –¥–ª—è –ú–æ—Å–∫–≤—ã
        return new Date(date.getTime() + moscowOffset);
    } catch (error) {
        return date;
    }
}

function formatMoscowDate(date) {
    if (!date) return '–¥–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞';
    
    try {
        const moscowDate = toMoscowTime(new Date(date));
        const day = moscowDate.getDate().toString().padStart(2, '0');
        const month = (moscowDate.getMonth() + 1).toString().padStart(2, '0');
        const year = moscowDate.getFullYear();
        const hours = moscowDate.getHours().toString().padStart(2, '0');
        const minutes = moscowDate.getMinutes().toString().padStart(2, '0');
        
        return `${day}.${month}.${year} ${hours}:${minutes}`;
    } catch (error) {
        return '–æ—à–∏–±–∫–∞ –¥–∞—Ç—ã';
    }
}

// ‚úÖ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–û: –§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É –ø–µ—Ä–µ–≤–æ–¥–æ–≤
async function backToTranslationSelection(chatId, userState, callbackQuery) {
    try {
        let translationMessage = 'üéØ **–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥—ã:**\n\n' +
            `üá¨üáß **${userState.tempWord}**`;
        if (userState.tempTranscription) {
            translationMessage += `\nüî§ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è: ${userState.tempTranscription}`;
        }
        translationMessage += '\n\nüí° –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ø–µ—Ä–µ–≤–æ–¥ —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –µ–≥–æ, –∏–ª–∏ üîç –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π';

        await bot.sendMessage(chatId, translationMessage,
            getTranslationSelectionKeyboard(userState.tempTranslations, userState.meanings, userState.selectedTranslationIndices)
        );

        try {
            await bot.deleteMessage(chatId, callbackQuery.message.message_id);
        } catch (deleteError) {
            optimizedLog('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...');
        }
    } catch (error) {
        optimizedLog('‚ùå Error going back to translations:', error);
        await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –≤—ã–±–æ—Ä—É –ø–µ—Ä–µ–≤–æ–¥–æ–≤');
    }
}

// ‚úÖ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–û: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
async function initializeServices() {
    if (servicesInitialized) return true;
    
    try {
        optimizedLog('üîÑ Initializing services...');
        sheetsService = new GoogleSheetsService();
        batchSheetsService = new BatchSheetsService(sheetsService);
        yandexService = new YandexDictionaryService();
        cambridgeService = new CambridgeDictionaryService();
        fsrsService = new FSRSService();
        
        // –ñ–¥–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é Google Sheets
        await new Promise(resolve => {
            const checkInitialized = () => {
                if (sheetsService.initialized) {
                    resolve();
                } else {
                    setTimeout(checkInitialized, 100);
                }
            };
            checkInitialized();
        });
        
        servicesInitialized = true;
        optimizedLog('‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
        return true;
    } catch (error) {
        optimizedLog('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤:', error);
        // ‚úÖ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–û: –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫–∏ —á—Ç–æ–±—ã –±–æ—Ç –Ω–µ –ø–∞–¥–∞–ª
        sheetsService = { 
            initialized: false,
            hasWordsForReview: () => false,
            getReviewWordsCount: () => 0,
            getUserWords: () => [],
            getWordsForReview: () => [],
            getNewWordsCount: () => 0,
            getAllActiveUsers: () => [],
            addWordWithMeanings: async () => false,
            updateWordReview: async () => false,
            updateCardAfterReview: async () => false,
            batchUpdateWords: async () => false,
            // ‚úÖ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–û: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ –º–µ—Ç–æ–¥—ã
            resetUserProgress: async () => true
        };
        yandexService = { 
            getTranscriptionAndAudio: () => ({ transcription: '', audioUrl: '' }),
            getTranscriptionAndAudio: async () => ({ transcription: '', audioUrl: '' })
        };
        cambridgeService = { 
            getWordData: () => ({ meanings: [] }),
            getWordData: async () => ({ meanings: [] })
        };
        fsrsService = new FSRSService();
        batchSheetsService = {
            updateWordReviewBatch: async () => true,
            flushAll: async () => {}
        };
        servicesInitialized = true; // –í—Å–µ —Ä–∞–≤–Ω–æ –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ
        return false;
    }
}

// –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const userStates = new Map();

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –Ω–æ—Ç–∏—Ñ–∏–∫–∞—Ü–∏–π
const notificationScheduler = new Map();

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞ –∏–∑—É—á–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤
const dailyLearnedWords = new Map();

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —Å–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –£–ñ–ï –ò–ó–£–ß–ï–ù–´ (–ø–µ—Ä–µ—à–ª–∏ –≤ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ)
const learnedWords = new Map();

// –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å–ª–æ–≤
async function getCachedUserWords(chatId) {
    const cacheKey = `words_${chatId}`;
    const cached = cache.get(cacheKey);
    
    if (cached && Date.now() - cached.timestamp < CACHE_TTL) {
        return cached.data;
    }
    
    await initializeServices();
    const words = await sheetsService.getUserWords(chatId);
    cache.set(cacheKey, {
        data: words,
        timestamp: Date.now()
    });
    
    return words;
}

// –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞
setInterval(() => {
    const now = Date.now();
    for (const [key, value] of cache.entries()) {
        if (now - value.timestamp > CACHE_TTL) {
            cache.delete(key);
        }
    }
    // –û—á–∏—â–∞–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const inactiveTime = 30 * 60 * 1000; // 30 –º–∏–Ω—É—Ç
    for (const [chatId, state] of userStates.entries()) {
        if (now - (state.lastActivity || 0) > inactiveTime) {
            userStates.delete(chatId);
            optimizedLog(`üßπ –û—á–∏—â–µ–Ω –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${chatId}`);
        }
    }
}, 10 * 60 * 1000);

function updateUserActivity(chatId) {
    const state = userStates.get(chatId);
    if (state) {
        state.lastActivity = Date.now();
    }
}

// ‚úÖ –§–£–ù–ö–¶–ò–Ø: –û—Ç–º–µ—Ç–∫–∞ —Å–ª–æ–≤–∞ –∫–∞–∫ –∏–∑—É—á–µ–Ω–Ω–æ–≥–æ
function markWordAsLearned(chatId, englishWord) {
    if (!learnedWords.has(chatId)) {
        learnedWords.set(chatId, new Set());
    }
    
    const userLearnedWords = learnedWords.get(chatId);
    userLearnedWords.add(englishWord.toLowerCase());
    optimizedLog(`üéì –°–ª–æ–≤–æ "${englishWord}" –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –ò–ó–£–ß–ï–ù–ù–û–ï –¥–ª—è ${chatId}, –≤—Å–µ–≥–æ: ${userLearnedWords.size}`);
}

// ‚úÖ –§–£–ù–ö–¶–ò–Ø: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑—É—á–µ–Ω–æ –ª–∏ —Å–ª–æ–≤–æ
function isWordLearned(chatId, englishWord) {
    if (!learnedWords.has(chatId)) {
        learnedWords.set(chatId, new Set());
        return false;
    }
    const userLearnedWords = learnedWords.get(chatId);
    return userLearnedWords.has(englishWord.toLowerCase());
}

// ‚úÖ –§–£–ù–ö–¶–ò–Ø: –°–±—Ä–æ—Å –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞
function resetDailyLimit() {
    const now = new Date();
    const currentHour = now.getHours();
    
    if (currentHour === 4) {
        dailyLearnedWords.clear();
        optimizedLog('üîÑ –°–±—Ä–æ—à–µ–Ω –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –∏–∑—É—á–µ–Ω–∏—è —Å–ª–æ–≤');
    }
}

// ‚úÖ –î–û–ë–ê–í–õ–Ø–ï–ú: –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å —É—á–µ—Ç–æ–º —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
function isReviewDue(nextReviewDate) {
    if (!nextReviewDate) return false;
    
    try {
        const reviewDate = new Date(nextReviewDate);
        const now = new Date();
        
        // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∞—Å +3 —á–∞—Å–∞ –¥–ª—è –º–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        const timezoneOffset = 3 * 60 * 60 * 1000; // +3 —á–∞—Å–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
        const adjustedNow = new Date(now.getTime() + timezoneOffset);
        
        return reviewDate <= adjustedNow;
    } catch (error) {
        return false;
    }
}

// –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –æ–¥–∏–Ω –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤–º–µ—Å—Ç–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö
let lastLimitReset = 0;
let lastCacheCleanup = 0;
setInterval(() => {
    const now = Date.now();
    if (now - lastLimitReset >= 60 * 60 * 1000) {
        resetDailyLimit();
        lastLimitReset = now;
    }
}, 60 * 1000);

// ‚úÖ –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–∑—É—á–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤ —Å–µ–≥–æ–¥–Ω—è
async function getLearnedToday(chatId) {
    try {
        const userWords = await getCachedUserWords(chatId);
        const now = new Date();
        
        // ‚úÖ –ú–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è "—Å–µ–≥–æ–¥–Ω—è"
        const moscowOffset = 3 * 60 * 60 * 1000; // +3 —á–∞—Å–∞
        const moscowNow = new Date(now.getTime() + moscowOffset);
        const todayStart = new Date(moscowNow);
        todayStart.setHours(0, 0, 0, 0);
        const todayEnd = new Date(moscowNow);
        todayEnd.setHours(23, 59, 59, 999);
        
        optimizedLog(`üîç –î–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: ${moscowNow.toISOString()}`);
        optimizedLog(`üîç –°–µ–≥–æ–¥–Ω—è: —Å ${todayStart.toISOString()} –ø–æ ${todayEnd.toISOString()}`);

        let learnedToday = 0;
        let debugWords = [];

        userWords.forEach(word => {
            if (word.status !== 'active') return;
            
            if (word.LastReview) { // ‚úÖ –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –∑–∞–≥–ª–∞–≤–Ω—É—é L!
                try {
                    const lastReviewDate = new Date(word.LastReview);
                    optimizedLog(`üîç –°–ª–æ–≤–æ "${word.english}": LastReview=${word.LastReview}, –¥–∞—Ç–∞=${lastReviewDate.toISOString()}`);
                    
                    // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è –ø–æ –ú–æ—Å–∫–≤–µ
                    if (lastReviewDate >= todayStart && lastReviewDate <= todayEnd) {
                        learnedToday++;
                        debugWords.push(`${word.english} (${lastReviewDate.toISOString()})`);
                    }
                } catch (error) {
                    optimizedLog(`‚ùå –û—à–∏–±–∫–∞ –¥–∞—Ç—ã –¥–ª—è "${word.english}":`, error);
                }
            }
        });

        optimizedLog(`üìä –°–ª–æ–≤ –∏–∑—É—á–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è –¥–ª—è ${chatId}: ${learnedToday}`);
        optimizedLog(`üìù –°–ª–æ–≤–∞: ${debugWords.join(', ')}`);
        
        return learnedToday;
        
    } catch (error) {
        optimizedLog('‚ùå Error getting learned today:', error);
        return 0;
    }
}

// –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å–ª–æ–≤–∞—Ä–µ–π
const dictionaryCache = new Map();

async function getCachedWordData(englishWord) {
    const cacheKey = `dict_${englishWord.toLowerCase()}`;
    const cached = dictionaryCache.get(cacheKey);
    
    if (cached) {
        return cached;
    }
    
    await initializeServices();
    
    try {
        const result = await Promise.race([
            cambridgeService.getWordData(englishWord),
            new Promise((_, reject) => 
                setTimeout(() => reject(new Error('Timeout')), 10000)
            )
        ]);
        
        dictionaryCache.set(cacheKey, result);
        
        if (dictionaryCache.size > 1000) {
            const firstKey = dictionaryCache.keys().next().value;
            dictionaryCache.delete(firstKey);
        }
        
        return result;
    } catch (error) {
        optimizedLog(`‚ùå Dictionary error for "${englishWord}":`, error.message);
        return { meanings: [] };
    }
}

// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
function getMainMenu() {
    return {
        reply_markup: {
            keyboard: [
                ['‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ', 'üìö –ü–æ–≤—Ç–æ—Ä–∏—Ç—å —Å–ª–æ–≤–∞'],
                ['üÜï –ù–æ–≤—ã–µ —Å–ª–æ–≤–∞', 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞']
            ],
            resize_keyboard: true
        }
    };
}

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è
function getListeningKeyboard(audioId) {
    return {
        reply_markup: {
            inline_keyboard: [
                [{ text: 'üîä –ü—Ä–æ—Å–ª—É—à–∞—Ç—å –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ', callback_data: `audio_${audioId}` }],
                [{ text: '‚û°Ô∏è –í—ã–±—Ä–∞—Ç—å –ø–µ—Ä–µ–≤–æ–¥', callback_data: 'enter_translation' }]
            ]
        }
    };
}

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ—Å–ª–µ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è
function getAfterAudioKeyboard() {
    return {
        reply_markup: {
            inline_keyboard: [
                [{ text: '‚úèÔ∏è –í—ã–±—Ä–∞—Ç—å –ø–µ—Ä–µ–≤–æ–¥', callback_data: 'enter_translation' }]
            ]
        }
    };
}

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–≤–æ–¥–∞ –ø—Ä–∏–º–µ—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"
function getExampleInputKeyboard() {
    return {
        reply_markup: {
            keyboard: [
                ['‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'],
                ['‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ']
            ],
            resize_keyboard: true
        }
    };
}

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ —Å –∫–Ω–æ–ø–∫–æ–π "–ü–æ–¥—Ä–æ–±–Ω–µ–µ" –¥–ª—è –≤—Å–µ—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤
function getTranslationSelectionKeyboard(translations, meanings, selectedIndices = []) {
    if (!translations || translations.length === 0) {
        optimizedLog('‚ùå No translations provided to keyboard function');
        return {
            reply_markup: {
                inline_keyboard: [
                    [{ text: '‚úèÔ∏è –î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–π –ø–µ—Ä–µ–≤–æ–¥', callback_data: 'custom_translation' }],
                    [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'cancel_translation' }]
                ]
            }
        };
    }

    const translationButtons = [];
    
    translations.forEach((translation, index) => {
        const isSelected = selectedIndices.includes(index);
        const numberEmoji = getNumberEmoji(index + 1);
        const emoji = isSelected ? '‚úÖ' : numberEmoji;
        
        const buttonText = `${emoji} ${translation.substring(0, 30)}${translation.length > 30 ? '...' : ''}`;
        
        const row = [
            { 
                text: buttonText, 
                callback_data: `toggle_translation_${index}` 
            }
        ];
        
        // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–ª–∏—á–∏—è –¥–µ—Ç–∞–ª–µ–π
        // –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –ø–µ—Ä–µ–≤–æ–¥ –≤ meanings
        const meaningForTranslation = meanings?.find(m => 
            m.translation && m.translation.trim() === translation.trim()
        );
        
        const hasDetails = meaningForTranslation && (
            (meaningForTranslation.englishDefinition && meaningForTranslation.englishDefinition.trim() !== '') ||
            (meaningForTranslation.examples && meaningForTranslation.examples.length > 0) ||
            (meaningForTranslation.partOfSpeech && meaningForTranslation.partOfSpeech.trim() !== '')
        );
        
        optimizedLog(`üîç Translation "${translation}" has details: ${hasDetails}`, {
            definition: meaningForTranslation?.englishDefinition,
            examples: meaningForTranslation?.examples?.length,
            partOfSpeech: meaningForTranslation?.partOfSpeech
        });
        
        if (hasDetails) {
            row.push({ 
                text: 'üîç –ü–æ–¥—Ä–æ–±–Ω–µ–µ',  // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç "–ü–æ–¥—Ä–æ–±–Ω–µ–µ"
                callback_data: `details_${index}` 
            });
        }
        
        translationButtons.push(row);
    });

    const actionButtons = [];
    
    if (selectedIndices.length > 0) {
        actionButtons.push([
            { 
                text: `üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å (${selectedIndices.length})`, 
                callback_data: 'save_selected_translations' 
            }
        ]);
    }
    
    actionButtons.push([
        { 
            text: '‚úèÔ∏è –°–≤–æ–π –ø–µ—Ä–µ–≤–æ–¥', 
            callback_data: 'custom_translation' 
        },
        { 
            text: 'üîô –ù–∞–∑–∞–¥', 
            callback_data: 'cancel_translation' 
        }
    ]);

    return {
        reply_markup: {
            inline_keyboard: [...translationButtons, ...actionButtons]
        }
    };
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–º–æ–¥–∑–∏ –Ω–æ–º–µ—Ä–æ–≤
function getNumberEmoji(number) {
    const emojis = ['1Ô∏è‚É£', '2Ô∏è‚É£', '3Ô∏è‚É£', '4Ô∏è‚É£', '5Ô∏è‚É£', '6Ô∏è‚É£', '7Ô∏è‚É£', '8Ô∏è‚É£', '9Ô∏è‚É£', 'üîü'];
    return number <= emojis.length ? emojis[number - 1] : `${number}.`;
}

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è —Å–ª–æ–≤
function getReviewKeyboard() {
    return {
        reply_markup: {
            inline_keyboard: [
                [
                    { text: 'üò£ –ó–∞–±—ã–ª', callback_data: 'review_again' },
                    { text: 'üòì –¢—Ä—É–¥–Ω–æ', callback_data: 'review_hard' }
                ],
                [
                    { text: 'üòä –•–æ—Ä–æ—à–æ', callback_data: 'review_good' },
                    { text: 'üéâ –õ–µ–≥–∫–æ', callback_data: 'review_easy' }
                ],
                [
                    { text: '‚úçÔ∏è –ü—Ä–∞–≤–æ–ø–∏—Å–∞–Ω–∏–µ', callback_data: 'spelling_train' } // ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û
                ]
            ]
        }
    };
}

// ‚úÖ –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –ö–õ–ê–í–ò–ê–¢–£–†–ê: –ó–∞–º–µ–Ω—è–µ–º "–°–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ" –Ω–∞ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Å–ª–æ–≤–æ"
function getNewWordsKeyboard() {
    return {
        reply_markup: {
            inline_keyboard: [
                [{ text: '‚úÖ –í—ã—É—á–∏–ª', callback_data: 'learned_word' }],
                [{ text: 'üîÑ –ù—É–∂–Ω–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å', callback_data: 'need_repeat_word' }],
                [{ text: '‚úçÔ∏è –ü—Ä–∞–≤–æ–ø–∏—Å–∞–Ω–∏–µ', callback_data: 'spelling_train' }], // ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û
                [{ text: '‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Å–ª–æ–≤–æ', callback_data: 'skip_new_word' }]
            ]
        }
    };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é
async function showMainMenu(chatId, text = '') {
    try {
        if (text && text.trim() !== '') {
            return await bot.sendMessage(chatId, text, getMainMenu());
        } else {
            return await bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', getMainMenu());
        }
    } catch (error) {
        optimizedLog('‚ùå Error showing main menu:', error);
        try {
            await bot.sendMessage(chatId, text || '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:');
        } catch (e) {
            optimizedLog('‚ùå Critical error sending message:', e);
        }
    }
}

// ‚úÖ –§–£–ù–ö–¶–ò–Ø: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å JSON —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
async function saveWordWithMeanings(chatId, userState, selectedTranslations) {
    optimizedLog('üíæ Saving word with meanings:', { 
        word: userState.tempWord, 
        selectedTranslations: selectedTranslations 
    });
    
    let success = true;
    
    if (servicesInitialized && sheetsService.initialized) {
        try {
            const existingWords = await getCachedUserWords(chatId);
            const isDuplicate = existingWords.some(word => 
                word.english.toLowerCase() === userState.tempWord.toLowerCase()
            );
            
            if (isDuplicate) {
                await showMainMenu(chatId, 
                    `‚ùå –°–ª–æ–≤–æ "${userState.tempWord}" —É–∂–µ –µ—Å—Ç—å –≤ –≤–∞—à–µ–º —Å–ª–æ–≤–∞—Ä–µ!\n\n` +
                    '–ö–∞–∂–¥–æ–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–æ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑.'
                );
                userStates.delete(chatId);
                return;
            }
        } catch (error) {
            optimizedLog('‚ùå Error checking duplicates:', error);
        }

        const meaningsData = [];
        selectedTranslations.forEach(translation => {
            const cambridgeMeanings = userState.meanings.filter(
                meaning => meaning.translation === translation
            );
            
            if (cambridgeMeanings.length === 0) {
                meaningsData.push({
                    translation: translation,
                    example: '',
                    partOfSpeech: '',
                    definition: ''
                });
            } else {
                cambridgeMeanings.forEach(meaning => {
                    meaningsData.push({
                        translation: translation,
                        example: meaning.examples && meaning.examples.length > 0 ? meaning.examples[0].english : '',
                        partOfSpeech: meaning.partOfSpeech || '',
                        definition: meaning.englishDefinition || ''
                    });
                });
            }
        });

        optimizedLog('üìù Meanings data for JSON:', meaningsData);

        success = await sheetsService.addWordWithMeanings(
            chatId,
            userState.tempWord,
            userState.tempTranscription,
            userState.tempAudioUrl,
            meaningsData
        );
    }

    userStates.delete(chatId);

    if (success) {
        const transcriptionText = userState.tempTranscription ? ` [${userState.tempTranscription}]` : '';
        let successMessage = '‚úÖ –°–ª–æ–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–ª–æ–≤–∞—Ä—å!\n\n' +
            `üí¨ **${userState.tempWord}**${transcriptionText}\n\n` +
            '**–î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:**\n';
        
        selectedTranslations.forEach((translation, index) => {
            successMessage += `\n${index + 1}. ${translation}`;
        });
        
        successMessage += '\n\nüìö –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏–∑—É—á–∞—Ç—å —Å–ª–æ–≤–æ –≤ —Ä–∞–∑–¥–µ–ª–µ "üÜï –ù–æ–≤—ã–µ —Å–ª–æ–≤–∞"!';
        await showMainMenu(chatId, successMessage);
    } else {
        await showMainMenu(chatId, 
            '‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è\n\n' +
            '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–ª–æ–≤–æ –≤ —Å–ª–æ–≤–∞—Ä—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.'
        );
    }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞ –±–µ–∑ –ø—Ä–∏–º–µ—Ä–∞
async function processCustomTranslationWithoutExample(chatId, userState) {
    const newTranslations = [userState.customTranslation, ...userState.tempTranslations];
    const newMeaning = {
        translation: userState.customTranslation,
        englishDefinition: '',
        examples: []
    };
    const newMeanings = [newMeaning, ...userState.meanings];
    
    userStates.set(chatId, {
        ...userState,
        state: 'choosing_translation',
        tempTranslations: newTranslations,
        meanings: newMeanings,
        selectedTranslationIndices: [0]
    });

    const successMessage = `‚úÖ –í–∞—à –ø–µ—Ä–µ–≤–æ–¥ "${userState.customTranslation}" –¥–æ–±–∞–≤–ª–µ–Ω!\n\n` +
        'üéØ –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥—ã –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å:\n' +
        '‚úÖ –í–∞—à –ø–µ—Ä–µ–≤–æ–¥ –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã–π';
    
    await bot.sendMessage(chatId, successMessage, 
        getTranslationSelectionKeyboard(newTranslations, newMeanings, [0])
    );
    await showMainMenu(chatId);
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞ —Å –ø—Ä–∏–º–µ—Ä–æ–º
async function processCustomTranslationWithExample(chatId, userState, example) {
    const newTranslations = [userState.customTranslation, ...userState.tempTranslations];
    const newMeaning = {
        translation: userState.customTranslation,
        englishDefinition: '',
        examples: example ? [{ english: example, russian: '' }] : []
    };
    const newMeanings = [newMeaning, ...userState.meanings];
    
    userStates.set(chatId, {
        ...userState,
        state: 'choosing_translation',
        tempTranslations: newTranslations,
        meanings: newMeanings,
        selectedTranslationIndices: [0]
    });

    let successMessage = `‚úÖ –í–∞—à –ø–µ—Ä–µ–≤–æ–¥ "${userState.customTranslation}" –¥–æ–±–∞–≤–ª–µ–Ω!\n\n`;
    if (example) {
        successMessage += `üìù –ü—Ä–∏–º–µ—Ä: ${example}\n\n`;
    }
    successMessage += 'üéØ –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥—ã –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å:\n' +
        '‚úÖ –í–∞—à –ø–µ—Ä–µ–≤–æ–¥ –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã–π';
    
    await bot.sendMessage(chatId, successMessage, 
        getTranslationSelectionKeyboard(newTranslations, newMeanings, [0])
    );
    await showMainMenu(chatId);
}

// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü—Ä–æ–≤–µ—Ä–∫–∞ –µ—Å—Ç—å –ª–∏ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
async function hasWordsForReview(userId) {
    if (!servicesInitialized || !sheetsService.initialized) {
        return false;
    }
    
    try {
        const wordsToReview = await sheetsService.getWordsForReview(userId);
        
        // ‚úÖ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: —Ç–æ–ª—å–∫–æ —Å–ª–æ–≤–∞ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º > 1
        const validReviewWords = wordsToReview.filter(word => word.interval > 1);
        
        optimizedLog(`üîç Check review words for ${userId}: ${validReviewWords.length} valid words`);
        return validReviewWords.length > 0;
        
    } catch (error) {
        optimizedLog('‚ùå Error checking words for review:', error);
        return false;
    }
}

// ‚úÖ –£–ü–†–û–©–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø: –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ—Ç–∏—Ñ–∏–∫–∞—Ü–∏–π
async function sendReviewNotification(chatId) {
    try {
        const hasWords = await hasWordsForReview(chatId);
        
        if (hasWords) {
            const wordsCount = await sheetsService.getReviewWordsCount(chatId);
            const userWords = await getCachedUserWords(chatId);
            
            const newWords = userWords.filter(word => word.interval === 1).length;
            
            let message = 'üîî **–í—Ä–µ–º—è —É—á–∏—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–π!**\n\n';
            
            if (wordsCount > 0) {
                message += `üìö **–ì–æ—Ç–æ–≤–æ –∫ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—é:** ${wordsCount} —Å–ª–æ–≤\n`;
            }
            
            if (newWords > 0) {
                message += `üÜï **–ù–æ–≤—ã—Ö —Å–ª–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–æ:** ${newWords}\n`;
            }
            
            message += `\nüí™ –ü–æ—Ç—Ä–∞—Ç—å—Ç–µ –≤—Å–µ–≥–æ 5-10 –º–∏–Ω—É—Ç –Ω–∞ –∏–∑—É—á–µ–Ω–∏–µ!`;

            const keyboard = {
                reply_markup: {
                    inline_keyboard: []
                }
            };
            
            if (wordsCount > 0) {
                keyboard.reply_markup.inline_keyboard.push([
                    { text: `üìö –ü–æ–≤—Ç–æ—Ä–∏—Ç—å —Å–ª–æ–≤–∞ (${wordsCount})`, callback_data: 'start_review_from_notification' }
                ]);
            }
            
            if (newWords > 0) {
                keyboard.reply_markup.inline_keyboard.push([
                    { text: `üÜï –ò–∑—É—á–∏—Ç—å –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞ (${newWords})`, callback_data: 'start_learning_from_notification' }
                ]);
            }
            
            await bot.sendMessage(chatId, message, keyboard);
            
            optimizedLog(`‚úÖ Sent notification to ${chatId}`);
            return true;
        } else {
            optimizedLog(`‚ÑπÔ∏è No words for review for ${chatId}, skipping notification`);
            return false;
        }
    } catch (error) {
        optimizedLog('‚ùå Error sending review notification:', error);
        return false;
    }
}

// ‚úÖ –£–ü–†–û–©–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ—Ç–∏—Ñ–∏–∫–∞—Ü–∏–π
async function checkAndSendNotifications() {
    optimizedLog('üîî Checking notifications for all users...');
    
    if (!servicesInitialized || !sheetsService.initialized) {
        optimizedLog('‚ùå Sheets service not initialized, skipping notifications');
        return;
    }
    
    try {
        const activeUsers = await sheetsService.getAllActiveUsers();
        optimizedLog(`üìã Found ${activeUsers.length} active users`);
        
        let sentCount = 0;
        
        for (const userId of activeUsers) {
            try {
                const sent = await sendReviewNotification(userId);
                if (sent) {
                    sentCount++;
                    // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
                    await new Promise(resolve => setTimeout(resolve, 500));
                }
            } catch (userError) {
                optimizedLog(`‚ùå Error processing user ${userId}:`, userError);
            }
        }
        
        optimizedLog(`üì¢ Notification check completed: ${sentCount} sent`);
        
    } catch (error) {
        optimizedLog('‚ùå Error in notification check:', error);
    }
}

// ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –ü—Ä–æ—Å—Ç–æ–π —Ç—Ä–µ–Ω–∞–∂–µ—Ä –ø—Ä–∞–≤–æ–ø–∏—Å–∞–Ω–∏—è
async function startSpellingTraining(chatId, context) {
    const userState = userStates.get(chatId);
    if (!userState) return;

    let word;
    let originalState;

    if (context === 'review' && userState.state === 'review_session') {
        word = userState.reviewWords[userState.currentReviewIndex];
        originalState = { ...userState };
    } else if (context === 'learning' && userState.state === 'learning_new_words') {
        word = userState.newWords[userState.currentWordIndex];
        originalState = { ...userState };
    } else {
        return;
    }

    if (!word) return;

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Ç—Ä–µ–Ω–∞–∂–µ—Ä
    userStates.set(chatId, {
        state: 'spelling_training',
        originalState: originalState,
        originalContext: context,
        trainingWord: word,
        attempts: 0,
        lastActivity: Date.now()
    });

    await askSpellingQuestion(chatId, word);
}

// ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ –ø—Ä–∞–≤–æ–ø–∏—Å–∞–Ω–∏—é
async function askSpellingQuestion(chatId, word) {
    const message = `‚úçÔ∏è **–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –ø—Ä–∞–≤–æ–ø–∏—Å–∞–Ω–∏—è**\n\n` +
                   `üá∑üá∫ –ü–µ—Ä–µ–≤–æ–¥: **${word.meanings[0]?.translation || '–ø–µ—Ä–µ–≤–æ–¥'}**\n\n` +
                   `‚úèÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ:`;

    await bot.sendMessage(chatId, message, {
        reply_markup: {
            keyboard: [['üîô –ù–∞–∑–∞–¥ –∫ –∫–∞—Ä—Ç–æ—á–∫–µ']],
            resize_keyboard: true
        }
    });
}

// ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç–≤–µ—Ç
async function checkSpellingAnswer(chatId, userAnswer) {
    const userState = userStates.get(chatId);
    if (!userState || userState.state !== 'spelling_training') return;

    const word = userState.trainingWord;
    const correct = word.english.toLowerCase();
    const answer = userAnswer.trim().toLowerCase();
    
    userState.attempts++;

    if (answer === correct) {
        await bot.sendMessage(chatId, 
            `‚úÖ **–ü—Ä–∞–≤–∏–ª—å–Ω–æ!**\n\n` +
            `üá¨üáß ${word.english}\n` +
            `üî§ ${word.transcription || ''}`
        );
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –∫–∞—Ä—Ç–æ—á–∫–µ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => returnToCard(chatId, userState), 2000);
    } else {
        await bot.sendMessage(chatId, 
            `‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!\n` +
            `üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –Ω–∞ "${word.english[0]}"`
        );
        
        // –ü–æ—Å–ª–µ 3 –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
        if (userState.attempts >= 3) {
            setTimeout(async () => {
                await bot.sendMessage(chatId, 
                    `üí° –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: **${word.english}**\n` +
                    `–í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –∫–∞—Ä—Ç–æ—á–∫–µ...`
                );
                setTimeout(() => returnToCard(chatId, userState), 2000);
            }, 1000);
        }
    }
}

// ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫–∞—Ä—Ç–æ—á–∫–µ
async function returnToCard(chatId, userState) {
    const originalState = userState.originalState;
    const context = userState.originalContext;
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    userStates.set(chatId, originalState);
    
    if (context === 'review') {
        await showReviewAnswer(chatId);
    } else if (context === 'learning') {
        await showNextNewWord(chatId);
    }
}

// ‚úÖ –£–ü–†–û–©–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø: –ó–∞–ø—É—Å–∫ –Ω–æ—Ç–∏—Ñ–∏–∫–∞—Ü–∏–π
function startOptimizedNotifications() {
    optimizedLog('üí∞ –ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–æ—Ç–∏—Ñ–∏–∫–∞—Ü–∏–π...');
    
    // –û—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞
    setInterval(async () => {
        await checkAndSendNotifications().catch(console.error);
    }, 2 * 60 * 60 * 1000);
    
    // –£—Ç—Ä–µ–Ω–Ω—è—è –Ω–æ—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –≤ 9:00
    scheduleMorningNotification();
}

function scheduleMorningNotification() {
    const now = new Date();
    const nextMorning = new Date();
    
    nextMorning.setHours(9, 0, 0, 0);
    if (now >= nextMorning) {
        nextMorning.setDate(nextMorning.getDate() + 1);
    }
    
    const timeUntilMorning = nextMorning.getTime() - now.getTime();
    
    setTimeout(() => {
        optimizedLog('üåÖ Sending morning notifications...');
        checkAndSendNotifications();
        scheduleMorningNotification();
    }, timeUntilMorning);
}

// ‚úÖ –§–£–ù–ö–¶–ò–Ø: –ù–∞—á–∞–ª–æ —Å–µ—Å—Å–∏–∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
async function startReviewSession(chatId) {
    await initializeServices();
    
    if (!sheetsService.initialized) {
        await bot.sendMessage(chatId, '‚ùå Google Sheets –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.');
        return;
    }

    try {
        const wordsToReview = await sheetsService.getWordsForReview(chatId);
        
        // ‚úÖ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ô –§–ò–õ–¨–¢–†: —Ç–æ–ª—å–∫–æ –∏–∑—É—á–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
        const validReviewWords = wordsToReview.filter(word => word.interval > 1);
        
        optimizedLog(`üîç Review session for ${chatId}: ${validReviewWords.length} valid words`);
        
        if (validReviewWords.length === 0) {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            const userWords = await getCachedUserWords(chatId);
            const activeWords = userWords.filter(word => word.status === 'active');
            const learnedWords = activeWords.filter(word => word.interval > 1);
            const newWords = activeWords.filter(word => word.interval === 1);
            
            let message = 'üìä **–°—Ç–∞—Ç—É—Å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π:**\n\n';
            message += `‚Ä¢ –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–ª–æ–≤: ${activeWords.length}\n`;
            message += `‚Ä¢ –ò–∑—É—á–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤: ${learnedWords.length}\n`;
            message += `‚Ä¢ –ù–æ–≤—ã—Ö —Å–ª–æ–≤: ${newWords.length}\n`;
            message += `‚Ä¢ –°–ª–æ–≤ –≥–æ—Ç–æ–≤–æ –∫ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—é: 0\n\n`;
            
            if (learnedWords.length === 0) {
                message += 'üí° –°–Ω–∞—á–∞–ª–∞ –∏–∑—É—á–∏—Ç–µ —Å–ª–æ–≤–∞ –≤ —Ä–∞–∑–¥–µ–ª–µ "üÜï –ù–æ–≤—ã–µ —Å–ª–æ–≤–∞"';
            } else {
                message += '‚è∞ –°–ª–æ–≤–∞ –ø–æ—è–≤—è—Ç—Å—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è —Å–æ–≥–ª–∞—Å–Ω–æ –∏—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º';
            }
            
            await bot.sendMessage(chatId, message);
            return;
        }

        userStates.set(chatId, {
            state: 'review_session',
            reviewWords: validReviewWords,
            currentReviewIndex: 0,
            reviewedCount: 0,
            lastActivity: Date.now()
        });

        await showNextReviewWord(chatId);
        
    } catch (error) {
        optimizedLog('‚ùå Error starting review session:', error);
        await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ª–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è.');
    }
}

// ‚úÖ –£–õ–£–ß–®–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü–æ–∫–∞–∑ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
async function showNextReviewWord(chatId) {
    const userState = userStates.get(chatId);
    if (!userState || userState.state !== 'review_session') {
        await bot.sendMessage(chatId, '‚ùå –°–µ—Å—Å–∏—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.');
        return;
    }

    const { reviewWords, currentReviewIndex, reviewedCount } = userState;
    
    if (!reviewWords || reviewWords.length === 0) {
        await bot.sendMessage(chatId, '‚ùå –ù–µ—Ç —Å–ª–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è.');
        userStates.delete(chatId);
        return;
    }
    
    // ‚úÖ –ü–†–û–í–ï–†–ö–ê: –µ—Å–ª–∏ –¥–æ—à–ª–∏ –¥–æ –∫–æ–Ω—Ü–∞ –º–∞—Å—Å–∏–≤–∞
    if (currentReviewIndex >= reviewWords.length) {
        optimizedLog(`üéØ All words reviewed, completing session`);
        await completeReviewSession(chatId, userState);
        return;
    }

    const word = reviewWords[currentReviewIndex];
    
    if (!word) {
        optimizedLog(`‚ùå Word not found at index ${currentReviewIndex}`);
        userState.currentReviewIndex++;
        await showNextReviewWord(chatId);
        return;
    }
    
    const progress = `${currentReviewIndex + 1}/${reviewWords.length} (${reviewedCount} –æ—Ü–µ–Ω–µ–Ω–æ)`;
    
    let message = `üìö –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ —Å–ª–æ–≤ ${progress}\n\n`;
    message += `üá¨üáß **${word.english}**\n`;
    
    if (word.transcription) {
        message += `üî§ ${word.transcription}\n`;
    }
    
    message += `\nüí° –í—Å–ø–æ–º–Ω–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ –∏ –Ω–∞–∂–º–∏—Ç–µ "–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç"`;

    await bot.sendMessage(chatId, message, {
        reply_markup: {
            inline_keyboard: [
                [{ text: 'üëÄ –ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç', callback_data: 'show_answer' }],
                [{ text: '‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data: 'skip_review' }],
                [{ text: '‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ', callback_data: 'end_review' }]
            ]
        }
    });
}

// ‚úÖ –£–õ–£–ß–®–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
async function showReviewAnswer(chatId) {
    const userState = userStates.get(chatId);
    if (!userState || userState.state !== 'review_session') {
        await bot.sendMessage(chatId, '‚ùå –°–µ—Å—Å–∏—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');
        return;
    }

    const word = userState.reviewWords[userState.currentReviewIndex];
    
    if (!word) {
        await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞: —Å–ª–æ–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.');
        return;
    }
    
    let message = `üìö **–û—Ç–≤–µ—Ç:**\n\n`;
    message += `üá¨üáß **${word.english}**\n`;
    
    if (word.transcription) {
        message += `üî§ ${word.transcription}\n`;
    }
    
    message += `\nüá∑üá∫ **–ü–µ—Ä–µ–≤–æ–¥—ã:**\n`;
    
    if (word.meanings && Array.isArray(word.meanings)) {
        word.meanings.forEach((meaning, index) => {
            message += `\n${index + 1}. ${meaning.translation || '–ü–µ—Ä–µ–≤–æ–¥ –Ω–µ —É–∫–∞–∑–∞–Ω'}`;
            if (meaning.definition) {
                message += ` - ${meaning.definition}`;
            }
            if (meaning.example && meaning.example.trim() !== '') {
                message += `\n   üìù *–ü—Ä–∏–º–µ—Ä:* ${meaning.example}`;
            }
        });
    } else {
        message += `\n‚ùå –ü–µ—Ä–µ–≤–æ–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã`;
    }

    if (word.audioUrl) {
        try {
            await bot.sendAudio(chatId, word.audioUrl, {
                caption: 'üîä –ü—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ'
            });
        } catch (error) {
            optimizedLog('‚ùå Audio not available for review word:', error);
        }
    }

    await bot.sendMessage(chatId, message, getReviewKeyboard());
}

// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ü–µ–Ω–∫–∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
async function processReviewRating(chatId, rating) {
    const userState = userStates.get(chatId);
    if (!userState || userState.state !== 'review_session') return;

    const word = userState.reviewWords[userState.currentReviewIndex];
    
    optimizedLog(`üîß Processing rating: ${rating} for word: ${word.english}, index: ${userState.currentReviewIndex}/${userState.reviewWords.length}`);
    
    try {
        const cardData = {
            due: word.nextReview ? new Date(word.nextReview) : new Date(),
            stability: word.stability || 0.1,
            difficulty: word.difficulty || 5.0,
            elapsed_days: word.elapsed_days || 0,
            scheduled_days: word.scheduled_days || 1,
            reps: word.reps || 0,
            lapses: word.lapses || 0,
            state: word.state || 1,
            last_review: word.lastReview ? new Date(word.lastReview) : new Date()
        };

        const fsrsData = fsrsService.reviewCard(cardData, rating);

        const success = await batchSheetsService.updateWordReviewBatch(
            chatId,
            word.english,
            fsrsData.interval,
            fsrsData.due,
            new Date()
        );

        if (success) {
            userState.reviewedCount++;
            userState.currentReviewIndex++; // ‚úÖ –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å
            
            optimizedLog(`üîß After rating: index=${userState.currentReviewIndex}, total=${userState.reviewWords.length}`);

            // ‚úÖ –ü–†–û–í–ï–†–Ø–ï–ú –ó–ê–í–ï–†–®–ï–ù–ò–ï –°–ï–°–°–ò–ò
            if (userState.currentReviewIndex >= userState.reviewWords.length) {
                optimizedLog(`üéØ Session completed: ${userState.reviewedCount} words reviewed`);
                await completeReviewSession(chatId, userState);
            } else {
                // ‚úÖ –ü–†–û–î–û–õ–ñ–ê–ï–ú –°–õ–ï–î–£–Æ–©–ï–ï –°–õ–û–í–û
                userState.lastActivity = Date.now();
                await showNextReviewWord(chatId);
            }
        } else {
            await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏.');
        }

    } catch (error) {
        optimizedLog('‚ùå Error processing review rating:', error);
        // ‚úÖ –ü–†–ò –û–®–ò–ë–ö–ï –¢–û–ñ–ï –ü–†–û–î–û–õ–ñ–ê–ï–ú
        userState.currentReviewIndex++;
        if (userState.currentReviewIndex >= userState.reviewWords.length) {
            await completeReviewSession(chatId, userState);
        } else {
            await showNextReviewWord(chatId);
        }
    }
}

// ‚úÖ –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
async function completeReviewSession(chatId, userState) {
    const totalWords = userState.reviewWords.length;
    const reviewedCount = userState.reviewedCount;
    const skippedCount = totalWords - reviewedCount;
    
    userStates.delete(chatId);

    let message = 'üéâ **–°–µ—Å—Å–∏—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**\n\n';
    message += `üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n`;
    message += `‚Ä¢ –í—Å–µ–≥–æ —Å–ª–æ–≤: ${totalWords}\n`;
    message += `‚Ä¢ –ü–æ–≤—Ç–æ—Ä–µ–Ω–æ: ${reviewedCount}\n`;
    
    if (skippedCount > 0) {
        message += `‚Ä¢ –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${skippedCount}\n`;
    }
    
    if (reviewedCount > 0) {
        const progressPercentage = Math.round((reviewedCount / totalWords) * 100);
        message += `‚Ä¢ –ü—Ä–æ–≥—Ä–µ—Å—Å: ${progressPercentage}%\n\n`;
    } else {
        message += `\n`;
    }
    
    message += `üí° –í—ã –º–æ–∂–µ—Ç–µ:\n`;
    message += `‚Ä¢ –ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è\n`;
    message += `‚Ä¢ –ò–∑—É—á–∏—Ç—å –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞\n`;
    message += `‚Ä¢ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n`;
    
    // ‚úÖ –ü–†–û–í–ï–†–Ø–ï–ú –ï–°–¢–¨ –õ–ò –ï–©–ï –°–õ–û–í–ê –î–õ–Ø –ü–û–í–¢–û–†–ï–ù–ò–Ø
    const hasMoreWords = await hasWordsForReview(chatId);
    if (hasMoreWords) {
        const remainingCount = await sheetsService.getReviewWordsCount(chatId);
        message += `\nüìö –û—Å—Ç–∞–ª–æ—Å—å —Å–ª–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è: ${remainingCount}`;
    }
    
    await bot.sendMessage(chatId, message, getMainMenu());
}

// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ù–∞—á–∞–ª–æ —Å–µ—Å—Å–∏–∏ –∏–∑—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Å–ª–æ–≤
async function startNewWordsSession(chatId) {
    await initializeServices();
    
    if (!sheetsService.initialized) {
        await bot.sendMessage(chatId, '‚ùå Google Sheets –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.');
        return;
    }

    try {
        const learnedToday = await getLearnedToday(chatId);
        const DAILY_LIMIT = 5;
        
        optimizedLog(`üîç –°—Ç–∞—Ä—Ç —Å–µ—Å—Å–∏–∏ –∏–∑—É—á–µ–Ω–∏—è –¥–ª—è ${chatId}, –∏–∑—É—á–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è: ${learnedToday}/${DAILY_LIMIT}`);

        if (learnedToday >= DAILY_LIMIT) {
            await bot.sendMessage(chatId, 
                `üéâ –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞!\n\n` +
                `üìä –ò–∑—É—á–µ–Ω–æ —Å–ª–æ–≤ —Å–µ–≥–æ–¥–Ω—è: ${learnedToday}/${DAILY_LIMIT}\n\n` +
                'üí° –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∑–∞–≤—Ç—Ä–∞ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Å–ª–æ–≤!\n' +
                'üìö –ú–æ–∂–µ—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —É–∂–µ –∏–∑—É—á–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞\n\n' +
                'üîÑ –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /reset_progress —á—Ç–æ–±—ã —Å–±—Ä–æ—Å–∏—Ç—å –ª–∏–º–∏—Ç'
            );
            return;
        }

        const availableNewWords = await getAvailableNewWordsForToday(chatId, learnedToday);
        
        if (availableNewWords.length === 0) {
            await bot.sendMessage(chatId, 
                `üéâ –ù–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–æ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –Ω–µ—Ç!\n\n` +
                `üìä –ò–∑—É—á–µ–Ω–æ —Å–ª–æ–≤ —Å–µ–≥–æ–¥–Ω—è: ${learnedToday}/${DAILY_LIMIT}\n\n` +
                'üí° –í—ã –º–æ–∂–µ—Ç–µ:\n' +
                '‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –º–µ–Ω—é "‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ"\n' +
                '‚Ä¢ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å —É–∂–µ –∏–∑—É—á–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞\n' +
                '‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /reset_progress —á—Ç–æ–±—ã —Å–±—Ä–æ—Å–∏—Ç—å –ª–∏–º–∏—Ç'
            );
            return;
        }

        userStates.set(chatId, {
            state: 'learning_new_words',
            newWords: availableNewWords,
            currentWordIndex: 0,
            learnedCount: 0,
            originalWordsCount: availableNewWords.length,
            lastActivity: Date.now()
        });

        optimizedLog(`üéØ –ù–∞—á–∞—Ç–∞ —Å–µ—Å—Å–∏—è –∏–∑—É—á–µ–Ω–∏—è –¥–ª—è ${chatId}, –¥–æ—Å—Ç—É–ø–Ω–æ —Å–ª–æ–≤: ${availableNewWords.length}`);
        await showNextNewWord(chatId);
        
    } catch (error) {
        optimizedLog('‚ùå Error starting new words session:', error);
        await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–æ–≤—ã—Ö —Å–ª–æ–≤.');
    }
}

// ‚úÖ –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–æ–≤—ã—Ö —Å–ª–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
async function getAvailableNewWordsForToday(chatId, alreadyLearnedToday) {
    if (!servicesInitialized || !sheetsService.initialized) {
        return [];
    }
    
    try {
        const userWords = await getCachedUserWords(chatId);
        const DAILY_LIMIT = 5;
        
        optimizedLog(`üîç –ü–æ–∏—Å–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–æ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è ${chatId}, —É–∂–µ –∏–∑—É—á–µ–Ω–æ: ${alreadyLearnedToday}`);

        const unlearnedWords = userWords.filter(word => {
            if (!word.nextReview || word.status !== 'active') return false;
            
            try {
                const isNewWord = word.interval === 1;
                const isNotLearned = !isWordLearned(chatId, word.english);
                return isNewWord && isNotLearned;
            } catch (error) {
                optimizedLog(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–ª–æ–≤–∞ "${word.english}"`);
                return false;
            }
        });

        optimizedLog(`üìä –ù–∞–π–¥–µ–Ω–æ –Ω–µ –∏–∑—É—á–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤: ${unlearnedWords.length}`);

        unlearnedWords.sort((a, b) => new Date(b.createdDate) - new Date(a.createdDate));

        const remainingSlots = Math.max(0, DAILY_LIMIT - alreadyLearnedToday);
        const result = unlearnedWords.slice(0, remainingSlots);
        
        optimizedLog(`üéØ –ë—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω–æ: ${result.length} —Å–ª–æ–≤ (–æ—Å—Ç–∞–ª–æ—Å—å —Å–ª–æ—Ç–æ–≤: ${remainingSlots})`);
        return result;
        
    } catch (error) {
        optimizedLog('‚ùå Error getting available new words:', error);
        return [];
    }
}

// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü–æ–∫–∞–∑ —Å–ª–µ–¥—É—é—â–µ–≥–æ –Ω–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞
async function showNextNewWord(chatId) {
    const userState = userStates.get(chatId);
    if (!userState || userState.state !== 'learning_new_words') return;

    const { newWords, currentWordIndex } = userState;
    
    if (newWords.length === 0) {
        await completeNewWordsSession(chatId, userState);
        return;
    }

    if (currentWordIndex >= newWords.length) {
        userState.currentWordIndex = 0;
    }

    const word = newWords[userState.currentWordIndex];
    
    const currentLearnedToday = await getLearnedToday(chatId);
    const remainingSlots = Math.max(0, 5 - currentLearnedToday);
    
    const currentPosition = userState.currentWordIndex + 1;
    const totalWords = newWords.length;
    const progress = `${currentPosition}/${totalWords}`;
    
    let message = `üÜï –ò–∑—É—á–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Å–ª–æ–≤ ${progress}\n\n`;
    message += `üìä –ò–∑—É—á–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è: ${currentLearnedToday}/5\n\n`;
    message += `üá¨üáß **${word.english}**\n`;
    
    if (word.transcription) {
        message += `üî§ ${word.transcription}\n`;
    }
    
    message += `\nüá∑üá∫ **–ü–µ—Ä–µ–≤–æ–¥—ã:**\n`;
    
    word.meanings.forEach((meaning, index) => {
        message += `\n${index + 1}. ${meaning.translation}`;
        if (meaning.definition) {
            message += ` - ${meaning.definition}`;
        }
        
        if (meaning.example && meaning.example.trim() !== '') {
            message += `\n   üìù *–ü—Ä–∏–º–µ—Ä:* ${meaning.example}`;
        }
    });

    if (word.audioUrl) {
        try {
            await bot.sendAudio(chatId, word.audioUrl, {
                caption: 'üîä –ü—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ'
            });
        } catch (error) {
            optimizedLog('‚ùå Audio not available for new word');
        }
    }

    await bot.sendMessage(chatId, message, getNewWordsKeyboard());
}

// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞
async function processNewWordLearning(chatId, action) {
    const userState = userStates.get(chatId);
    if (!userState || userState.state !== 'learning_new_words') return;

    const word = userState.newWords[userState.currentWordIndex];
    
    try {
        if (action === 'learned') {
            const newInterval = 2;
            const nextReview = new Date(Date.now() + newInterval * 24 * 60 * 60 * 1000);
            const today = new Date();
            
            optimizedLog(`üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–ª–æ–≤–∞ "${word.english}" –∫–∞–∫ –∏–∑—É—á–µ–Ω–Ω–æ–≥–æ —Å–µ–≥–æ–¥–Ω—è: ${today}`);
            
            // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞—Ç—á–∏–Ω–≥ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            const success = await batchSheetsService.updateWordReviewBatch(
                chatId,
                word.english,
                newInterval,
                nextReview,
                today
            );

            if (success) {
                userState.learnedCount++;
                markWordAsLearned(chatId, word.english);
                optimizedLog(`üìö –°–ª–æ–≤–æ "${word.english}" –∏–∑—É—á–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è: ${today}`);
                
                userState.newWords.splice(userState.currentWordIndex, 1);
                
                optimizedLog(`‚úÖ –°–ª–æ–≤–æ "${word.english}" —É–¥–∞–ª–µ–Ω–æ –∏–∑ —Å–ø–∏—Å–∫–∞. –û—Å—Ç–∞–ª–æ—Å—å —Å–ª–æ–≤: ${userState.newWords.length}`);
                
                const currentLearnedToday = await getLearnedToday(chatId);
                optimizedLog(`üìà –ü–æ—Å–ª–µ –∏–∑—É—á–µ–Ω–∏—è "${word.english}": ${currentLearnedToday}/5 –∏–∑—É—á–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è`);
                
                if (currentLearnedToday >= 5) {
                    await bot.sendMessage(chatId, 
                        `üéâ –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞ –≤ 5 —Å–ª–æ–≤!\n\n` +
                        `üìä –ò–∑—É—á–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è: ${currentLearnedToday}/5\n\n` +
                        'üí° –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∑–∞–≤—Ç—Ä–∞ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Å–ª–æ–≤.'
                    );
                    await completeNewWordsSession(chatId, userState);
                    return;
                }
                
            } else {
                optimizedLog(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è —Å–ª–æ–≤–∞ "${word.english}"`);
                await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å–ª–æ–≤–∞.');
                return;
            }
            
        } else if (action === 'repeat') {
            optimizedLog(`üîÑ –°–ª–æ–≤–æ "${word.english}" –æ—Å—Ç–∞–ª–æ—Å—å –≤ –Ω–æ–≤—ã—Ö —Å–ª–æ–≤–∞—Ö –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è`);
            userState.currentWordIndex++;
            userState.lastActivity = Date.now();
            
        } else if (action === 'skip') {
            const skippedWord = userState.newWords.splice(userState.currentWordIndex, 1)[0];
            userState.newWords.push(skippedWord);
            optimizedLog(`‚è≠Ô∏è –°–ª–æ–≤–æ "${skippedWord.english}" –ø—Ä–æ–ø—É—â–µ–Ω–æ –∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–æ –≤ –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞`);
            userState.lastActivity = Date.now();
        }
        
        if (userState.currentWordIndex >= userState.newWords.length) {
            userState.currentWordIndex = 0;
            optimizedLog(`üîÑ –ò–Ω–¥–µ–∫—Å —Å–±—Ä–æ—à–µ–Ω –≤ 0 (–¥–æ—Å—Ç–∏–≥–Ω—É—Ç –∫–æ–Ω–µ—Ü –º–∞—Å—Å–∏–≤–∞)`);
        }
        
        if (userState.newWords.length === 0) {
            optimizedLog(`üéØ –í—Å–µ —Å–ª–æ–≤–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏`);
            await completeNewWordsSession(chatId, userState);
            return;
        }
        
        optimizedLog(`üîÑ –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–ª–æ–≤—É. –¢–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å: ${userState.currentWordIndex}, –≤—Å–µ–≥–æ —Å–ª–æ–≤: ${userState.newWords.length}`);
        await showNextNewWord(chatId);

    } catch (error) {
        optimizedLog('‚ùå Error processing new word learning:', error);
        await bot.sendMessage(chatId, 
            '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.\n' +
            '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /debug_stats –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏.'
        );
    }
}

// ‚úÖ –û–ë–ù–û–í–õ–Ø–ï–ú –§–£–ù–ö–¶–ò–Æ: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –∏–∑—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Å–ª–æ–≤
async function completeNewWordsSession(chatId, userState) {
    const currentLearnedToday = await getLearnedToday(chatId);
    const originalWordsCount = userState.originalWordsCount || (userState.newWords ? userState.newWords.length + userState.learnedCount : userState.learnedCount);
    const learnedCount = userState.learnedCount;
    
    userStates.delete(chatId);

    let message = 'üéâ **–°–µ—Å—Å–∏—è –∏–∑—É—á–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**\n\n';
    message += `üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n`;
    message += `‚Ä¢ –í—Å–µ–≥–æ –Ω–æ–≤—ã—Ö —Å–ª–æ–≤: ${originalWordsCount}\n`;
    message += `‚Ä¢ –ò–∑—É—á–µ–Ω–æ –≤ —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏: ${learnedCount}\n`;
    message += `‚Ä¢ –í—Å–µ–≥–æ –∏–∑—É—á–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è: ${currentLearnedToday}/5\n`;
    message += `‚Ä¢ –û—Ç–ª–æ–∂–µ–Ω–æ: ${originalWordsCount - learnedCount}\n\n`;
    
    if (currentLearnedToday >= 5) {
        message += `‚úÖ –î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –¥–æ—Å—Ç–∏–≥–Ω—É—Ç!\n`;
        message += `üí° –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∑–∞–≤—Ç—Ä–∞ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Å–ª–æ–≤.\n\n`;
    } else if (learnedCount === originalWordsCount && originalWordsCount > 0) {
        message += `üí™ –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –í—ã –∏–∑—É—á–∏–ª–∏ –≤—Å–µ –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞!\n\n`;
        message += `üîÑ –≠—Ç–∏ —Å–ª–æ–≤–∞ –ø–æ—è–≤—è—Ç—Å—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –∑–∞–≤—Ç—Ä–∞.`;
    } else if (originalWordsCount > 0) {
        message += `üí° –û—Å—Ç–∞–≤—à–∏–µ—Å—è —Å–ª–æ–≤–∞ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑.\n\n`;
    }
    
    const reviewWordsCount = await sheetsService.getReviewWordsCount(chatId);
    if (reviewWordsCount > 0) {
        message += `\nüìö –°–ª–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è: ${reviewWordsCount}\n`;
        message += `–ú–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –º–µ–Ω—é!`;
    }
    
    await bot.sendMessage(chatId, message, getMainMenu());
}

// ‚úÖ –û–ë–ù–û–í–õ–Ø–ï–ú –§–£–ù–ö–¶–ò–Æ: –ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å –≤—Ä–µ–º–µ–Ω–µ–º
async function showUserStats(chatId) {
    await initializeServices();
    
    if (!sheetsService.initialized) {
        await bot.sendMessage(chatId, '‚ùå Google Sheets –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.');
        return;
    }

    try {
        const userWords = await getCachedUserWords(chatId);
        const activeWords = userWords.filter(word => word.status === 'active');
        const reviewWordsCount = await sheetsService.getReviewWordsCount(chatId);
        
        const unlearnedWords = await getAllUnlearnedWords(chatId);
        const newWordsCount = unlearnedWords.length;
        
        const learnedToday = await getLearnedToday(chatId);
        const DAILY_LIMIT = 5;
        const remainingToday = Math.max(0, DAILY_LIMIT - learnedToday);
        
        let message = 'üìä **–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n\n';
        message += `üìö –í—Å–µ–≥–æ —Å–ª–æ–≤ –≤ —Å–ª–æ–≤–∞—Ä–µ: ${activeWords.length}\n`;
        message += `üîÑ –°–ª–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è: ${reviewWordsCount}\n`;
        message += `üÜï –ù–æ–≤—ã—Ö —Å–ª–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–æ: ${newWordsCount}\n`;
        message += `üìÖ –ò–∑—É—á–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è: ${learnedToday}/${DAILY_LIMIT}\n`;
        
        if (remainingToday > 0) {
            message += `üéØ –û—Å—Ç–∞–ª–æ—Å—å –∏–∑—É—á–∏—Ç—å —Å–µ–≥–æ–¥–Ω—è: ${remainingToday} —Å–ª–æ–≤\n`;
        } else {
            message += `‚úÖ –î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –¥–æ—Å—Ç–∏–≥–Ω—É—Ç!\n`;
        }
        
        if (activeWords.length > 0) {
            const now = new Date();
            
            const wordsWithFutureReview = activeWords
                .filter(word => word.interval > 1 && word.nextReview)
                .map(word => {
                    try {
                        const nextReview = new Date(word.nextReview);
                        const moscowNextReview = toMoscowTime(nextReview);
                        const moscowNow = toMoscowTime(now);
                        
                        const daysUntil = Math.ceil((moscowNextReview - moscowNow) / (1000 * 60 * 60 * 24));
                        return { word: word.english, daysUntil, nextReview: moscowNextReview };
                    } catch (error) {
                        return null;
                    }
                })
                .filter(item => item !== null && item.daysUntil >= 0)
                .sort((a, b) => a.daysUntil - b.daysUntil);

            if (wordsWithFutureReview.length > 0) {
                const nearestReview = wordsWithFutureReview[0];
                const formattedDate = formatConcreteDate(nearestReview.nextReview);
                message += `\n‚è∞ **–ë–ª–∏–∂–∞–π—à–µ–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ:** ${formattedDate}\n`;
                
                const reviewSchedule = {};
                wordsWithFutureReview.forEach(item => {
                    const dateKey = formatMoscowDate(item.nextReview);
                    reviewSchedule[dateKey] = (reviewSchedule[dateKey] || 0) + 1;
                });

                if (Object.keys(reviewSchedule).length > 0) {
                    message += `\nüìÖ **–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π:**\n`;
                    
                    const sortedDates = Object.keys(reviewSchedule).sort((a, b) => {
                        const dateA = new Date(a.split(' ')[0].split('.').reverse().join('-'));
                        const dateB = new Date(b.split(' ')[0].split('.').reverse().join('-'));
                        return dateA - dateB;
                    });
                    
                    sortedDates.slice(0, 5).forEach(date => {
                        message += `‚Ä¢ ${date}: ${reviewSchedule[date]} —Å–ª–æ–≤\n`;
                    });
                }
            }
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞ –∏ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ
        const serverTime = new Date();
        const moscowTime = toMoscowTime(serverTime);
        message += `\nüåç **–í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞:** ${serverTime.toLocaleString('ru-RU')}`;
        message += `\nüá∑üá∫ **–ú–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è:** ${moscowTime.toLocaleString('ru-RU')}`;
        
        await bot.sendMessage(chatId, message, getMainMenu());
        
    } catch (error) {
        optimizedLog('‚ùå Error showing stats:', error);
        await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.');
    }
}

// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–∞—Ç—ã —Å –≤—Ä–µ–º–µ–Ω–µ–º
function formatConcreteDate(date) {
    const now = new Date();
    const targetDate = new Date(date);
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤
    const moscowNow = toMoscowTime(now);
    const moscowTarget = toMoscowTime(targetDate);
    
    const diffTime = moscowTarget - moscowNow;
    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
    const diffHours = Math.ceil(diffTime / (1000 * 60 * 60));
    
    const day = moscowTarget.getDate().toString().padStart(2, '0');
    const month = (moscowTarget.getMonth() + 1).toString().padStart(2, '0');
    const year = moscowTarget.getFullYear();
    
    const hours = moscowTarget.getHours().toString().padStart(2, '0');
    const minutes = moscowTarget.getMinutes().toString().padStart(2, '0');
    
    const daysOfWeek = ['–≤—Å', '–ø–Ω', '–≤—Ç', '—Å—Ä', '—á—Ç', '–ø—Ç', '—Å–±'];
    const dayOfWeek = daysOfWeek[moscowTarget.getDay()];
    
    if (diffDays === 0) {
        if (diffHours <= 1) {
            return `${hours}:${minutes} (—á–µ—Ä–µ–∑ ${diffHours} —á–∞—Å)`;
        } else if (diffHours <= 24) {
            return `${hours}:${minutes} (—á–µ—Ä–µ–∑ ${diffHours} —á–∞—Å–æ–≤)`;
        } else {
            return `${day}.${month}.${year} ${hours}:${minutes}`;
        }
    } else if (diffDays === 1) {
        return `–∑–∞–≤—Ç—Ä–∞ ${hours}:${minutes}`;
    } else if (diffDays === 2) {
        return `${day}.${month}.${year} ${hours}:${minutes}`;
    } else if (diffDays <= 7) {
        return `${day}.${month}.${year} ${hours}:${minutes} (${dayOfWeek}, —á–µ—Ä–µ–∑ ${diffDays} –¥–Ω.)`;
    } else {
        return `${day}.${month}.${year} ${hours}:${minutes} (${dayOfWeek})`;
    }
}

// ‚úÖ –î–û–ë–ê–í–õ–Ø–ï–ú –§–£–ù–ö–¶–ò–Æ: –ü–æ–ª—É—á–µ–Ω–∏–µ –í–°–ï–• –Ω–µ –∏–∑—É—á–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤ (–±–µ–∑ —É—á–µ—Ç–∞ –ª–∏–º–∏—Ç–∞)
async function getAllUnlearnedWords(chatId) {
    if (!servicesInitialized || !sheetsService.initialized) {
        return [];
    }
    
    try {
        const userWords = await getCachedUserWords(chatId);
        
        optimizedLog(`üîç –ü–æ–∏—Å–∫ –í–°–ï–• –Ω–µ –∏–∑—É—á–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤ –¥–ª—è ${chatId}`);

        const unlearnedWords = userWords.filter(word => {
            if (!word.nextReview || word.status !== 'active') return false;
            
            try {
                const isNewWord = word.interval === 1;
                const isNotLearned = !isWordLearned(chatId, word.english);
                return isNewWord && isNotLearned;
            } catch (error) {
                optimizedLog(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–ª–æ–≤–∞ "${word.english}"`);
                return false;
            }
        });

        optimizedLog(`üìä –ù–∞–π–¥–µ–Ω–æ –≤—Å–µ—Ö –Ω–µ –∏–∑—É—á–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤: ${unlearnedWords.length}`);
        
        unlearnedWords.sort((a, b) => new Date(b.createdDate) - new Date(a.createdDate));

        return unlearnedWords;
        
    } catch (error) {
        optimizedLog('‚ùå Error getting all unlearned words:', error);
        return [];
    }
}

// ‚úÖ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–û: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ —Å–±—Ä–æ—Å–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
bot.onText(/\/reset_progress/, async (msg) => {
    const chatId = msg.chat.id;
    
    if (!servicesInitialized || !sheetsService.initialized) {
        await bot.sendMessage(chatId, '‚ùå Google Sheets –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.');
        return;
    }

    try {
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –±–æ—Ç–∞
        dailyLearnedWords.delete(chatId);
        learnedWords.delete(chatId);
        userStates.delete(chatId);
        
        // ‚úÖ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–û: –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ Google Sheets
        const success = await sheetsService.resetUserProgress(chatId);
        
        if (success) {
            optimizedLog(`üîÑ –ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${chatId}`);
            
            await bot.sendMessage(chatId, 
                '‚úÖ **–í–µ—Å—å –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–±—Ä–æ—à–µ–Ω!**\n\n' +
                '‚Ä¢ –í—Å–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã —Å–±—Ä–æ—à–µ–Ω—ã\n' +
                '‚Ä¢ –î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –æ—á–∏—â–µ–Ω\n' + 
                '‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –∏–∑—É—á–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∞\n' +
                '‚Ä¢ –í—Å–µ —Å–ª–æ–≤–∞ —Ç–µ–ø–µ—Ä—å "–Ω–æ–≤—ã–µ"\n\n' +
                'üí° –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∏–∑—É—á–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ!'
            );
        } else {
            await bot.sendMessage(chatId, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.');
        }
        
    } catch (error) {
        optimizedLog('‚ùå Error resetting progress:', error);
        await bot.sendMessage(chatId, 
            '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.\n' +
            '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.'
        );
    }
});

// –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
bot.onText(/\/start/, async (msg) => {
    const chatId = msg.chat.id;
    await initializeServices();
    await showMainMenu(chatId, 
        'üìö –ê–Ω–≥–ª–æ-—Ä—É—Å—Å–∫–∏–π —Å–ª–æ–≤–∞—Ä—å\n' +
        'üî§ –° —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–µ–π –∏ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ–º\n' +
        'üá¨üáß –ë—Ä–∏—Ç–∞–Ω—Å–∫–∏–π –≤–∞—Ä–∏–∞–Ω—Ç\n' +
        'üìù –ö–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ —Ö—Ä–∞–Ω–∏—Ç—Å—è —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏\n' +
        'üîÑ **–£–º–Ω–æ–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–æ–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ**\n' +
        'üîî **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è**\n\n' +
        'üí° **–ö–∞–∫ —É—á–∏—Ç—å —Å–ª–æ–≤–∞:**\n' +
        '1. ‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ\n' +
        '2. üÜï –ò–∑—É—á–∏—Ç—å –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞ (5 –≤ –¥–µ–Ω—å)\n' +
        '3. üìö –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∏–∑—É—á–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞\n\n' +
        '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:'
    );
});

bot.onText(/\/review/, async (msg) => {
    const chatId = msg.chat.id;
    await startReviewSession(chatId);
});

bot.onText(/\/stats/, async (msg) => {
    const chatId = msg.chat.id;
    await showUserStats(chatId);
});

bot.onText(/\/new/, async (msg) => {
    const chatId = msg.chat.id;
    await startNewWordsSession(chatId);
});

// ‚úÖ –î–û–ë–ê–í–õ–Ø–ï–ú –ö–û–ú–ê–ù–î–£: –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–ª–æ–≤
bot.onText(/\/debug_stats/, async (msg) => {
    const chatId = msg.chat.id;
    await initializeServices();
    
    try {
        const userWords = await getCachedUserWords(chatId);
        const activeWords = userWords.filter(word => word.status === 'active');
        const now = new Date();
        
        let message = 'üîç **–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–ª–æ–≤:**\n\n';
        
        // –°–ª–æ–≤–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
        const reviewWords = activeWords.filter(word => {
            if (!word.nextReview) return false;
            try {
                const nextReview = new Date(word.nextReview);
                return nextReview <= now;
            } catch (e) {
                return false;
            }
        });
        
        // –°–ª–æ–≤–∞ –≤ –±—É–¥—É—â–µ–º
        const futureWords = activeWords.filter(word => {
            if (!word.nextReview) return false;
            try {
                const nextReview = new Date(word.nextReview);
                return nextReview > now;
            } catch (e) {
                return false;
            }
        });
        
        // –ù–æ–≤—ã–µ —Å–ª–æ–≤–∞
        const newWords = activeWords.filter(word => word.interval === 1);
        
        message += `üìä –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–ª–æ–≤: ${activeWords.length}\n`;
        message += `üîÑ –ì–æ—Ç–æ–≤–æ –∫ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—é: ${reviewWords.length}\n`;
        message += `‚è∞ –û–∂–∏–¥–∞—é—Ç –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è: ${futureWords.length}\n`;
        message += `üÜï –ù–æ–≤—ã–µ —Å–ª–æ–≤–∞: ${newWords.length}\n\n`;
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–ª–∏–∂–∞–π—à–∏–µ 3 —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
        if (futureWords.length > 0) {
            message += `üìÖ **–ë–ª–∏–∂–∞–π—à–∏–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è:**\n`;
            const sorted = futureWords
                .map(word => ({ 
                    word: word.english, 
                    date: new Date(word.nextReview),
                    interval: word.interval 
                }))
                .sort((a, b) => a.date - b.date)
                .slice(0, 3);
                
            sorted.forEach(item => {
                message += `‚Ä¢ ${item.word} (–∏–Ω—Ç. ${item.interval}–¥): ${formatConcreteDate(item.date)}\n`;
            });
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–æ–≤–∞ –∫–æ—Ç–æ—Ä—ã–µ –î–û–õ–ñ–ù–´ –±—ã—Ç—å –≥–æ—Ç–æ–≤—ã
        const shouldBeReady = activeWords.filter(word => {
            if (!word.nextReview || word.interval === 1) return false;
            try {
                const nextReview = new Date(word.nextReview);
                const yesterday = new Date(now);
                yesterday.setDate(yesterday.getDate() - 1);
                return nextReview <= yesterday;
            } catch (e) {
                return false;
            }
        });
        
        if (shouldBeReady.length > 0 && reviewWords.length === 0) {
            message += `\n‚ö†Ô∏è **–ü—Ä–æ–±–ª–µ–º–∞:** ${shouldBeReady.length} —Å–ª–æ–≤ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≥–æ—Ç–æ–≤—ã –∫ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—é!\n`;
            message += `–í–æ–∑–º–æ–∂–Ω–æ –æ—à–∏–±–∫–∞ –≤ –¥–∞—Ç–∞—Ö. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /reset_progress –¥–ª—è —Å–±—Ä–æ—Å–∞.`;
        }
        
        await bot.sendMessage(chatId, message);
        
    } catch (error) {
        optimizedLog('‚ùå Debug stats error:', error);
        await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏.');
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    const text = msg.text;

    if (!text || text.startsWith('/')) {
        return;
    }

    await initializeServices();
    updateUserActivity(chatId);

    const userState = userStates.get(chatId);

    if (text === '‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ') {
        userStates.set(chatId, { state: 'waiting_english', lastActivity: Date.now() });
        await showMainMenu(chatId, 'üá¨üáß –í–≤–µ–¥–∏—Ç–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ:');
    }
    else if (text === 'üìö –ü–æ–≤—Ç–æ—Ä–∏—Ç—å —Å–ª–æ–≤–∞') {
        await startReviewSession(chatId);
    }
    else if (text === 'üÜï –ù–æ–≤—ã–µ —Å–ª–æ–≤–∞') {
        await startNewWordsSession(chatId);
    }
    else if (text === 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞') {
        await showUserStats(chatId);
    }
    else if (userState?.state === 'waiting_english') {
        const englishWord = text.trim().toLowerCase();
        optimizedLog(`üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª–æ–≤–∞: "${englishWord}"`);

        if (!cambridgeService || !yandexService) {
            optimizedLog('‚ùå –°–µ—Ä–≤–∏—Å—ã –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
            await showMainMenu(chatId, '‚ùå –°–µ—Ä–≤–∏—Å—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
            userStates.delete(chatId);
            return;
        }

        if (!/^[a-zA-Z\s\-'\.]+$/.test(englishWord)) {
            await showMainMenu(chatId, 
                '‚ùå –≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ.\n' +
                '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º:'
            );
            return;
        }

        await showMainMenu(chatId, 'üîç –ò—â—É –ø–µ—Ä–µ–≤–æ–¥, —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é, –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ –∏ –ø—Ä–∏–º–µ—Ä—ã...');

        try {
            optimizedLog(`üéØ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ –¥–ª—è: "${englishWord}"`);
            let audioId = null;
            let transcription = '';
            let audioUrl = '';
            let meanings = [];
            let translations = [];

            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            const cambridgeData = await getCachedWordData(englishWord);
            if (cambridgeData.meanings && cambridgeData.meanings.length > 0) {
                optimizedLog(`‚úÖ Cambridge —É—Å–ø–µ—à–Ω–æ: ${cambridgeData.meanings.length} –∑–Ω–∞—á–µ–Ω–∏–π`);
                meanings = cambridgeData.meanings;
                translations = meanings.map(m => m.translation).filter((t, i, arr) => arr.indexOf(t) === i);
                optimizedLog('üìù –ù–∞–π–¥–µ–Ω—ã –ø–µ—Ä–µ–≤–æ–¥—ã:', translations);
            } else {
                optimizedLog('‚ùå Cambridge –Ω–µ –≤–µ—Ä–Ω—É–ª –ø–µ—Ä–µ–≤–æ–¥—ã');
                meanings = [];
                translations = [];
            }

            // –Ø–Ω–¥–µ–∫—Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è
            optimizedLog('üî§ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —É –Ø–Ω–¥–µ–∫—Å...');
            try {
                const yandexData = await yandexService.getTranscriptionAndAudio(englishWord);
                transcription = yandexData.transcription || '';
                audioUrl = yandexData.audioUrl || '';
                if (audioUrl) {
                    audioId = Date.now().toString();
                }
                optimizedLog(`‚úÖ –Ø–Ω–¥–µ–∫—Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è: ${transcription}`);
            } catch (yandexError) {
                optimizedLog(`‚ùå –Ø–Ω–¥–µ–∫—Å –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: ${yandexError.message}`);
                audioUrl = `https://translate.google.com/translate_tts?ie=UTF-8&q=${encodeURIComponent(englishWord)}&tl=en-gb&client=tw-ob`;
                audioId = Date.now().toString();
            }

            userStates.set(chatId, {
                state: 'showing_transcription',
                tempWord: englishWord,
                tempTranscription: transcription,
                tempAudioUrl: audioUrl,
                tempAudioId: audioId,
                tempTranslations: translations,
                meanings: meanings,
                selectedTranslationIndices: [],
                lastActivity: Date.now()
            });

            let message = `üìù –°–ª–æ–≤–æ: ${englishWord}`;
            if (transcription) {
                message += `\nüî§ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è: ${transcription}`;
            } else {
                message += `\n‚ùå –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`;
            }

            if (audioUrl) {
                message += `\n\nüéµ –î–æ—Å—Ç—É–ø–Ω–æ –∞—É–¥–∏–æ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ`;
            } else {
                message += `\n\n‚ùå –ê—É–¥–∏–æ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`;
            }

            if (translations.length > 0) {
                message += `\n\nüéØ –ù–∞–π–¥–µ–Ω–æ ${translations.length} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–µ—Ä–µ–≤–æ–¥–∞ –∏–∑ Cambridge Dictionary`;
                const totalExamples = meanings.reduce((total, meaning) => 
                    total + (meaning.examples ? meaning.examples.length : 0), 0
                );
                if (totalExamples > 0) {
                    message += `\nüìù –ù–∞–π–¥–µ–Ω–æ ${totalExamples} –ø—Ä–∏–º–µ—Ä–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è`;
                }
            } else {
                message += `\n\n‚ùå –ü–µ—Ä–µ–≤–æ–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ Cambridge Dictionary\n‚úèÔ∏è –í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–π –ø–µ—Ä–µ–≤–æ–¥`;
            }

            message += `\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
            await bot.sendMessage(chatId, message, getListeningKeyboard(audioId));
            await showMainMenu(chatId);

        } catch (error) {
            optimizedLog('Error getting word data:', error);
            await showMainMenu(chatId, 
                '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å–ª–æ–≤–∞\n\n' +
                '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ —Å–ª–æ–≤–æ –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ.'
            );
            userStates.delete(chatId);
        }
    } 
    else if (userState?.state === 'waiting_custom_translation') {
        const customTranslation = text.trim();
        if (!customTranslation) {
            await showMainMenu(chatId, '‚ùå –ü–µ—Ä–µ–≤–æ–¥ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥:');
            return;
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –ø—Ä–∏–º–µ—Ä–∞
        userStates.set(chatId, {
            ...userState,
            state: 'waiting_custom_example',
            customTranslation: customTranslation
        });

        await bot.sendMessage(chatId,
            `‚úÖ –í—ã –≤–≤–µ–ª–∏ –ø–µ—Ä–µ–≤–æ–¥: "${customTranslation}"\n\n` +
            'üìù –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):\n\n' +
            'üí° –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–∏–º–µ—Ä –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å —ç—Ç–∏–º —Å–ª–æ–≤–æ–º\n' +
            '‚è≠Ô∏è –ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –≤—ã–±–æ—Ä—É –ø–µ—Ä–µ–≤–æ–¥–æ–≤',
            getExampleInputKeyboard()
        );
    }
    else if (userState?.state === 'waiting_custom_example') {
        if (text === '‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å' || text === '‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ') {
            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–≤–æ–¥ –ø—Ä–∏–º–µ—Ä–∞
            await processCustomTranslationWithoutExample(chatId, userState);
            return;
        }

        const example = text.trim();
        await processCustomTranslationWithExample(chatId, userState, example);
    }
     else if (userState?.state === 'spelling_training') {
        if (text === 'üîô –ù–∞–∑–∞–¥ –∫ –∫–∞—Ä—Ç–æ—á–∫–µ') {
            await returnToCard(chatId, userState);
        } else {
            await checkSpellingAnswer(chatId, text);
        }
    }
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
    else {
        await showMainMenu(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:');
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback_query (—Å–æ–∫—Ä–∞—â–µ–Ω–∞)
bot.on('callback_query', async (callbackQuery) => {
    const chatId = callbackQuery.message.chat.id;
    const data = callbackQuery.data;
    
    await initializeServices();
    updateUserActivity(chatId);

    const userState = userStates.get(chatId);
    await bot.answerCallbackQuery(callbackQuery.id);

    optimizedLog('üîç Callback data:', data);
    optimizedLog('üîç User state:', userState?.state);

    // ‚úÖ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–û: –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫–∞–∑–∞ –¥–µ—Ç–∞–ª–µ–π –ø–µ—Ä–µ–≤–æ–¥–∞
    if (data.startsWith('details_')) {
        const translationIndex = parseInt(data.replace('details_', ''));
        if (userState?.state === 'choosing_translation' && userState.tempTranslations[translationIndex]) {
            await showTranslationDetails(chatId, translationIndex, userState);
        }
    }
    // ‚úÖ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–û: –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É –ø–µ—Ä–µ–≤–æ–¥–æ–≤
    else if (data === 'back_to_translations') {
        if (userState?.state === 'choosing_translation') {
            await backToTranslationSelection(chatId, userState, callbackQuery);
        }
    }
    // ‚úÖ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–û: –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–≤
    else if (data.startsWith('toggle_translation_')) {
        const translationIndex = parseInt(data.replace('toggle_translation_', ''));
        if (userState?.state === 'choosing_translation' && userState.tempTranslations[translationIndex]) {
            try {
                let selectedIndices = [...(userState.selectedTranslationIndices || [])];
                if (selectedIndices.includes(translationIndex)) {
                    selectedIndices = selectedIndices.filter(idx => idx !== translationIndex);
                } else {
                    selectedIndices.push(translationIndex);
                }

                userStates.set(chatId, {
                    ...userState,
                    selectedTranslationIndices: selectedIndices
                });

                await bot.editMessageReplyMarkup(
                    getTranslationSelectionKeyboard(userState.tempTranslations, userState.meanings, selectedIndices).reply_markup,
                    { chat_id: chatId, message_id: callbackQuery.message.message_id }
                );
            } catch (error) {
                optimizedLog('‚ùå Error toggling translation:', error);
                await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–µ—Ä–µ–≤–æ–¥–∞');
            }
        }
    }
    // ‚úÖ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–û: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤
    else if (data === 'save_selected_translations') {
        if (userState?.state === 'choosing_translation' && userState.selectedTranslationIndices.length > 0) {
            try {
                const selectedTranslations = userState.selectedTranslationIndices
                    .map(index => userState.tempTranslations[index]);

                optimizedLog(`üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã:`, selectedTranslations);
                
                await saveWordWithMeanings(chatId, userState, selectedTranslations);
                
                // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –ø–µ—Ä–µ–≤–æ–¥–æ–≤
                try {
                    await bot.deleteMessage(chatId, callbackQuery.message.message_id);
                } catch (deleteError) {
                    optimizedLog('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –ø–µ—Ä–µ–≤–æ–¥–æ–≤');
                }
            } catch (error) {
                optimizedLog('‚ùå Error saving translations:', error);
                await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–ª–æ–≤–∞');
            }
        } else {
            await bot.sendMessage(chatId, '‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
        }
    }
    // ‚úÖ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–≤–æ–µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞
    else if (data === 'custom_translation') {
        if (userState?.state === 'choosing_translation') {
            try {
                userStates.set(chatId, {
                    ...userState,
                    state: 'waiting_custom_translation'
                });

                let translationMessage = '‚úèÔ∏è **–î–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–π –ø–µ—Ä–µ–≤–æ–¥**\n\n' +
                    `üá¨üáß –°–ª–æ–≤–æ: **${userState.tempWord}**`;
                if (userState.tempTranscription) {
                    translationMessage += `\nüî§ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è: ${userState.tempTranscription}`;
                }
                translationMessage += '\n\nüìù –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–∞—Ä–∏–∞–Ω—Ç –ø–µ—Ä–µ–≤–æ–¥–∞:';

                await bot.deleteMessage(chatId, callbackQuery.message.message_id);
                await showMainMenu(chatId, translationMessage);
            } catch (error) {
                optimizedLog('‚ùå Error in custom_translation:', error);
                await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞');
            }
        }
    }
    // ‚úÖ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–û: –û—Ç–º–µ–Ω–∞ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–≤
    else if (data === 'cancel_translation') {
        if (userState) {
            try {
                await bot.editMessageReplyMarkup(
                    { inline_keyboard: [] },
                    { chat_id: chatId, message_id: callbackQuery.message.message_id }
                );

                userStates.set(chatId, {
                    ...userState,
                    state: 'showing_transcription'
                });

                let message = `üìù –°–ª–æ–≤–æ: ${userState.tempWord}`;
                if (userState.tempTranscription) {
                    message += `\nüî§ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è: ${userState.tempTranscription}`;
                }
                message += '\n\nüéµ –î–æ—Å—Ç—É–ø–Ω–æ –∞—É–¥–∏–æ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:';

                await bot.sendMessage(chatId, message, getListeningKeyboard(userState.tempAudioId));
                await showMainMenu(chatId);
            } catch (error) {
                optimizedLog('‚ùå Error canceling translation:', error);
                await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ');
            }
        }
    }
    // ‚úÖ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–û: –ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–∏
    else if (data === 'show_answer') {
        await showReviewAnswer(chatId);
    }
    // ‚úÖ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–û: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ü–µ–Ω–∫–∏ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–∏
    else if (data.startsWith('review_')) {
        const rating = data.replace('review_', '');
        await processReviewRating(chatId, rating);
    }
    // ‚úÖ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–û: –ü—Ä–æ–ø—É—Å–∫ —Å–ª–æ–≤–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–∏
    else if (data === 'skip_review') {
        const userState = userStates.get(chatId);
        if (userState?.state === 'review_session') {
            userState.currentReviewIndex++;
            userState.lastActivity = Date.now();
            
            if (userState.currentReviewIndex >= userState.reviewWords.length) {
                userState.currentReviewIndex = 0;
            }
            
            await showNextReviewWord(chatId);
        }
    }
    // ‚úÖ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–û: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
    else if (data === 'end_review') {
        if (userState?.state === 'review_session') {
            await completeReviewSession(chatId, userState);
        }
    }
    // ‚úÖ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–û: –û—Ç–º–µ—Ç–∫–∞ —Å–ª–æ–≤–∞ –∫–∞–∫ –∏–∑—É—á–µ–Ω–Ω–æ–≥–æ
    else if (data === 'learned_word') {
        await processNewWordLearning(chatId, 'learned');
    }
    // ‚úÖ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–û: –°–ª–æ–≤–æ –Ω—É–∂–Ω–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å
    else if (data === 'need_repeat_word') {
        await processNewWordLearning(chatId, 'repeat');
    }
    // ‚úÖ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–û: –ü—Ä–æ–ø—É—Å–∫ –Ω–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞
    else if (data === 'skip_new_word') {
        const userState = userStates.get(chatId);
        if (userState?.state === 'learning_new_words') {
            const skippedWord = userState.newWords.splice(userState.currentWordIndex, 1)[0];
            userState.newWords.push(skippedWord);
            userState.lastActivity = Date.now();
            await showNextNewWord(chatId);
        }
    }
    // ‚úÖ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–û: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–∑—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Å–ª–æ–≤
    else if (data === 'end_learning') {
        const userState = userStates.get(chatId);
        if (userState?.state === 'learning_new_words') {
            await completeNewWordsSession(chatId, userState);
        }
    }
    // ‚úÖ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–û: –ù–∞—á–∞–ª–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –∏–∑ –Ω–æ—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    else if (data === 'start_review_from_notification') {
        await bot.deleteMessage(chatId, callbackQuery.message.message_id);
        await startReviewSession(chatId);
    }
    // ‚úÖ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–û: –ù–∞—á–∞–ª–æ –∏–∑—É—á–µ–Ω–∏—è –∏–∑ –Ω–æ—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    else if (data === 'start_learning_from_notification') {
        await bot.deleteMessage(chatId, callbackQuery.message.message_id);
        await startNewWordsSession(chatId);
    }
    // ‚úÖ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–û: –ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –∞—É–¥–∏–æ
    else if (data.startsWith('audio_')) {
        const audioId = data.replace('audio_', '');
        const audioUrl = userState?.tempAudioUrl;
        const englishWord = userState?.tempWord;

        if (audioUrl && englishWord) {
            try {
                await bot.editMessageReplyMarkup(
                    { inline_keyboard: [] },
                    { chat_id: chatId, message_id: callbackQuery.message.message_id }
                );
                await bot.sendAudio(chatId, audioUrl, {
                    caption: `üîä –ë—Ä–∏—Ç–∞–Ω—Å–∫–æ–µ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ: ${englishWord}`
                });
                await bot.sendMessage(chatId, 'üéµ –í—ã –ø—Ä–æ—Å–ª—É—à–∞–ª–∏ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ. –•–æ—Ç–∏—Ç–µ –≤—ã–±—Ä–∞—Ç—å –ø–µ—Ä–µ–≤–æ–¥?', getAfterAudioKeyboard());
            } catch (error) {
                optimizedLog('Error sending audio:', error);
                await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏ –∞—É–¥–∏–æ.');
            }
        } else {
            await bot.sendMessage(chatId, '‚ùå –ê—É–¥–∏–æ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è —ç—Ç–æ–≥–æ —Å–ª–æ–≤–∞.');
        }
    }
    // ‚úÖ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–û: –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É –ø–µ—Ä–µ–≤–æ–¥–∞
    else if (data === 'enter_translation') {
        optimizedLog('üîç Processing enter_translation callback');
        
        if (userState?.state === 'showing_transcription') {
            try {
                // –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                try {
                    await bot.editMessageReplyMarkup(
                        { inline_keyboard: [] },
                        { 
                            chat_id: chatId, 
                            message_id: callbackQuery.message.message_id 
                        }
                    );
                } catch (editError) {
                    optimizedLog('‚ö†Ô∏è Could not edit message markup, continuing...');
                }

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø–µ—Ä–µ–≤–æ–¥—ã
                const hasTranslations = userState.tempTranslations && 
                                      userState.tempTranslations.length > 0;
                
                optimizedLog(`üîç Translations available: ${hasTranslations}, count: ${userState.tempTranslations?.length}`);

                if (hasTranslations) {
                    userStates.set(chatId, {
                        ...userState,
                        state: 'choosing_translation',
                        selectedTranslationIndices: []
                    });

                    let translationMessage = 'üéØ **–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥—ã:**\n\n' +
                        `üá¨üáß **${userState.tempWord}**`;
                        
                    if (userState.tempTranscription) {
                        translationMessage += `\nüî§ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è: ${userState.tempTranscription}`;
                    }
                    
                    translationMessage += '\n\nüí° –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–æ–º–µ—Ä –ø–µ—Ä–µ–≤–æ–¥–∞ —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –µ–≥–æ';

                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –ø–µ—Ä–µ–≤–æ–¥–æ–≤
                    await bot.sendMessage(
                        chatId, 
                        translationMessage,
                        getTranslationSelectionKeyboard(
                            userState.tempTranslations, 
                            userState.meanings, 
                            []
                        )
                    );
                    
                } else {
                    // –ï—Å–ª–∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –Ω–µ—Ç, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ä—É—á–Ω–æ–º—É –≤–≤–æ–¥—É
                    userStates.set(chatId, {
                        ...userState,
                        state: 'waiting_custom_translation'
                    });

                    let translationMessage = '‚úèÔ∏è **–î–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–π –ø–µ—Ä–µ–≤–æ–¥**\n\n' +
                        `üá¨üáß –°–ª–æ–≤–æ: **${userState.tempWord}**`;
                        
                    if (userState.tempTranscription) {
                        translationMessage += `\nüî§ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è: ${userState.tempTranscription}`;
                    }
                    
                    translationMessage += '\n\nüìù –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–∞—Ä–∏–∞–Ω—Ç –ø–µ—Ä–µ–≤–æ–¥–∞:';

                    await bot.sendMessage(chatId, translationMessage);
                }
                
            } catch (error) {
                optimizedLog('‚ùå Error in enter_translation:', error);
                await bot.sendMessage(chatId, 
                    '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.'
                );
            }
        } else {
            optimizedLog(`‚ùå Wrong state for enter_translation: ${userState?.state}`);
            await bot.sendMessage(chatId, 
                '‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ. –ù–∞—á–Ω–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞ –∑–∞–Ω–æ–≤–æ.'
            );
            userStates.delete(chatId);
        }
    }
    // ‚úÖ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–û: –ù–∞—á–∞–ª–æ –∏–∑—É—á–µ–Ω–∏—è –∏–∑ –∫–æ–º–∞–Ω–¥—ã /new
    else if (data === 'start_learning_from_command') {
        await bot.deleteMessage(chatId, callbackQuery.message.message_id);
        await startNewWordsSession(chatId);
    }
    // ‚úÖ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–û: –ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–æ–≤—ã—Ö —Å–ª–æ–≤
    else if (data === 'show_new_stats_only') {
        const unlearnedWords = await getAllUnlearnedWords(chatId);
        const count = unlearnedWords.length;
        await bot.editMessageText(
            `üÜï –ù–æ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è: ${count}\n\n` +
            'üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "üÜï –ù–æ–≤—ã–µ —Å–ª–æ–≤–∞" –≤ –º–µ–Ω—é —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–∑—É—á–µ–Ω–∏–µ',
            {
                chat_id: chatId,
                message_id: callbackQuery.message.message_id
            }
        );
    }
    // ‚úÖ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–û: –û—Ç–ª–æ–∂–∏—Ç—å –Ω–æ—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
    else if (data === 'snooze_notification') {
        await bot.editMessageText(
            '‚è∞ –•–æ—Ä–æ—à–æ, –Ω–∞–ø–æ–º–Ω—é –ø–æ–∑–∂–µ!',
            {
                chat_id: chatId,
                message_id: callbackQuery.message.message_id
            }
        );
    }
    // ‚úÖ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–û: –û—Ç–∫–ª—é—á–∏—Ç—å –Ω–æ—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
    else if (data === 'disable_today') {
        const today = new Date().toDateString();
        notificationScheduler.set(chatId, {
            date: today,
            sent: true,
            disabled: true
        });
        await bot.editMessageText(
            '‚úÖ –•–æ—Ä–æ—à–æ, –Ω–µ –±—É–¥—É –±–µ—Å–ø–æ–∫–æ–∏—Ç—å –¥–æ –∑–∞–≤—Ç—Ä–∞! üò¥',
            {
                chat_id: chatId,
                message_id: callbackQuery.message.message_id
            }
        );
    }   
    else if (data === 'spelling_train') {
        const userState = userStates.get(chatId);
        
        if (userState?.state === 'review_session') {
            await startSpellingTraining(chatId, 'review');
        } 
        else if (userState?.state === 'learning_new_words') {
            await startSpellingTraining(chatId, 'learning');
        }
        
        try {
            await bot.deleteMessage(chatId, callbackQuery.message.message_id);
        } catch (e) {
            optimizedLog('‚ö†Ô∏è Cannot delete message');
        }
    }
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö callback –¥–∞–Ω–Ω—ã—Ö
    else {
        optimizedLog(`‚ùå Unknown callback data: ${data}`);
        await bot.sendMessage(chatId, '‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
});

// Graceful shutdown
async function gracefulShutdown() {
    optimizedLog('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –±–∞—Ç—á–∏ –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º...');
    
    if (batchSheetsService) {
        await batchSheetsService.flushAll();
    }
    
    bot.stopPolling();
    optimizedLog('‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã, –≤—ã—Ö–æ–¥');
    process.exit(0);
}

process.on('SIGINT', async () => {
    optimizedLog('üîÑ –ü–æ–ª—É—á–µ–Ω SIGINT, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...');
    await gracefulShutdown();
});

process.on('SIGTERM', async () => {
    optimizedLog('üîÑ –ü–æ–ª—É—á–µ–Ω SIGTERM, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...');
    await gracefulShutdown();
});

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–æ—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
setTimeout(() => {
    startOptimizedNotifications();
}, 5000);

optimizedLog('ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω: –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è Railways!');














