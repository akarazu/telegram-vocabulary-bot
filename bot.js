import TelegramBot from 'node-telegram-bot-api';
import { GoogleSheetsService } from './services/google-sheets.js';
import { YandexDictionaryService } from './services/yandex-dictionary-service.js';
import { CambridgeDictionaryService } from './services/cambridge-dictionary-service.js';
import { FSRSService } from './services/fsrs-service.js';

const bot = new TelegramBot(process.env.BOT_TOKEN, { polling: true });

// –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏
const userStates = new Map();
const cache = new Map();
const dailyLearnedWords = new Map();
const learnedWords = new Map();
const audioCache = new Map(); // –ù–æ–≤—ã–π –∫—ç—à –¥–ª—è –∞—É–¥–∏–æ
const REVERSE_TRAINING_STATES = {
    ACTIVE: 'reverse_training',
    SPELLING: 'reverse_training_spelling'
};

// –õ–µ–Ω–∏–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
let sheetsService, yandexService, cambridgeService, fsrsService;
let servicesInitialized = false;

async function initializeServices() {
    if (servicesInitialized) return true;
    
    try {
        sheetsService = new GoogleSheetsService();
        yandexService = new YandexDictionaryService();
        cambridgeService = new CambridgeDictionaryService();
        fsrsService = new FSRSService();
        
        // –ñ–¥–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é Google Sheets
        await new Promise(resolve => {
            const checkInitialized = () => {
                if (sheetsService.initialized) {
                    resolve();
                } else {
                    setTimeout(checkInitialized, 100);
                }
            };
            checkInitialized();
        });
        
        servicesInitialized = true;
        return true;
    } catch (error) {
        console.error('Service initialization failed');
        // –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
        sheetsService = { 
            initialized: false,
            getUserWords: () => [],
            getWordsForReview: () => [],
            getReviewWordsCount: () => 0,
            getNewWordsCount: () => 0,
            addWordWithMeanings: async () => false,
            updateWordAfterFSRSReview: async () => false,
            addMeaningToWord: async () => false
        };
        yandexService = { 
            getTranscriptionAndAudio: async () => ({ transcription: '', audioUrl: '' })
        };
        cambridgeService = { 
            getWordData: async () => ({ meanings: [] })
        };
        fsrsService = new FSRSService();
        servicesInitialized = true;
        return false;
    }
}

// –û—á–∏—Å—Ç–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
setInterval(() => {
    const now = Date.now();
    for (const [chatId, state] of userStates.entries()) {
        if (now - (state.lastActivity || 0) > 30 * 60 * 1000) {
            userStates.delete(chatId);
        }
    }
}, 10 * 60 * 1000);

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–µ—à–µ–º
function updateUserActivity(chatId) {
    const state = userStates.get(chatId);
    if (state) {
        state.lastActivity = Date.now();
    }
}

async function getCachedUserWords(chatId) {
    const cacheKey = `words_${chatId}`;
    const cached = cache.get(cacheKey);
    
    if (cached && Date.now() - cached.timestamp < 5 * 60 * 1000) {
        return cached.data;
    }
    
    await initializeServices();
    const words = await sheetsService.getUserWords(chatId);
    cache.set(cacheKey, {
        data: words,
        timestamp: Date.now()
    });
    
    return words;
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–∑—É—á–µ–Ω–Ω—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
function markWordAsLearned(chatId, englishWord) {
    if (!learnedWords.has(chatId)) {
        learnedWords.set(chatId, new Set());
    }
    learnedWords.get(chatId).add(englishWord.toLowerCase());
}

function isWordLearned(chatId, englishWord) {
    if (!learnedWords.has(chatId)) return false;
    return learnedWords.get(chatId).has(englishWord.toLowerCase());
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–Ω–µ–≤–Ω—ã–º –ª–∏–º–∏—Ç–æ–º
function resetDailyLimit() {
    const now = new Date();
    if (now.getHours() === 4) {
        dailyLearnedWords.clear();
    }
}

async function getLearnedToday(chatId) {
    try {
        const userWords = await getCachedUserWords(chatId);
        const now = new Date();
        
        // –ú–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è
        const moscowOffset = 3 * 60 * 60 * 1000;
        const moscowNow = new Date(now.getTime() + moscowOffset);
        const todayStart = new Date(moscowNow);
        todayStart.setHours(0, 0, 0, 0);
        const todayEnd = new Date(moscowNow);
        todayEnd.setHours(23, 59, 59, 999);
        
        let learnedToday = 0;

        userWords.forEach(word => {
            if (word.status !== 'active') return;
            
            // ‚úÖ –¢–û–õ–¨–ö–û —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –∏–∑—É—á–µ–Ω—ã –í–ü–ï–†–í–´–ï —Å–µ–≥–æ–¥–Ω—è
            if (word.firstLearnedDate && word.firstLearnedDate.trim() !== '') {
                try {
                    const learnedDate = new Date(word.firstLearnedDate);
                    const moscowLearned = new Date(learnedDate.getTime() + moscowOffset);
                    
                    if (moscowLearned >= todayStart && moscowLearned <= todayEnd) {
                        learnedToday++;
                    }
                } catch (error) {
                    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª–æ–≤–∞ —Å –æ—à–∏–±–∫–∞–º–∏ –¥–∞—Ç—ã
                }
            }
        });

        return learnedToday;
        
    } catch (error) {
        return 0;
    }
}
// –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
function getMainMenu() {
    return {
        reply_markup: {
            keyboard: [
                ['‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ', 'üìö –ü–æ–≤—Ç–æ—Ä–∏—Ç—å'],
                ['üÜï –ù–æ–≤—ã–µ —Å–ª–æ–≤–∞', 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'],
                ['üîÅ –†—É—Å‚Üí–ê–Ω–≥–ª –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞']
            ],
            resize_keyboard: true
        }
    };
}

function getReviewKeyboard() {
    return {
        reply_markup: {
            inline_keyboard: [
                [
                    { text: 'üò£ –ó–∞–±—ã–ª', callback_data: 'review_again' },
                    { text: 'üòì –¢—Ä—É–¥–Ω–æ', callback_data: 'review_hard' }
                ],
                [
                    { text: 'üòä –•–æ—Ä–æ—à–æ', callback_data: 'review_good' },
                    { text: 'üéâ –õ–µ–≥–∫–æ', callback_data: 'review_easy' }
                ],
                [
                    { text: '‚úçÔ∏è –ü—Ä–∞–≤–æ–ø–∏—Å–∞–Ω–∏–µ', callback_data: 'spelling_train' }
                ]
            ]
        }
    };
}

function getNewWordsKeyboard() {
    return {
        reply_markup: {
            inline_keyboard: [
                [{ text: '‚úÖ –í—ã—É—á–∏–ª', callback_data: 'learned_word' }],
                [{ text: 'üîÑ –ù—É–∂–Ω–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å', callback_data: 'need_repeat_word' }],
                [{ text: '‚úçÔ∏è –ü—Ä–∞–≤–æ–ø–∏—Å–∞–Ω–∏–µ', callback_data: 'spelling_train' }]
            ]
        }
    };
}

function getTranslationSelectionKeyboard(translations, meanings, selectedIndices = []) {
    if (!translations || translations.length === 0) {
        return {
            reply_markup: {
                inline_keyboard: [
                    [{ text: '‚úèÔ∏è –î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–π –ø–µ—Ä–µ–≤–æ–¥', callback_data: 'custom_translation' }],
                    [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'cancel_translation' }]
                ]
            }
        };
    }

    const translationButtons = [];
    
    translations.forEach((translation, index) => {
        const isSelected = selectedIndices.includes(index);
        const numberEmoji = getNumberEmoji(index + 1);
        const emoji = isSelected ? '‚úÖ' : numberEmoji;
        
        const buttonText = `${emoji} ${translation.substring(0, 30)}${translation.length > 30 ? '...' : ''}`;
        
        const row = [
            { 
                text: buttonText, 
                callback_data: `toggle_translation_${index}` 
            }
        ];
        
        const meaningForTranslation = meanings?.find(m => 
            m.translation && m.translation.trim() === translation.trim()
        );
        
        const hasDetails = meaningForTranslation && (
            (meaningForTranslation.englishDefinition && meaningForTranslation.englishDefinition.trim() !== '') ||
            (meaningForTranslation.examples && meaningForTranslation.examples.length > 0) ||
            (meaningForTranslation.partOfSpeech && meaningForTranslation.partOfSpeech.trim() !== '')
        );
        
        if (hasDetails) {
            row.push({ 
                text: 'üîç –ü–æ–¥—Ä–æ–±–Ω–µ–µ',
                callback_data: `details_${index}` 
            });
        }
        
        translationButtons.push(row);
    });

    const actionButtons = [];
    
    if (selectedIndices.length > 0) {
        actionButtons.push([
            { 
                text: `üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å (${selectedIndices.length})`, 
                callback_data: 'save_selected_translations' 
            }
        ]);
    }
    
    actionButtons.push([
        { 
            text: '‚úèÔ∏è –°–≤–æ–π –ø–µ—Ä–µ–≤–æ–¥', 
            callback_data: 'custom_translation' 
        },
        { 
            text: 'üîô –ù–∞–∑–∞–¥', 
            callback_data: 'cancel_translation' 
        }
    ]);

    return {
        reply_markup: {
            inline_keyboard: [...translationButtons, ...actionButtons]
        }
    };
}

function getNumberEmoji(number) {
    const emojis = ['1Ô∏è‚É£', '2Ô∏è‚É£', '3Ô∏è‚É£', '4Ô∏è‚É£', '5Ô∏è‚É£', '6Ô∏è‚É£', '7Ô∏è‚É£', '8Ô∏è‚É£', '9Ô∏è‚É£', 'üîü'];
    return number <= emojis.length ? emojis[number - 1] : `${number}.`;
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function toMoscowTime(date) {
    if (!date) return date;
    try {
        const moscowOffset = 3 * 60 * 60 * 1000;
        return new Date(date.getTime() + moscowOffset);
    } catch (error) {
        return date;
    }
}

function formatMoscowDate(date) {
    if (!date) return '–¥–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞';
    try {
        const moscowDate = toMoscowTime(new Date(date));
        const day = moscowDate.getDate().toString().padStart(2, '0');
        const month = (moscowDate.getMonth() + 1).toString().padStart(2, '0');
        const year = moscowDate.getFullYear();
        const hours = moscowDate.getHours().toString().padStart(2, '0');
        const minutes = moscowDate.getMinutes().toString().padStart(2, '0');
        
        return `${day}.${month}.${year} ${hours}:${minutes}`;
    } catch (error) {
        return '–æ—à–∏–±–∫–∞ –¥–∞—Ç—ã';
    }
}

// –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞
async function showMainMenu(chatId, text = '') {
    try {
        if (text && text.trim() !== '') {
            return await bot.sendMessage(chatId, text, {
                parse_mode: 'Markdown',
                ...getMainMenu()
            });
        } else {
            return await bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', getMainMenu());
        }
    } catch (error) {
        await bot.sendMessage(chatId, text || '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:');
    }
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å–ª–æ–≤–∞–º–∏
async function saveWordWithMeanings(chatId, userState, selectedTranslations) {
    let success = true;
    
    if (!servicesInitialized || !sheetsService.initialized) {
        await showMainMenu(chatId, '‚ùå –°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        userStates.delete(chatId);
        return;
    }

    try {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
        const existingWords = await getCachedUserWords(chatId);
        const isDuplicate = existingWords.some(word => 
            word.english.toLowerCase() === userState.tempWord.toLowerCase()
        );
        
        if (isDuplicate) {
            await showMainMenu(chatId, 
                `‚ùå –°–ª–æ–≤–æ "${userState.tempWord}" —É–∂–µ –µ—Å—Ç—å –≤ –≤–∞—à–µ–º —Å–ª–æ–≤–∞—Ä–µ!\n\n` +
                '–ö–∞–∂–¥–æ–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–æ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑.'
            );
            userStates.delete(chatId);
            return;
        }

        // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        const meaningsData = [];
        selectedTranslations.forEach(translation => {
            const cambridgeMeanings = (userState.meanings || []).filter(
                meaning => meaning.translation === translation
            );
            
            if (cambridgeMeanings.length === 0) {
                meaningsData.push({
                    translation: translation,
                    example: '',
                    partOfSpeech: '',
                    definition: ''
                });
            } else {
                cambridgeMeanings.forEach(meaning => {
                    meaningsData.push({
                        translation: translation,
                        example: meaning.examples && meaning.examples.length > 0 ? meaning.examples[0].english : '',
                        partOfSpeech: meaning.partOfSpeech || '',
                        definition: meaning.englishDefinition || ''
                    });
                });
            }
        });

        // –°–æ–∑–¥–∞–µ–º FSRS –∫–∞—Ä—Ç–æ—á–∫—É –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞
        const fsrsCard = fsrsService.createNewCard();
        
        success = await sheetsService.addWordWithMeanings(
            chatId,
            userState.tempWord,
            userState.tempTranscription || '',
            userState.tempAudioUrl || '',
            meaningsData
        );

    } catch (error) {
        console.error('Error saving word:', error);
        success = false;
    }

    userStates.delete(chatId);

    if (success) {
        const transcriptionText = userState.tempTranscription ? ` [${userState.tempTranscription}]` : '';
        let successMessage = '‚úÖ –°–ª–æ–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–ª–æ–≤–∞—Ä—å!\n\n' +
            `üí¨ **${userState.tempWord}**${transcriptionText}\n\n` +
            '**–î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:**\n';
        
        selectedTranslations.forEach((translation, index) => {
            successMessage += `\n${index + 1}. ${translation}`;
        });
        
        successMessage += '\n\nüìö –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏–∑—É—á–∞—Ç—å —Å–ª–æ–≤–æ –≤ —Ä–∞–∑–¥–µ–ª–µ "üÜï –ù–æ–≤—ã–µ —Å–ª–æ–≤–∞"!';
        await showMainMenu(chatId, successMessage);
    } else {
        await showMainMenu(chatId, 
            '‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è\n\n' +
            '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–ª–æ–≤–æ –≤ —Å–ª–æ–≤–∞—Ä—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.'
        );
    }
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞
async function processCustomTranslation(chatId, userState, translation, example = '') {
    if (!translation || translation.trim() === '') {
        await bot.sendMessage(chatId, '‚ùå –ü–µ—Ä–µ–≤–æ–¥ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥:');
        return;
    }

    const newTranslations = [translation, ...(userState.tempTranslations || [])];
    const newMeaning = {
        translation: translation,
        englishDefinition: '',
        examples: example ? [{ english: example, russian: '' }] : [],
        partOfSpeech: ''
    };
    const newMeanings = [newMeaning, ...(userState.meanings || [])];
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞
    userStates.set(chatId, {
        ...userState,
        state: 'choosing_translation',
        tempTranslations: newTranslations,
        meanings: newMeanings,
        selectedTranslationIndices: [0], // –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥
        lastActivity: Date.now()
    });

    let message = `‚úÖ –í–∞—à –ø–µ—Ä–µ–≤–æ–¥ "${translation}" –¥–æ–±–∞–≤–ª–µ–Ω!\n\n`;
    if (example) message += `üìù –ü—Ä–∏–º–µ—Ä: ${example}\n\n`;
    message += 'üéØ –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥—ã –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:';
    
    await bot.sendMessage(chatId, message, 
        getTranslationSelectionKeyboard(newTranslations, newMeanings, [0])
    );
}

// –§—É–Ω–∫—Ü–∏–∏ —Ç—Ä–µ–Ω–∞–∂–µ—Ä–∞ –ø—Ä–∞–≤–æ–ø–∏—Å–∞–Ω–∏—è
async function startSpellingTraining(chatId, context) {
    const userState = userStates.get(chatId);
    if (!userState) return;

    let word;
    let originalState;

    if (context === 'review' && userState.state === 'review_session') {
        word = userState.reviewWords[userState.currentReviewIndex];
        originalState = { ...userState };
    } else if (context === 'learning' && userState.state === 'learning_new_words') {
        word = userState.newWords[userState.currentWordIndex];
        originalState = { ...userState };
    } else {
        return;
    }

    userStates.set(chatId, {
        state: 'spelling_training',
        originalState: originalState,
        originalContext: context,
        trainingWord: word,
        attempts: 0,
        lastActivity: Date.now()
    });

    await askSpellingQuestion(chatId, word);
}

async function askTrainingSpellingQuestion(chatId, word) {
    const message = `‚úçÔ∏è **–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –ø—Ä–∞–≤–æ–ø–∏—Å–∞–Ω–∏—è**\n\n` +
                   `üá∑üá∫ –ü–µ—Ä–µ–≤–æ–¥: **${word.meanings[0]?.translation || '–ø–µ—Ä–µ–≤–æ–¥'}**\n\n` +
                   `‚úèÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ:`;

    await bot.sendMessage(chatId, message, {
        parse_mode: 'Markdown',
        reply_markup: {
            keyboard: [['üîô –ù–∞–∑–∞–¥ –∫ –∫–∞—Ä—Ç–æ—á–∫–µ']],
            resize_keyboard: true
        }
    });
}

async function checkSpellingAnswer(chatId, userAnswer) {
    const userState = userStates.get(chatId);
    if (!userState || userState.state !== 'spelling_training') return;

    const word = userState.trainingWord;
    const correct = word.english.toLowerCase();
    const answer = userAnswer.trim().toLowerCase();
    
    userState.attempts++;

    if (answer === correct) {
        await bot.sendMessage(chatId, 
            `‚úÖ **–ü—Ä–∞–≤–∏–ª—å–Ω–æ!**\n\n` +
            `üá¨üáß ${word.english}\n` +
            `üî§ ${word.transcription || ''}`
        );
        
        setTimeout(() => returnToCard(chatId, userState), 2000);
    } else {
        await bot.sendMessage(chatId, 
            `‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!\n` +
            `üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –Ω–∞ "${word.english[0]}"`
        );
        
        if (userState.attempts >= 3) {
            setTimeout(async () => {
                await bot.sendMessage(chatId, 
                    `üí° –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: **${word.english}**\n` +
                    `–í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –∫–∞—Ä—Ç–æ—á–∫–µ...`
                );
                setTimeout(() => returnToCard(chatId, userState), 2000);
            }, 1000);
        }
    }
}

async function returnToCard(chatId, userState) {
    const originalState = userState.originalState;
    const context = userState.originalContext;
    
    userStates.set(chatId, originalState);
    
    if (context === 'review') {
        await showReviewAnswer(chatId);
    } else if (context === 'learning') {
        await showNextNewWord(chatId);
    }
}

// –§—É–Ω–∫—Ü–∏–∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è —Å–ª–æ–≤
async function startReviewSession(chatId) {
    await initializeServices();
    
    const existingState = userStates.get(chatId);
    if (existingState) {
        userStates.delete(chatId);
        const cacheKey = `words_${chatId}`;
        cache.delete(cacheKey);
    }
    
    if (!sheetsService.initialized) {
        await bot.sendMessage(chatId, '‚ùå –°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.');
        return;
    }

    try {
        const wordsToReview = await sheetsService.getWordsForReview(chatId);
        
        if (wordsToReview.length === 0) {
            const userWords = await getCachedUserWords(chatId);
            const activeWords = userWords.filter(word => word.status === 'active');
            const learnedWords = activeWords.filter(word => 
                word.interval > 1 || 
                (word.firstLearnedDate && word.firstLearnedDate.trim() !== '')
            );
            const newWords = activeWords.filter(word => 
                word.interval === 1 && 
                (!word.firstLearnedDate || word.firstLearnedDate.trim() === '')
            );
            
            let message = 'üìä **–°—Ç–∞—Ç—É—Å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π:**\n\n';
            message += `‚Ä¢ –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–ª–æ–≤: ${activeWords.length}\n`;
            message += `‚Ä¢ –ò–∑—É—á–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤: ${learnedWords.length}\n`;
            message += `‚Ä¢ –ù–æ–≤—ã—Ö —Å–ª–æ–≤: ${newWords.length}\n`;
            message += `‚Ä¢ –°–ª–æ–≤ –≥–æ—Ç–æ–≤–æ –∫ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—é: 0\n\n`;
            
            if (learnedWords.length === 0) {
                message += 'üí° –°–Ω–∞—á–∞–ª–∞ –∏–∑—É—á–∏—Ç–µ —Å–ª–æ–≤–∞ –≤ —Ä–∞–∑–¥–µ–ª–µ "üÜï –ù–æ–≤—ã–µ —Å–ª–æ–≤–∞"';
            } else {
                message += '‚è∞ –°–ª–æ–≤–∞ –ø–æ—è–≤—è—Ç—Å—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è —Å–æ–≥–ª–∞—Å–Ω–æ –∏—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º';
            }
            
            await bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
            return;
        }

        userStates.set(chatId, {
            state: 'review_session',
            reviewWords: wordsToReview,
            originalWordsCount: wordsToReview.length,
            currentReviewIndex: 0,
            reviewedCount: 0,
            lastActivity: Date.now()
        });

        await showNextReviewWord(chatId);
        
    } catch (error) {
        await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ª–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è.');
    }
}

async function showNextReviewWord(chatId) {
    const userState = userStates.get(chatId);
    if (!userState || userState.state !== 'review_session') {
        await bot.sendMessage(chatId, '‚ùå –°–µ—Å—Å–∏—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.');
        return;
    }

    const { reviewWords } = userState;
    
    if (!reviewWords || reviewWords.length === 0) {
        await completeReviewSession(chatId, userState);
        return;
    }
    
    if (userState.currentReviewIndex >= reviewWords.length) {
        userState.currentReviewIndex = 0;
    }

    const word = reviewWords[userState.currentReviewIndex];
    
    if (!word) {
        userState.reviewWords.splice(userState.currentReviewIndex, 1);
        userState.lastActivity = Date.now();
        await showNextReviewWord(chatId);
        return;
    }
    
    const progress = `${userState.currentReviewIndex + 1}/${reviewWords.length} (${userState.reviewedCount} –æ—Ü–µ–Ω–µ–Ω–æ)`;
    
    let message = `üìö –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ —Å–ª–æ–≤ ${progress}\n\n`;
    message += `üá¨üáß **${word.english}**\n`;
    
    if (word.transcription) {
        message += `üî§ ${word.transcription}\n`;
    }
    
    message += `\nüí° –í—Å–ø–æ–º–Ω–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ –∏ –Ω–∞–∂–º–∏—Ç–µ "–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç"`;

    await bot.sendMessage(chatId, message, {
        parse_mode: 'Markdown',
        reply_markup: {
            inline_keyboard: [
                [{ text: 'üëÄ –ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç', callback_data: 'show_answer' }],
                [{ text: '‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ', callback_data: 'end_review' }]
            ]
        }
    });
}

async function showReviewAnswer(chatId) {
    const userState = userStates.get(chatId);
    if (!userState || userState.state !== 'review_session') {
        await bot.sendMessage(chatId, '‚ùå –°–µ—Å—Å–∏—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');
        return;
    }

    const word = userState.reviewWords[userState.currentReviewIndex];
    
    if (!word) {
        await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞: —Å–ª–æ–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.');
        return;
    }
    
    let message = `üìö **–û—Ç–≤–µ—Ç:**\n\n`;
    message += `üá¨üáß **${word.english}**\n`;
    
    if (word.transcription) {
        message += `üî§ ${word.transcription}\n`;
    }
    
    message += `\nüá∑üá∫ **–ü–µ—Ä–µ–≤–æ–¥—ã:**\n`;
    
    if (word.meanings && Array.isArray(word.meanings)) {
        word.meanings.forEach((meaning, index) => {
            message += `\n${index + 1}. ${meaning.translation || '–ü–µ—Ä–µ–≤–æ–¥ –Ω–µ —É–∫–∞–∑–∞–Ω'}`;
            if (meaning.definition) {
                message += ` - ${meaning.definition}`;
            }
            if (meaning.example && meaning.example.trim() !== '') {
                message += `\n   üìù *–ü—Ä–∏–º–µ—Ä:* ${meaning.example}`;
            }
        });
    } else {
        message += `\n‚ùå –ü–µ—Ä–µ–≤–æ–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã`;
    }

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∞—É–¥–∏–æ
    if (word.english) {
        try {
            const audioUrl = await getCachedAudio(word.english);
            if (audioUrl) {
                await bot.sendAudio(chatId, audioUrl, {
                    caption: 'üîä –ü—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ'
                });
            }
        } catch (error) {
            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—à–∏–±–∫–∏ –∞—É–¥–∏–æ
        }
    }

    await bot.sendMessage(chatId, message, {
        parse_mode: 'Markdown',
        ...getReviewKeyboard()
    });
}

async function processReviewRating(chatId, rating) {
    const userState = userStates.get(chatId);
    if (!userState || userState.state !== 'review_session') {
        return;
    }

    if (userState.currentReviewIndex >= userState.reviewWords.length) {
        await completeReviewSession(chatId, userState);
        return;
    }

    const word = userState.reviewWords[userState.currentReviewIndex];
    
    if (!word) {
        userState.reviewWords.splice(userState.currentReviewIndex, 1);
        userState.lastActivity = Date.now();
        await showNextReviewWord(chatId);
        return;
    }

    try {
const cardData = {
            due: word.nextReview ? new Date(word.nextReview) : new Date(),
            stability: word.stability || 0.1,
            difficulty: word.difficulty || 5.0,
            elapsed_days: word.elapsed_days || 0,
            scheduled_days: word.scheduled_days || 1,
            reps: word.reps || 0,
            lapses: word.lapses || 0,
            state: word.state || 1,
            last_review: word.lastReview ? new Date(word.lastReview) : new Date()
        };


         const fsrsResult = await fsrsService.reviewCard(chatId, word, cardData, rating);
        
 if (fsrsResult) {
            // –í–ê–ñ–ù–û: –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã FSRS –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—Å–ø–µ—Ö–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const userWords = await getCachedUserWords(chatId);
            const successRate = fsrsService.calculateUserSuccessRate(userWords);
            fsrsService.adaptUserParameters(chatId, successRate);

            const success = await sheetsService.updateWordAfterFSRSReview(
                chatId,
                word.english,
                fsrsResult,
                rating
            );
            
            if (success) {
                userState.reviewedCount = (userState.reviewedCount || 0) + 1;
                userState.reviewWords.splice(userState.currentReviewIndex, 1);
                
                if (userState.reviewWords.length === 0) {
                    await completeReviewSession(chatId, userState);
                } else {
                    userState.lastActivity = Date.now();
                    await showNextReviewWord(chatId);
                }
            } else {
                throw new Error('Failed to save to Google Sheets');
            }
        } else {
            throw new Error('FSRS returned empty result');
        }

    } catch (error) {
        userState.reviewWords.splice(userState.currentReviewIndex, 1);
        
        if (userState.reviewWords.length === 0) {
            await completeReviewSession(chatId, userState);
        } else {
            userState.lastActivity = Date.now();
            await showNextReviewWord(chatId);
        }
    }
}

async function completeReviewSession(chatId, userState) {
    const totalWordsAtStart = userState.originalWordsCount || userState.reviewWords?.length || 0;
    const reviewedCount = userState.reviewedCount || 0;
    const remainingWords = userState.reviewWords?.length || 0;
    
    userStates.delete(chatId);
    
    const cacheKeys = [
        `words_${chatId}`,
        `review_${chatId}`
    ];
    cacheKeys.forEach(key => cache.delete(key));
    
    const totalProcessed = reviewedCount + remainingWords;
    const actualReviewed = reviewedCount;
    
    let message = 'üéâ **–°–µ—Å—Å–∏—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**\n\n';
    message += `üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n`;
    message += `‚Ä¢ –í—Å–µ–≥–æ —Å–ª–æ–≤ –≤ —Å–µ—Å—Å–∏–∏: ${totalProcessed}\n`;
    message += `‚Ä¢ –£—Å–ø–µ—à–Ω–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–æ: ${actualReviewed}\n`;
    
    if (remainingWords > 0) {
        message += `‚Ä¢ –ü—Ä–æ–ø—É—â–µ–Ω–æ/–æ—à–∏–±–æ–∫: ${remainingWords}\n`;
    }
    
    if (totalProcessed > 0) {
        const progressPercentage = Math.round((actualReviewed / totalProcessed) * 100);
        message += `‚Ä¢ –ü—Ä–æ–≥—Ä–µ—Å—Å: ${progressPercentage}%\n\n`;
    } else {
        message += `\n`;
    }
    
    const hasMoreWords = await sheetsService.getReviewWordsCount(chatId) > 0;
    if (hasMoreWords) {
        const remainingCount = await sheetsService.getReviewWordsCount(chatId);
        message += `üìö –û—Å—Ç–∞–ª–æ—Å—å —Å–ª–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è: ${remainingCount}\n`;
    } else {
        message += `‚úÖ –í—Å–µ —Å–ª–æ–≤–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω—ã!\n`;
    }
    
    message += `\nüí° –í—ã –º–æ–∂–µ—Ç–µ:\n`;
    message += `‚Ä¢ –ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è\n`;
    message += `‚Ä¢ –ò–∑—É—á–∏—Ç—å –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞\n`;
    message += `‚Ä¢ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n`;
    
    await bot.sendMessage(chatId, message, {
        parse_mode: 'Markdown',
        ...getMainMenu()
    });
}

// –§—É–Ω–∫—Ü–∏–∏ –∏–∑—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Å–ª–æ–≤
async function startNewWordsSession(chatId) {
    await initializeServices();
    
    const existingState = userStates.get(chatId);
    if (existingState && existingState.state === 'learning_new_words') {
        await completeNewWordsSession(chatId, existingState);
    }
    
    if (!sheetsService.initialized) {
        await bot.sendMessage(chatId, '‚ùå –°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.');
        return;
    }

    try {
        const learnedToday = await getLearnedToday(chatId);
        const DAILY_LIMIT = 5;
        
        if (learnedToday >= DAILY_LIMIT) {
            await bot.sendMessage(chatId, 
                `üéâ –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞!\n\n` +
                `üìä –ò–∑—É—á–µ–Ω–æ —Å–ª–æ–≤ —Å–µ–≥–æ–¥–Ω—è: ${learnedToday}/${DAILY_LIMIT}\n\n` +
                'üí° –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∑–∞–≤—Ç—Ä–∞ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Å–ª–æ–≤!\n' +
                'üìö –ú–æ–∂–µ—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —É–∂–µ –∏–∑—É—á–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞'
            );
            return;
        }

        const availableNewWords = await getAllUnlearnedWords(chatId);
        
        if (availableNewWords.length === 0) {
            await bot.sendMessage(chatId, 
                `üéâ –ù–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–æ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –Ω–µ—Ç!\n\n` +
                `üìä –ò–∑—É—á–µ–Ω–æ —Å–ª–æ–≤ —Å–µ–≥–æ–¥–Ω—è: ${learnedToday}/${DAILY_LIMIT}\n\n` +
                'üí° –í—ã –º–æ–∂–µ—Ç–µ:\n' +
                '‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –º–µ–Ω—é "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ"\n' +
                '‚Ä¢ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å —É–∂–µ –∏–∑—É—á–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞'
            );
            return;
        }

        userStates.set(chatId, {
    state: 'learning_new_words',
    newWords: availableNewWords,
    currentWordIndex: 0,
    learnedCount: 0,
    originalWordsCount: availableNewWords.length,
    lastActivity: Date.now()
});
        preloadAudioForWords(availableNewWords);

        await showNextNewWord(chatId);
        
    } catch (error) {
        await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–æ–≤—ã—Ö —Å–ª–æ–≤.');
    }
}

async function getAllUnlearnedWords(chatId) {
    if (!servicesInitialized || !sheetsService.initialized) {
        return [];
    }
    
    try {
        const userWords = await getCachedUserWords(chatId);
        
        // ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –§–ò–õ–¨–¢–†–ê–¶–ò–Ø: —Ç–æ–ª—å–∫–æ —Å–ª–æ–≤–∞ –∫–æ—Ç–æ—Ä—ã–µ –ù–ò–ö–û–ì–î–ê –Ω–µ –∏–∑—É—á–∞–ª–∏—Å—å
        const unlearnedWords = userWords.filter(word => {
            if (word.status !== 'active') {
                return false;
            }
            
            // –ù–æ–≤–æ–µ —Å–ª–æ–≤–æ = interval=1 –ò firstLearnedDate –ø—É—Å—Ç–æ–π
            const isNewWord = word.interval === 1 && 
                            (!word.firstLearnedDate || word.firstLearnedDate.trim() === '');
            
            return isNewWord;
        });

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–º–∏)
        unlearnedWords.sort((a, b) => new Date(b.createdDate) - new Date(a.createdDate));

        return unlearnedWords;
        
    } catch (error) {
        return [];
    }
}

async function showNextNewWord(chatId) {
    const userState = userStates.get(chatId);
    if (!userState || userState.state !== 'learning_new_words') return;

    const { newWords, currentWordIndex } = userState;
    
    if (newWords.length === 0) {
        await completeNewWordsSession(chatId, userState);
        return;
    }

    if (currentWordIndex >= newWords.length) {
        userState.currentWordIndex = 0;
    }

    const word = newWords[userState.currentWordIndex];
    
    const currentLearnedToday = await getLearnedToday(chatId);
    const remainingSlots = Math.max(0, 5 - currentLearnedToday);
    
    const currentPosition = userState.currentWordIndex + 1;
    const totalWords = newWords.length;
    const progress = `${currentPosition}/${totalWords}`;
    
    const wordStatus = word.firstLearnedDate ? 
        `üîÑ –í–æ–∑–≤—Ä–∞—â–µ–Ω–æ –Ω–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ (–∏–∑—É—á–µ–Ω–æ: ${formatMoscowDate(word.firstLearnedDate)})` : 
        `üÜï –ù–æ–≤–æ–µ —Å–ª–æ–≤–æ`;
    
    let message = `üéØ –ò–∑—É—á–µ–Ω–∏–µ —Å–ª–æ–≤ ${progress}\n\n`;
    message += `üìä –ò–∑—É—á–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è: ${currentLearnedToday}/5\n`;
    message += `üìù –°—Ç–∞—Ç—É—Å: ${wordStatus}\n\n`;
    message += `üá¨üáß **${word.english}**\n`;
    
    if (word.transcription) {
        message += `üî§ ${word.transcription}\n`;
    }
    
    message += `\nüá∑üá∫ **–ü–µ—Ä–µ–≤–æ–¥—ã:**\n`;
    
    word.meanings.forEach((meaning, index) => {
        message += `\n${index + 1}. ${meaning.translation}`;
        if (meaning.definition) {
            message += ` - ${meaning.definition}`;
        }
        
        if (meaning.example && meaning.example.trim() !== '') {
            message += `\n   üìù *–ü—Ä–∏–º–µ—Ä:* ${meaning.example}`;
        }
    });

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∞—É–¥–∏–æ
    if (word.english) {
        try {
            const audioUrl = await getCachedAudio(word.english);
            if (audioUrl) {
                await bot.sendAudio(chatId, audioUrl, {
                    caption: 'üîä –ü—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ'
                });
            }
        } catch (error) {
            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—à–∏–±–∫–∏ –∞—É–¥–∏–æ
        }
    }

    await bot.sendMessage(chatId, message, {
        parse_mode: 'Markdown',
        ...getNewWordsKeyboard()
    });
}

async function processNewWordLearning(chatId, action) {
    const userState = userStates.get(chatId);
    if (!userState || userState.state !== 'learning_new_words') return;

    const word = userState.newWords[userState.currentWordIndex];
    
    try {
        if (action === 'learned') {
            const cardData = fsrsService.createNewCard();
            const fsrsResult = await fsrsService.reviewCard(chatId, word.english, cardData, 'good');
            
            if (fsrsResult) {
                // ‚úÖ –í–ê–ñ–ù–û: –î–ª—è –Ω–æ–≤—ã—Ö —Å–ª–æ–≤ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º firstLearnedDate
                if (word.interval === 1 && (!word.firstLearnedDate || word.firstLearnedDate.trim() === '')) {
                    fsrsResult.firstLearnedDate = new Date().toISOString();
                }

                const success = await sheetsService.updateWordAfterFSRSReview(
                    chatId,
                    word.english,
                    fsrsResult,
                    'good'
                );
     
                if (!success) {
                    throw new Error('Failed to save word progress to Google Sheets');
                }

                userState.learnedCount++;
                markWordAsLearned(chatId, word.english);
                
                userState.newWords.splice(userState.currentWordIndex, 1);
                
                const currentLearnedToday = await getLearnedToday(chatId);
                
                if (userState.newWords.length === 0) {
                    await completeNewWordsSession(chatId, userState);
                    return;
                }
                
                if (currentLearnedToday >= 5) {
                    await bot.sendMessage(chatId, 
                        `üéâ –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞ –≤ 5 —Å–ª–æ–≤!\n\n` +
                        `üìä –ò–∑—É—á–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è: ${currentLearnedToday}/5\n\n` +
                        'üí° –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∑–∞–≤—Ç—Ä–∞ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Å–ª–æ–≤.'
                    );
                    await completeNewWordsSession(chatId, userState);
                    return;
                }
                
                if (userState.currentWordIndex >= userState.newWords.length) {
                    userState.currentWordIndex = 0;
                }
                
            } else {
                throw new Error('FSRS returned empty result');
            }
            
        } else if (action === 'repeat') {
            userState.currentWordIndex++;
            userState.lastActivity = Date.now();
        }
        
        if (userState.newWords.length === 0) {
            await completeNewWordsSession(chatId, userState);
            return;
        }
        
        if (userState.currentWordIndex >= userState.newWords.length) {
            userState.currentWordIndex = 0;
        }
        
        await showNextNewWord(chatId);

    } catch (error) {
        await bot.sendMessage(chatId, 
            '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.\n' +
            '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.'
        );
    }
}

async function completeNewWordsSession(chatId, userState) {
    userStates.delete(chatId);
    
    const currentLearnedToday = await getLearnedToday(chatId);
    const originalWordsCount = userState.originalWordsCount || 0;
    const learnedCount = userState.learnedCount || 0;
    
    let message = 'üéâ **–°–µ—Å—Å–∏—è –∏–∑—É—á–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**\n\n';
    message += `üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n`;
    message += `‚Ä¢ –í—Å–µ–≥–æ –Ω–æ–≤—ã—Ö —Å–ª–æ–≤: ${originalWordsCount}\n`;
    message += `‚Ä¢ –ò–∑—É—á–µ–Ω–æ –≤ —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏: ${learnedCount}\n`;
    message += `‚Ä¢ –í—Å–µ–≥–æ –∏–∑—É—á–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è: ${currentLearnedToday}/5\n`;
    message += `‚Ä¢ –û—Ç–ª–æ–∂–µ–Ω–æ: ${originalWordsCount - learnedCount}\n\n`;
    
    if (currentLearnedToday >= 5) {
        message += `‚úÖ –î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –¥–æ—Å—Ç–∏–≥–Ω—É—Ç!\n`;
        message += `üí° –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∑–∞–≤—Ç—Ä–∞ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Å–ª–æ–≤.\n\n`;
    } else if (learnedCount === originalWordsCount && originalWordsCount > 0) {
        message += `üí™ –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –í—ã –∏–∑—É—á–∏–ª–∏ –≤—Å–µ –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞!\n\n`;
        message += `üîÑ –≠—Ç–∏ —Å–ª–æ–≤–∞ –ø–æ—è–≤—è—Ç—Å—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –∑–∞–≤—Ç—Ä–∞.`;
    } else if (originalWordsCount > 0) {
        message += `üí° –û—Å—Ç–∞–≤—à–∏–µ—Å—è —Å–ª–æ–≤–∞ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑.\n\n`;
    }
    
    const reviewWordsCount = await sheetsService.getReviewWordsCount(chatId);
    if (reviewWordsCount > 0) {
        message += `\nüìö –°–ª–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è: ${reviewWordsCount}\n`;
        message += `–ú–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –º–µ–Ω—é!`;
    }
    
    await bot.sendMessage(chatId, message, {
        parse_mode: 'Markdown',
        ...getMainMenu()
    });
}

// –§—É–Ω–∫—Ü–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
async function showUserStats(chatId) {
    await initializeServices();
    
    if (!sheetsService.initialized) {
        await bot.sendMessage(chatId, '‚ùå –°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.');
        return;
    }

    try {
        const userWords = await getCachedUserWords(chatId);
        const activeWords = userWords.filter(word => word.status === 'active');
        
        const newWords = activeWords.filter(word => 
            word.interval === 1 && 
            (!word.firstLearnedDate || word.firstLearnedDate.trim() === '')
        );
        const newWordsCount = newWords.length;
        
        const reviewWords = await sheetsService.getWordsForReview(chatId);
        const reviewWordsCount = reviewWords.length;
        
        const totalWordsCount = activeWords.length;
        const learnedToday = await getLearnedToday(chatId);
        const DAILY_LIMIT = 5;
        const remainingToday = Math.max(0, DAILY_LIMIT - learnedToday);
        
        const learnedWords = activeWords.filter(word => 
            word.interval > 1 || 
            (word.firstLearnedDate && word.firstLearnedDate.trim() !== '')
        );
        const learnedWordsCount = learnedWords.length;
        
        let message = 'üìä **–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n\n';
        message += `üìö –í—Å–µ–≥–æ —Å–ª–æ–≤ –≤ —Å–ª–æ–≤–∞—Ä–µ: ${totalWordsCount}\n`;
        message += `üéì –ò–∑—É—á–µ–Ω–æ —Å–ª–æ–≤: ${learnedWordsCount}\n`;
        message += `üÜï –ù–æ–≤—ã—Ö —Å–ª–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–æ: ${newWordsCount}\n`;
        message += `üîÑ –°–ª–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è: ${reviewWordsCount}\n`;
        message += `üìÖ –ò–∑—É—á–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è: ${learnedToday}/${DAILY_LIMIT}\n`;
        
        if (remainingToday > 0) {
            message += `üéØ –û—Å—Ç–∞–ª–æ—Å—å –∏–∑—É—á–∏—Ç—å —Å–µ–≥–æ–¥–Ω—è: ${remainingToday} —Å–ª–æ–≤\n`;
        } else {
            message += `‚úÖ –î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –¥–æ—Å—Ç–∏–≥–Ω—É—Ç!\n`;
        }

        // –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ê –°–ï–ö–¶–ò–Ø: –ë–ª–∏–∂–∞–π—à–∏–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è —Å –æ–±—Ä–∞—Ç–Ω—ã–º –æ—Ç—Å—á–µ—Ç–æ–º
        const now = new Date();
        const futureWords = activeWords.filter(word => {
            if (!word.nextReview || word.interval <= 1) return false;
            try {
                const nextReview = new Date(word.nextReview);
                const moscowOffset = 3 * 60 * 60 * 1000;
                const moscowNow = new Date(now.getTime() + moscowOffset);
                const moscowReview = new Date(nextReview.getTime() + moscowOffset);
                
                return moscowReview > moscowNow;
            } catch (e) {
                return false;
            }
        });
        
        futureWords.sort((a, b) => new Date(a.nextReview) - new Date(b.nextReview));
        const nearestWords = futureWords.slice(0, 5);
        
        if (nearestWords.length > 0) {
            message += `\n‚è∞ **–ë–ª–∏–∂–∞–π—à–∏–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è:**\n`;
            
            nearestWords.forEach((word, index) => {
                const reviewDate = new Date(word.nextReview);
                message += `‚Ä¢ ${formatTimeWithCountdown(reviewDate)}: ${word.english}\n`;
            });
            
            if (futureWords.length > 5) {
                const remainingCount = futureWords.length - 5;
                message += `‚Ä¢ ... –∏ –µ—â–µ ${remainingCount} —Å–ª–æ–≤\n`;
            }
        } else if (reviewWordsCount > 0) {
            message += `\n‚è∞ **–ë–ª–∏–∂–∞–π—à–µ–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ:** üîî –ì–û–¢–û–í–û –°–ï–ô–ß–ê–°!\n`;
            message += `üéØ –ù–∞—á–Ω–∏—Ç–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –º–µ–Ω—é "üìö –ü–æ–≤—Ç–æ—Ä–∏—Ç—å —Å–ª–æ–≤–∞"\n`;
        } else {
            message += `\n‚è∞ **–ë–ª–∏–∂–∞–π—à–µ–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ:** –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö\n`;
        }
        
        // –í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞
        const serverTime = new Date();
        const moscowTime = toMoscowTime(serverTime);
        
        message += `\nüïê **–í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞:** ${formatTimeDetailed(serverTime)}`;
        message += `\nüá∑üá∫ **–ú–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è:** ${formatTimeDetailed(moscowTime)}`;
        
        // –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
        const recentAddedWords = activeWords
            .sort((a, b) => new Date(b.createdDate) - new Date(a.createdDate))
            .slice(0, 3);
        
        if (recentAddedWords.length > 0) {
            message += `\n\nüì• **–ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞:**\n`;
            recentAddedWords.forEach(word => {
                const timeAdded = formatMoscowDate(word.createdDate);
                const isNew = word.interval === 1 && (!word.firstLearnedDate || word.firstLearnedDate.trim() === '');
                const status = isNew ? 'üÜï' : 'üéì';
                message += `‚Ä¢ ${status} ${word.english} (${timeAdded})\n`;
            });
        }

        // –ü—Ä–æ–≥—Ä–µ—Å—Å
        const progressPercentage = totalWordsCount > 0 ? Math.round((learnedWordsCount / totalWordsCount) * 100) : 0;
        
        message += `\nüìà **–û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å:** ${progressPercentage}% –∏–∑—É—á–µ–Ω–æ`;
        message += `\n   (${learnedWordsCount} –∏–∑ ${totalWordsCount} —Å–ª–æ–≤)`;
        
        await bot.sendMessage(chatId, message, {
            parse_mode: 'Markdown',
            ...getMainMenu()
        });
        
    } catch (error) {
        await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.');
    }
}

// –§–£–ù–ö–¶–ò–Ø: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã —Å –æ–±—Ä–∞—Ç–Ω—ã–º –æ—Ç—Å—á–µ—Ç–æ–º (–í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ê)
function formatTimeWithCountdown(date) {
    const now = new Date();
    const targetDate = new Date(date);
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    const moscowOffset = 3 * 60 * 60 * 1000;
    const moscowNow = new Date(now.getTime() + moscowOffset);
    const moscowTarget = new Date(targetDate.getTime() + moscowOffset);
    
    const diffTime = moscowTarget - moscowNow;
    const diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24));
    const diffHours = Math.floor((diffTime % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
    const diffMinutes = Math.floor((diffTime % (1000 * 60 * 60)) / (1000 * 60));
    
    const day = moscowTarget.getDate().toString().padStart(2, '0');
    const month = (moscowTarget.getMonth() + 1).toString().padStart(2, '0');
    const hours = moscowTarget.getHours().toString().padStart(2, '0');
    const minutes = moscowTarget.getMinutes().toString().padStart(2, '0');
    
    const daysOfWeek = ['–≤—Å', '–ø–Ω', '–≤—Ç', '—Å—Ä', '—á—Ç', '–ø—Ç', '—Å–±'];
    const dayOfWeek = daysOfWeek[moscowTarget.getDay()];
    
    let timeString = `${day}.${month} ${hours}:${minutes}`;
    
    if (diffDays === 0) {
        if (diffHours === 0) {
            timeString += ` (—á–µ—Ä–µ–∑ ${diffMinutes} –º–∏–Ω)`;
        } else {
            timeString += ` (—á–µ—Ä–µ–∑ ${diffHours} —á ${diffMinutes} –º–∏–Ω)`;
        }
    } else if (diffDays === 1) {
        timeString += ` (–∑–∞–≤—Ç—Ä–∞, —á–µ—Ä–µ–∑ ${diffDays} –¥–Ω)`;
    } else if (diffDays <= 7) {
        timeString += ` (${dayOfWeek}, —á–µ—Ä–µ–∑ ${diffDays} –¥–Ω)`;
    } else {
        timeString += ` (${dayOfWeek})`;
    }
    
    return timeString;
}

// –§–£–ù–ö–¶–ò–Ø: –î–µ—Ç–∞–ª—å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ (–í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ê)
function formatTimeDetailed(date) {
    const moscowDate = toMoscowTime(date);
    
    const day = moscowDate.getDate().toString().padStart(2, '0');
    const month = (moscowDate.getMonth() + 1).toString().padStart(2, '0');
    const year = moscowDate.getFullYear();
    const hours = moscowDate.getHours().toString().padStart(2, '0');
    const minutes = moscowDate.getMinutes().toString().padStart(2, '0');
    const seconds = moscowDate.getSeconds().toString().padStart(2, '0');
    
    const daysOfWeek = ['–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ', '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–≤—Ç–æ—Ä–Ω–∏–∫', '—Å—Ä–µ–¥–∞', '—á–µ—Ç–≤–µ—Ä–≥', '–ø—è—Ç–Ω–∏—Ü–∞', '—Å—É–±–±–æ—Ç–∞'];
    const dayOfWeek = daysOfWeek[moscowDate.getDay()];
    
    return `${day}.${month}.${year} ${hours}:${minutes}:${seconds} (${dayOfWeek})`;
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
bot.onText(/\/start/, async (msg) => {
    const chatId = msg.chat.id;
    await initializeServices();
    await bot.sendMessage(chatId, 
        'üìö –ê–Ω–≥–ª–æ-—Ä—É—Å—Å–∫–∏–π —Å–ª–æ–≤–∞—Ä—å\n' +
        'üî§ –° —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–µ–π –∏ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ–º\n' +
        'üá¨üáß –ë—Ä–∏—Ç–∞–Ω—Å–∫–∏–π –≤–∞—Ä–∏–∞–Ω—Ç\n' +
        'üìù –ö–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ —Ö—Ä–∞–Ω–∏—Ç—Å—è —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏\n' +
        'üîÑ **–£–º–Ω–æ–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–æ–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ (FSRS)**\n\n' +
        'üí° **–ö–∞–∫ —É—á–∏—Ç—å —Å–ª–æ–≤–∞:**\n' +
        '1. ‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ\n' +
        '2. üÜï –ò–∑—É—á–∏—Ç—å –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞ (5 –≤ –¥–µ–Ω—å)\n' +
        '3. üìö –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∏–∑—É—á–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞\n\n' +
        '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:',
        getMainMenu()
    );
});

bot.onText(/\/review/, async (msg) => {
    const chatId = msg.chat.id;
    await startReviewSession(chatId);
});

bot.onText(/\/stats/, async (msg) => {
    const chatId = msg.chat.id;
    await showUserStats(chatId);
});

bot.onText(/\/new/, async (msg) => {
    const chatId = msg.chat.id;
    await startNewWordsSession(chatId);
});

bot.onText(/\/reset_progress/, async (msg) => {
    const chatId = msg.chat.id;
    
    if (!servicesInitialized || !sheetsService.initialized) {
        await bot.sendMessage(chatId, '‚ùå –°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.');
        return;
    }

    try {
        dailyLearnedWords.delete(chatId);
        learnedWords.delete(chatId);
        userStates.delete(chatId);
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —á–µ—Ä–µ–∑ —É—Å—Ç–∞–Ω–æ–≤–∫—É –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ = 1
        const userWords = await getCachedUserWords(chatId);
        for (const word of userWords) {
            if (word.status === 'active') {
                const cardData = {
                    due: new Date(),
                    stability: 0.1,
                    difficulty: 5.0,
                    elapsed_days: 0,
                    scheduled_days: 1,
                    reps: 0,
                    lapses: 0,
                    state: 1,
                    last_review: new Date()
                };
                
                await sheetsService.updateWordAfterFSRSReview(
                    chatId,
                    word.english,
                    cardData,
                    'again'
                );
            }
        }
        
        await bot.sendMessage(chatId, 
            '‚úÖ **–ü—Ä–æ–≥—Ä–µ—Å—Å —Å–±—Ä–æ—à–µ–Ω!**\n\n' +
            '–í—Å–µ —Å–ª–æ–≤–∞ —Ç–µ–ø–µ—Ä—å –æ—Ç–º–µ—á–µ–Ω—ã –∫–∞–∫ –Ω–æ–≤—ã–µ.\n' +
            '–î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –æ—á–∏—â–µ–Ω.',
            { parse_mode: 'Markdown' }
        );
        
    } catch (error) {
        await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.');
    }
});

bot.onText(/\/clear_audio_cache/, async (msg) => {
    const chatId = msg.chat.id;
    
    const audioCacheSize = audioCache.size;
    audioCache.clear();
    
    await bot.sendMessage(chatId, 
        `‚úÖ –ö—ç—à –∞—É–¥–∏–æ –æ—á–∏—â–µ–Ω!\n\n` +
        `–£–¥–∞–ª–µ–Ω–æ ${audioCacheSize} –∑–∞–ø–∏—Å–µ–π.`,
        getMainMenu()
    );
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    const text = msg.text;

    if (!text || text.startsWith('/')) {
        return;
    }

    await initializeServices();
    updateUserActivity(chatId);

    const userState = userStates.get(chatId);

    if (text === '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ') {
        userStates.set(chatId, { state: 'waiting_english', lastActivity: Date.now() });
        await bot.sendMessage(chatId, 'üá¨üáß –í–≤–µ–¥–∏—Ç–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ:');
    }
    else if (text === 'üìö –ü–æ–≤—Ç–æ—Ä–∏—Ç—å') {
        await startReviewSession(chatId);
    }
    else if (text === 'üÜï –ù–æ–≤—ã–µ —Å–ª–æ–≤–∞') {
        await startNewWordsSession(chatId);
    }
    else if (text === 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞') {
        await showUserStats(chatId);
    }
    else if (userState?.state === 'waiting_english') {
        await handleAddWord(chatId, text);
    }
    else if (userState?.state === 'spelling_training') {
        if (text === 'üîô –ù–∞–∑–∞–¥ –∫ –∫–∞—Ä—Ç–æ—á–∫–µ') {
            await returnToCard(chatId, userState);
        } else {
            await checkSpellingAnswer(chatId, text);
        }
    }
    else if (userState?.state === 'waiting_custom_translation') {
        if (text && text.trim() !== '') {
            await processCustomTranslation(chatId, userState, text.trim());
        } else {
            await bot.sendMessage(chatId, '‚ùå –ü–µ—Ä–µ–≤–æ–¥ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥:');
        }
    }
        else if (userState?.state === 'waiting_custom_example') {
        if (text && text.trim() !== '') {
            await processCustomTranslation(chatId, userState, userState.customTranslation, text.trim());
        } else {
            // –ï—Å–ª–∏ –ø—Ä–∏–º–µ—Ä –ø—É—Å—Ç–æ–π, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –±–µ–∑ –ø—Ä–∏–º–µ—Ä–∞
            await processCustomTranslation(chatId, userState, userState.customTranslation);
        }
    }

    else if (userState?.state === 'waiting_custom_example') {
        await processCustomTranslation(chatId, userState, userState.customTranslation, text);
    }
    else if (text === 'üîÅ –†—É—Å‚Üí–ê–Ω–≥–ª –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞') {
    await startReverseTraining(chatId);
}
else if (userState?.state === REVERSE_TRAINING_STATES.ACTIVE) {
    if (text === 'üëÄ –û—Ç–≤–µ—Ç') {
        const word = userState.words[userState.index];
        await showTrainingResult(chatId, userState, word, false);
        
        // –ü–æ—Å–ª–µ –ø–æ–∫–∞–∑–∞ –æ—Ç–≤–µ—Ç–∞ —Ç–æ–∂–µ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–ª–æ–≤—É
        setTimeout(async () => {
            userState.index++;
            userState.lastActivity = Date.now();

            if (userState.index >= userState.words.length) {
                await completeTraining(chatId, userState);
            } else {
                await showNextTrainingWord(chatId);
            }
        }, 2500);
    } else if (text === '‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å') {
        await completeTraining(chatId, userState);
    } else {
        await checkTrainingAnswer(chatId, text);
    }
}
else if (userState?.state === REVERSE_TRAINING_STATES.SPELLING) {
    if (text === 'üîô –ù–∞–∑–∞–¥') {
        returnToTraining(chatId, userState);
    } else {
        await ccheckTrainingSpellingAnswer(chatId, text);
    }
}
    else {
        await bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:', getMainMenu());
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞
async function handleAddWord(chatId, englishWord) {
    const lowerWord = englishWord.trim().toLowerCase();

    if (!/^[a-zA-Z\s\-'\.]+$/.test(lowerWord)) {
        await bot.sendMessage(chatId, 
            '‚ùå –≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ.\n' +
            '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º:'
        );
        return;

        if (!englishWord || englishWord.trim() === '') {
    await bot.sendMessage(chatId, '‚ùå –°–ª–æ–≤–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ:');
    return;
}
    }

    await bot.sendMessage(chatId, 'üîç –ò—â—É –ø–µ—Ä–µ–≤–æ–¥, —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –∏ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ...');

    try {
        let transcription = '';
        let audioUrl = '';
        let meanings = [];
        let translations = [];

        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Cambridge Dictionary
        const cambridgeData = await cambridgeService.getWordData(lowerWord);
        if (cambridgeData.meanings && cambridgeData.meanings.length > 0) {
            meanings = cambridgeData.meanings;
            translations = meanings.map(m => m.translation).filter((t, i, arr) => arr.indexOf(t) === i);
        }

        // –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –∏ –∞—É–¥–∏–æ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        try {
            const yandexData = await yandexService.getTranscriptionAndAudio(lowerWord);
            transcription = yandexData.transcription || '';
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∞—É–¥–∏–æ
            audioUrl = await getCachedAudio(lowerWord);
        } catch (yandexError) {
            // –ï—Å–ª–∏ Yandex –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∞—É–¥–∏–æ –æ—Ç Google TTS
            audioUrl = await getCachedAudio(lowerWord);
        }

        userStates.set(chatId, {
            state: 'showing_transcription',
            tempWord: lowerWord,
            tempTranscription: transcription,
            tempAudioUrl: audioUrl,
            tempAudioId: Date.now().toString(),
            tempTranslations: translations,
            meanings: meanings,
            selectedTranslationIndices: [],
            lastActivity: Date.now()
        });

        let message = `üìù –°–ª–æ–≤–æ: ${lowerWord}`;
        if (transcription) {
            message += `\nüî§ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è: ${transcription}`;
        }
        if (audioUrl) {
            message += `\n\nüéµ –î–æ—Å—Ç—É–ø–Ω–æ –∞—É–¥–∏–æ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ`;
        }
        if (translations.length > 0) {
            message += `\n\nüéØ –ù–∞–π–¥–µ–Ω–æ ${translations.length} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–µ—Ä–µ–≤–æ–¥–∞`;
        } else {
            message += `\n\n‚ùå –ü–µ—Ä–µ–≤–æ–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n‚úèÔ∏è –í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–π –ø–µ—Ä–µ–≤–æ–¥`;
        }
        message += `\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;

        await bot.sendMessage(chatId, message, {
            reply_markup: {
                inline_keyboard: [
                    audioUrl ? [{ text: 'üîä –ü—Ä–æ—Å–ª—É—à–∞—Ç—å –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ', callback_data: `audio_${audioUrl}` }] : [],
                    [{ text: '‚û°Ô∏è –í—ã–±—Ä–∞—Ç—å –ø–µ—Ä–µ–≤–æ–¥', callback_data: 'enter_translation' }]
                ].filter(row => row.length > 0)
            }
        });

    } catch (error) {
        await bot.sendMessage(chatId, 
            '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å–ª–æ–≤–∞\n\n' +
            '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ —Å–ª–æ–≤–æ –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ.'
        );
        userStates.delete(chatId);
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback
bot.on('callback_query', async (callbackQuery) => {
    const chatId = callbackQuery.message.chat.id;
    const data = callbackQuery.data;
    
    await initializeServices();
    updateUserActivity(chatId);

    const userState = userStates.get(chatId);
    await bot.answerCallbackQuery(callbackQuery.id);

    if (data.startsWith('details_')) {
        const translationIndex = parseInt(data.replace('details_', ''));
        if (userState?.state === 'choosing_translation' && userState.tempTranslations[translationIndex]) {
            await showTranslationDetails(chatId, translationIndex, userState);
        }
    }
    else if (data === 'back_to_translations') {
        if (userState?.state === 'choosing_translation') {
            await backToTranslationSelection(chatId, userState, callbackQuery);
        }
    }
    else if (data.startsWith('toggle_translation_')) {
        const translationIndex = parseInt(data.replace('toggle_translation_', ''));
        if (userState?.state === 'choosing_translation' && userState.tempTranslations[translationIndex]) {
            try {
                let selectedIndices = [...(userState.selectedTranslationIndices || [])];
                if (selectedIndices.includes(translationIndex)) {
                    selectedIndices = selectedIndices.filter(idx => idx !== translationIndex);
                } else {
                    selectedIndices.push(translationIndex);
                }

                userStates.set(chatId, {
                    ...userState,
                    selectedTranslationIndices: selectedIndices
                });

                await bot.editMessageReplyMarkup(
                    getTranslationSelectionKeyboard(userState.tempTranslations, userState.meanings, selectedIndices).reply_markup,
                    { chat_id: chatId, message_id: callbackQuery.message.message_id }
                );
            } catch (error) {
                await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–µ—Ä–µ–≤–æ–¥–∞');
            }
        }
    }
    else if (data === 'save_selected_translations') {
        if (userState?.state === 'choosing_translation' && userState.selectedTranslationIndices.length > 0) {
            try {
                const selectedTranslations = userState.selectedTranslationIndices
                    .map(index => userState.tempTranslations[index]);

                await saveWordWithMeanings(chatId, userState, selectedTranslations);
                
                try {
                    await bot.deleteMessage(chatId, callbackQuery.message.message_id);
                } catch (deleteError) {
                    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
                }
            } catch (error) {
                await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–ª–æ–≤–∞');
            }
        } else {
            await bot.sendMessage(chatId, '‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
        }
    }
    else if (data === 'custom_translation') {
        if (userState?.state === 'choosing_translation') {
            try {
                userStates.set(chatId, {
                    ...userState,
                    state: 'waiting_custom_translation'
                });

                let translationMessage = '‚úèÔ∏è **–î–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–π –ø–µ—Ä–µ–≤–æ–¥**\n\n' +
                    `üá¨üáß –°–ª–æ–≤–æ: **${userState.tempWord}**`;
                if (userState.tempTranscription) {
                    translationMessage += `\nüî§ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è: ${userState.tempTranscription}`;
                }
                translationMessage += '\n\nüìù –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–∞—Ä–∏–∞–Ω—Ç –ø–µ—Ä–µ–≤–æ–¥–∞:';

                await bot.deleteMessage(chatId, callbackQuery.message.message_id);
                await bot.sendMessage(chatId, translationMessage, { parse_mode: 'Markdown' });
            } catch (error) {
                await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞');
            }
        }
    }
    else if (data === 'cancel_translation') {
        if (userState) {
            try {
                userStates.set(chatId, {
                    ...userState,
                    state: 'showing_transcription'
                });

                let message = `üìù –°–ª–æ–≤–æ: ${userState.tempWord}`;
                if (userState.tempTranscription) {
                    message += `\nüî§ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è: ${userState.tempTranscription}`;
                }
                message += '\n\nüéµ –î–æ—Å—Ç—É–ø–Ω–æ –∞—É–¥–∏–æ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:';

                await bot.editMessageReplyMarkup(
                    {
                        inline_keyboard: [
                            userState.tempAudioUrl ? [{ text: 'üîä –ü—Ä–æ—Å–ª—É—à–∞—Ç—å –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ', callback_data: `audio_${userState.tempAudioId}` }] : [],
                            [{ text: '‚û°Ô∏è –í—ã–±—Ä–∞—Ç—å –ø–µ—Ä–µ–≤–æ–¥', callback_data: 'enter_translation' }]
                        ].filter(row => row.length > 0)
                    },
                    { chat_id: chatId, message_id: callbackQuery.message.message_id }
                );
            } catch (error) {
                await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ');
            }
        }
    }
    else if (data === 'show_answer') {
        await showReviewAnswer(chatId);
    }
    else if (data.startsWith('review_')) {
        const rating = data.replace('review_', '');
        await processReviewRating(chatId, rating);
    }
    else if (data === 'end_review') {
        if (userState?.state === 'review_session') {
            await completeReviewSession(chatId, userState);
        }
    }
    else if (data === 'learned_word') {
        await processNewWordLearning(chatId, 'learned');
    }
    else if (data === 'need_repeat_word') {
        await processNewWordLearning(chatId, 'repeat');
    }
    else if (data === 'spelling_train') {
        const userState = userStates.get(chatId);
        
        if (userState?.state === 'review_session') {
            await startSpellingTraining(chatId, 'review');
        } 
        else if (userState?.state === 'learning_new_words') {
            await startSpellingTraining(chatId, 'learning');
        }
        
        try {
            await bot.deleteMessage(chatId, callbackQuery.message.message_id);
        } catch (e) {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
        }
    }
else if (data.startsWith('audio_')) {
    const audioUrl = data.replace('audio_', '');
    const englishWord = userState?.tempWord;

    if (audioUrl && englishWord) {
        try {
            await bot.sendAudio(chatId, audioUrl, {
                caption: `üîä –ë—Ä–∏—Ç–∞–Ω—Å–∫–æ–µ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ: ${englishWord}`
            });
            await bot.sendMessage(chatId, 'üéµ –í—ã –ø—Ä–æ—Å–ª—É—à–∞–ª–∏ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ. –•–æ—Ç–∏—Ç–µ –≤—ã–±—Ä–∞—Ç—å –ø–µ—Ä–µ–≤–æ–¥?', {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: '‚úèÔ∏è –í—ã–±—Ä–∞—Ç—å –ø–µ—Ä–µ–≤–æ–¥', callback_data: 'enter_translation' }]
                    ]
                }
            });
        } catch (error) {
            // –ï—Å–ª–∏ URL –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π –∏–∑ –∫—ç—à–∞
            try {
                const newAudioUrl = await getCachedAudio(englishWord);
                if (newAudioUrl && newAudioUrl !== audioUrl) {
                    await bot.sendAudio(chatId, newAudioUrl, {
                        caption: `üîä –ë—Ä–∏—Ç–∞–Ω—Å–∫–æ–µ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ: ${englishWord}`
                    });
                    await bot.sendMessage(chatId, 'üéµ –í—ã –ø—Ä–æ—Å–ª—É—à–∞–ª–∏ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ. –•–æ—Ç–∏—Ç–µ –≤—ã–±—Ä–∞—Ç—å –ø–µ—Ä–µ–≤–æ–¥?', {
                        reply_markup: {
                            inline_keyboard: [
                                [{ text: '‚úèÔ∏è –í—ã–±—Ä–∞—Ç—å –ø–µ—Ä–µ–≤–æ–¥', callback_data: 'enter_translation' }]
                            ]
                        }
                    });
                } else {
                    throw new Error('No audio available');
                }
            } catch (retryError) {
                await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏ –∞—É–¥–∏–æ.');
            }
        }
    } else {
        await bot.sendMessage(chatId, '‚ùå –ê—É–¥–∏–æ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è —ç—Ç–æ–≥–æ —Å–ª–æ–≤–∞.');
    }
}
    else if (data === 'enter_translation') {
        if (userState?.state === 'showing_transcription') {
            try {
                const hasTranslations = userState.tempTranslations && 
                                      userState.tempTranslations.length > 0;
                
                if (hasTranslations) {
                    userStates.set(chatId, {
                        ...userState,
                        state: 'choosing_translation',
                        selectedTranslationIndices: []
                    });

                    let translationMessage = 'üéØ **–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥—ã:**\n\n' +
                        `üá¨üáß **${userState.tempWord}**`;
                    if (userState.tempTranscription) {
                        translationMessage += `\nüî§ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è: ${userState.tempTranscription}`;
                    }
                    translationMessage += '\n\nüí° –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–æ–º–µ—Ä –ø–µ—Ä–µ–≤–æ–¥–∞ —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –µ–≥–æ';

                    await bot.sendMessage(
                        chatId, 
                        translationMessage,
                        {
                            parse_mode: 'Markdown',
                            ...getTranslationSelectionKeyboard(
                                userState.tempTranslations, 
                                userState.meanings, 
                                []
                            )
                        }
                    );
                } else {
                    userStates.set(chatId, {
                        ...userState,
                        state: 'waiting_custom_translation'
                    });

                    let translationMessage = '‚úèÔ∏è **–î–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–π –ø–µ—Ä–µ–≤–æ–¥**\n\n' +
                        `üá¨üáß –°–ª–æ–≤–æ: **${userState.tempWord}**`;
                    if (userState.tempTranscription) {
                        translationMessage += `\nüî§ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è: ${userState.tempTranscription}`;
                    }
                    translationMessage += '\n\nüìù –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–∞—Ä–∏–∞–Ω—Ç –ø–µ—Ä–µ–≤–æ–¥–∞:';

                    await bot.sendMessage(chatId, translationMessage, { parse_mode: 'Markdown' });
                }
            } catch (error) {
                await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.');
            }
        }
    } else if (data.startsWith('training_')) {
    await handleTrainingCallback(chatId, data);
    
    try {
        await bot.deleteMessage(chatId, callbackQuery.message.message_id);
    } catch (e) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
    }
}
});

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏
async function showTranslationDetails(chatId, translationIndex, userState) {
    try {
        const translation = userState.tempTranslations[translationIndex];
        const meaning = userState.meanings.find(m => 
            m.translation && m.translation.trim() === translation.trim()
        );

        if (meaning) {
            let detailsMessage = `üîç **–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ–≤–æ–¥–∞:**\n\n`;
            detailsMessage += `üá¨üáß **–°–ª–æ–≤–æ:** ${userState.tempWord}\n`;
            detailsMessage += `üá∑üá∫ **–ü–µ—Ä–µ–≤–æ–¥:** ${translation}\n\n`;

            if (meaning.partOfSpeech && meaning.partOfSpeech.trim() !== '') {
                detailsMessage += `üî§ **–ß–∞—Å—Ç—å —Ä–µ—á–∏:** ${meaning.partOfSpeech}\n\n`;
            }

            if (meaning.englishDefinition && meaning.englishDefinition.trim() !== '') {
                detailsMessage += `üìñ **–ê–Ω–≥–ª–∏–π—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ:**\n${meaning.englishDefinition}\n\n`;
            }

            if (meaning.examples && meaning.examples.length > 0) {
                detailsMessage += `üìù **–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:**\n`;
                meaning.examples.forEach((example, index) => {
                    if (index < 3) {
                        detailsMessage += `\n${index + 1}. ${example.english}`;
                        if (example.russian && example.russian.trim() !== '') {
                            detailsMessage += `\n   ${example.russian}`;
                        }
                    }
                });
            } else {
                detailsMessage += `üìù **–ü—Ä–∏–º–µ—Ä—ã:** –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n`;
            }

            await bot.sendMessage(chatId, detailsMessage, {
                parse_mode: 'Markdown',
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –ø–µ—Ä–µ–≤–æ–¥–æ–≤', callback_data: 'back_to_translations' }]
                    ]
                }
            });
        } else {
            await bot.sendMessage(chatId, 
                `‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–µ—Ä–µ–≤–æ–¥–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞\n\n` +
                `–ü–µ—Ä–µ–≤–æ–¥: "${translation}"\n` +
                `–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –ø–µ—Ä–µ–≤–æ–¥.`
            );
        }
    } catch (error) {
        await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π –ø–µ—Ä–µ–≤–æ–¥–∞');
    }
}

async function backToTranslationSelection(chatId, userState, callbackQuery) {
    try {
        let translationMessage = 'üéØ **–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥—ã:**\n\n' +
            `üá¨üáß **${userState.tempWord}**`;
        if (userState.tempTranscription) {
            translationMessage += `\nüî§ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è: ${userState.tempTranscription}`;
        }
        translationMessage += '\n\nüí° –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ø–µ—Ä–µ–≤–æ–¥ —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –µ–≥–æ, –∏–ª–∏ üîç –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π';

        await bot.sendMessage(chatId, translationMessage, {
            parse_mode: 'Markdown',
            ...getTranslationSelectionKeyboard(userState.tempTranslations, userState.meanings, userState.selectedTranslationIndices)
        });

        try {
            await bot.deleteMessage(chatId, callbackQuery.message.message_id);
        } catch (deleteError) {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
        }
    } catch (error) {
        await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –≤—ã–±–æ—Ä—É –ø–µ—Ä–µ–≤–æ–¥–æ–≤');
    }
}

async function startReverseTraining(chatId) {
    if (!servicesInitialized || !sheetsService.initialized) {
        await bot.sendMessage(chatId, '‚ùå –°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.');
        return;
    }

    try {
        // –ë–µ—Ä–µ–º –í–°–ï —Å–ª–æ–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∞ –Ω–µ —Ç–æ–ª—å–∫–æ –≥–æ—Ç–æ–≤—ã–µ –∫ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—é
        const userWords = await getCachedUserWords(chatId);
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –∏–∑—É—á–µ–Ω—ã
        const learnedWords = userWords.filter(word => 
            word.status === 'active' && 
            word.interval > 1 && // –ò—Å–∫–ª—é—á–∞–µ–º –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞ (interval = 1)
            word.firstLearnedDate && 
            word.firstLearnedDate.trim() !== ''
        );

        if (learnedWords.length === 0) {
            await bot.sendMessage(chatId, 
                'üìö –ù–µ—Ç –∏–∑—É—á–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.\n\n' +
                'üí° –°–Ω–∞—á–∞–ª–∞ –∏–∑—É—á–∏—Ç–µ —Å–ª–æ–≤–∞ –≤ —Ä–∞–∑–¥–µ–ª–µ "üÜï –ù–æ–≤—ã–µ —Å–ª–æ–≤–∞"'
            );
            return;
        }

        // –ë—ã—Å—Ç—Ä–æ–µ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ
        const shuffledWords = learnedWords
            .map(word => ({ word, sort: Math.random() }))
            .sort((a, b) => a.sort - b.sort)
            .map(({ word }) => word)
            .slice(0, 10); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 10 —Å–ª–æ–≤–∞–º–∏ –¥–ª—è –æ–¥–Ω–æ–π —Å–µ—Å—Å–∏–∏

userStates.set(chatId, {
    state: REVERSE_TRAINING_STATES.ACTIVE,
    words: shuffledWords,
    total: shuffledWords.length,
    index: 0,
    correct: 0,
    startTime: Date.now(),
    lastActivity: Date.now()
});

        preloadAudioForWords(shuffledWords);
        await showNextTrainingWord(chatId);
        
    } catch (error) {
        console.error('Error in startReverseTraining:', error);
        await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ª–æ–≤.');
    }
}

async function showNextTrainingWord(chatId) {
    const state = userStates.get(chatId);
    if (!state || state.state !== REVERSE_TRAINING_STATES.ACTIVE) return;

    const { words, index, total } = state;
    
    if (index >= words.length) {
        await completeTraining(chatId, state);
        return;
    }

    const word = words[index];
    const meaning = getRandomMeaning(word);
    
    if (!meaning) {
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª–æ–≤–∞ –±–µ–∑ –ø–µ—Ä–µ–≤–æ–¥–æ–≤
        state.index++;
        state.lastActivity = Date.now();
        await showNextTrainingWord(chatId);
        return;
    }

    const message = `üîÅ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ ${index + 1}/${total}\n\nüá∑üá∫ **${meaning.translation}**\n\n‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ:`;

    await bot.sendMessage(chatId, message, {
        parse_mode: 'Markdown',
        reply_markup: {
            keyboard: [['üëÄ –û—Ç–≤–µ—Ç', '‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å']],
            resize_keyboard: true
        }
    });
}

// –ë—ã—Å—Ç—Ä–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞
function getRandomMeaning(word) {
    if (!word.meanings || !word.meanings.length) return null;
    return word.meanings[Math.floor(Math.random() * word.meanings.length)];
}

async function checkTrainingAnswer(chatId, userAnswer) {
    const state = userStates.get(chatId);
    if (!state || state.state !== REVERSE_TRAINING_STATES.ACTIVE) return;

    const word = state.words[state.index];
    const isCorrect = normalizeAnswer(word.english) === normalizeAnswer(userAnswer);
    
    if (isCorrect) state.correct++;

    await showTrainingResult(chatId, state, word, isCorrect, userAnswer);
    
    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–ª–æ–≤—É –ø–æ—Å–ª–µ –ø–æ–∫–∞–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    setTimeout(async () => {
        state.index++;
        state.lastActivity = Date.now();

        if (state.index >= state.words.length) {
            await completeTraining(chatId, state);
        } else {
            await showNextTrainingWord(chatId);
        }
    }, 2500); // 2.5 —Å–µ–∫—É–Ω–¥—ã –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
}

// –ë—ã—Å—Ç—Ä–∞—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
function normalizeAnswer(answer) {
    return answer.trim().toLowerCase().replace(/[^a-z]/g, '');
}

// –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π –ø–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
async function showTrainingResult(chatId, state, word, isCorrect, userAnswer = '') {
    const translations = word.meanings?.map(m => m.translation).filter(Boolean) || [];
    
    let message = isCorrect ? '‚úÖ **–ü—Ä–∞–≤–∏–ª—å–Ω–æ!**\n\n' : '‚ùå **–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ**\n\n';
    
    if (!isCorrect && userAnswer) {
        message += `–í–∞—à –æ—Ç–≤–µ—Ç: "${userAnswer}"\n`;
    }
    
    message += `üá¨üáß **${word.english}**\n`;
    if (word.transcription) message += `üî§ ${word.transcription}\n`;
    if (translations.length) message += `üìö ${translations.join(', ')}`;

    await bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
}

async function handleTrainingCallback(chatId, data) {
    const state = userStates.get(chatId);
    if (!state || state.state !== REVERSE_TRAINING_STATES.ACTIVE) return;

    switch (data) {
        case 'training_next':
            state.index++;
            state.lastActivity = Date.now();
            if (state.index >= state.words.length) {
                await completeTraining(chatId, state);
            } else {
                await showNextTrainingWord(chatId);
            }
            break;
            
        case 'training_spelling':
            await startTrainingSpelling(chatId);
            break;
            
        case 'training_stats':
            await showTrainingStats(chatId, state);
            break;
    }
}

async function showTrainingStats(chatId, state) {
    const { index, total, correct, startTime } = state;
    const accuracy = index > 0 ? Math.round((correct / index) * 100) : 0;
    const timeSpent = Math.round((Date.now() - startTime) / 1000 / 60);
    
    const message = `üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n\n` +
                   `–ü—Ä–æ–π–¥–µ–Ω–æ: ${index}/${total}\n` +
                   `–ü—Ä–∞–≤–∏–ª—å–Ω–æ: ${correct}\n` +
                   `–¢–æ—á–Ω–æ—Å—Ç—å: ${accuracy}%\n` +
                   `–í—Ä–µ–º—è: ${timeSpent} –º–∏–Ω`;

    await bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
}

async function completeTraining(chatId, state) {
    const { index, total, correct, startTime } = state;
    const accuracy = index > 0 ? Math.round((correct / index) * 100) : 0;
    const timeSpent = Math.round((Date.now() - startTime) / 1000 / 60);
    
    let message = 'üéâ **–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**\n\n';
    message += `–ü—Ä–æ–π–¥–µ–Ω–æ: ${index}/${total}\n`;
    message += `–ü—Ä–∞–≤–∏–ª—å–Ω–æ: ${correct}\n`;
    message += `–¢–æ—á–Ω–æ—Å—Ç—å: ${accuracy}%\n`;
    message += `–í—Ä–µ–º—è: ${timeSpent} –º–∏–Ω\n\n`;
    
    if (accuracy >= 80) message += `üí™ –û—Ç–ª–∏—á–Ω–æ!`;
    else if (accuracy >= 60) message += `üëç –•–æ—Ä–æ—à–æ!`;
    else message += `üí° –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è!`;

    userStates.delete(chatId);
    
    await bot.sendMessage(chatId, message, {
        parse_mode: 'Markdown',
        ...getMainMenu()
    });
}

async function startTrainingSpelling(chatId) {
    const state = userStates.get(chatId);
    if (!state || state.state !== REVERSE_TRAINING_STATES.ACTIVE) return;

    const word = state.words[state.index];
    const meaning = getRandomMeaning(word);
    
    if (!meaning) {
        await bot.sendMessage(chatId, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –ø—Ä–∞–≤–æ–ø–∏—Å–∞–Ω–∏—è.');
        return;
    }

    userStates.set(chatId, {
        ...state,
        state: REVERSE_TRAINING_STATES.SPELLING,
        spellingWord: word,
        spellingTranslation: meaning.translation,
        attempts: 0
    });

    await askTrainingSpellingQuestion(chatId, meaning.translation);
}

async function checkTrainingSpellingAnswer(chatId, userAnswer) {
    const state = userStates.get(chatId);
    if (!state || state.state !== REVERSE_TRAINING_STATES.SPELLING) return;

    const word = state.spellingWord;
    const isCorrect = normalizeAnswer(word.english) === normalizeAnswer(userAnswer);
    
    state.attempts++;

    if (isCorrect) {
        await bot.sendMessage(chatId, `‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! ${word.english}`);
        setTimeout(() => returnToTraining(chatId, state), 1500);
    } else if (state.attempts >= 2) {
        await bot.sendMessage(chatId, `üí° –û—Ç–≤–µ—Ç: ${word.english}`);
        setTimeout(() => returnToTraining(chatId, state), 1500);
    } else {
        await bot.sendMessage(chatId, '‚ùå –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑');
    }
}

async function returnToTraining(chatId, state) {
    const originalState = { ...state };
    originalState.state = REVERSE_TRAINING_STATES.ACTIVE;
    delete originalState.spellingWord;
    delete originalState.spellingTranslation;
    delete originalState.attempts;
    
    userStates.set(chatId, originalState);
    
    // –ü–æ—Å–ª–µ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏–∑ –ø—Ä–∞–≤–æ–ø–∏—Å–∞–Ω–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ–∫—É—â–µ–≥–æ —Å–ª–æ–≤–∞
    const word = originalState.words[originalState.index];
    await showTrainingResult(chatId, originalState, word, false);
    
    // –ò –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–ª–æ–≤—É —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(async () => {
        originalState.index++;
        originalState.lastActivity = Date.now();

        if (originalState.index >= originalState.words.length) {
            await completeTraining(chatId, originalState);
        } else {
            await showNextTrainingWord(chatId);
        }
    }, 2000);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞—É–¥–∏–æ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
async function getCachedAudio(englishWord) {
    const cacheKey = `audio_${englishWord.toLowerCase()}`;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    if (audioCache.has(cacheKey)) {
        const cached = audioCache.get(cacheKey);
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —É—Å—Ç–∞—Ä–µ–ª –ª–∏ –∫—ç—à (1 –¥–µ–Ω—å)
        if (Date.now() - cached.timestamp < 24 * 60 * 60 * 1000) {
            return cached.audioUrl;
        }
    }
    
    // –ï—Å–ª–∏ –Ω–µ—Ç –≤ –∫—ç—à–µ –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª, –ø–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ–µ –∞—É–¥–∏–æ
    try {
        let audioUrl = '';
        
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º Yandex
        try {
            const yandexData = await yandexService.getTranscriptionAndAudio(englishWord);
            audioUrl = yandexData.audioUrl || '';
        } catch (yandexError) {
            // –ï—Å–ª–∏ Yandex –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –∏—Å–ø–æ–ª—å–∑—É–µ–º Google TTS
            audioUrl = `https://translate.google.com/translate_tts?ie=UTF-8&q=${encodeURIComponent(englishWord)}&tl=en-gb&client=tw-ob`;
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
        if (audioUrl) {
            audioCache.set(cacheKey, {
                audioUrl: audioUrl,
                timestamp: Date.now()
            });
        }
        
        return audioUrl;
    } catch (error) {
        console.error('Error getting audio:', error);
        return '';
    }
}

async function preloadAudioForWords(words) {
    const audioPromises = words.map(async (word) => {
        if (word.english) {
            try {
                await getCachedAudio(word.english);
            } catch (error) {
                console.error(`Error preloading audio for "${word.english}":`, error);
            }
        }
    });
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –≤ —Ñ–æ–Ω–µ, –Ω–µ –∂–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    Promise.allSettled(audioPromises);
}

// –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á
setInterval(() => {
    resetDailyLimit();
}, 60 * 60 * 1000);

console.log('ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω: –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å —Ç—Ä–µ–Ω–∞–∂–µ—Ä–æ–º –ø—Ä–∞–≤–æ–ø–∏—Å–∞–Ω–∏—è');












